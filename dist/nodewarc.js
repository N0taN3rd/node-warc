!function(e,t){for(var r in t)e[r]=t[r]}(self,function(e){var t={};function r(n){if(t[n])return t[n].exports;var i=t[n]={i:n,l:!1,exports:{}};return e[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)r.d(n,i,function(t){return e[t]}.bind(null,i));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=66)}([function(e,t,r){"use strict";(function(e){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
var n=r(69),i=r(70),s=r(38);function o(){return u.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function a(e,t){if(o()<t)throw new RangeError("Invalid typed array length");return u.TYPED_ARRAY_SUPPORT?(e=new Uint8Array(t)).__proto__=u.prototype:(null===e&&(e=new u(t)),e.length=t),e}function u(e,t,r){if(!(u.TYPED_ARRAY_SUPPORT||this instanceof u))return new u(e,t,r);if("number"==typeof e){if("string"==typeof t)throw new Error("If encoding is specified then the first argument must be a string");return f(this,e)}return h(this,e,t,r)}function h(e,t,r,n){if("number"==typeof t)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&t instanceof ArrayBuffer?function(e,t,r,n){if(t.byteLength,r<0||t.byteLength<r)throw new RangeError("'offset' is out of bounds");if(t.byteLength<r+(n||0))throw new RangeError("'length' is out of bounds");t=void 0===r&&void 0===n?new Uint8Array(t):void 0===n?new Uint8Array(t,r):new Uint8Array(t,r,n);u.TYPED_ARRAY_SUPPORT?(e=t).__proto__=u.prototype:e=l(e,t);return e}(e,t,r,n):"string"==typeof t?function(e,t,r){"string"==typeof r&&""!==r||(r="utf8");if(!u.isEncoding(r))throw new TypeError('"encoding" must be a valid string encoding');var n=0|p(t,r),i=(e=a(e,n)).write(t,r);i!==n&&(e=e.slice(0,i));return e}(e,t,r):function(e,t){if(u.isBuffer(t)){var r=0|d(t.length);return 0===(e=a(e,r)).length?e:(t.copy(e,0,0,r),e)}if(t){if("undefined"!=typeof ArrayBuffer&&t.buffer instanceof ArrayBuffer||"length"in t)return"number"!=typeof t.length||(n=t.length)!=n?a(e,0):l(e,t);if("Buffer"===t.type&&s(t.data))return l(e,t.data)}var n;throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(e,t)}function c(e){if("number"!=typeof e)throw new TypeError('"size" argument must be a number');if(e<0)throw new RangeError('"size" argument must not be negative')}function f(e,t){if(c(t),e=a(e,t<0?0:0|d(t)),!u.TYPED_ARRAY_SUPPORT)for(var r=0;r<t;++r)e[r]=0;return e}function l(e,t){var r=t.length<0?0:0|d(t.length);e=a(e,r);for(var n=0;n<r;n+=1)e[n]=255&t[n];return e}function d(e){if(e>=o())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+o().toString(16)+" bytes");return 0|e}function p(e,t){if(u.isBuffer(e))return e.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(e)||e instanceof ArrayBuffer))return e.byteLength;"string"!=typeof e&&(e=""+e);var r=e.length;if(0===r)return 0;for(var n=!1;;)switch(t){case"ascii":case"latin1":case"binary":return r;case"utf8":case"utf-8":case void 0:return z(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*r;case"hex":return r>>>1;case"base64":return M(e).length;default:if(n)return z(e).length;t=(""+t).toLowerCase(),n=!0}}function _(e,t,r){var n=e[t];e[t]=e[r],e[r]=n}function g(e,t,r,n,i){if(0===e.length)return-1;if("string"==typeof r?(n=r,r=0):r>2147483647?r=2147483647:r<-2147483648&&(r=-2147483648),r=+r,isNaN(r)&&(r=i?0:e.length-1),r<0&&(r=e.length+r),r>=e.length){if(i)return-1;r=e.length-1}else if(r<0){if(!i)return-1;r=0}if("string"==typeof t&&(t=u.from(t,n)),u.isBuffer(t))return 0===t.length?-1:m(e,t,r,n,i);if("number"==typeof t)return t&=255,u.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?i?Uint8Array.prototype.indexOf.call(e,t,r):Uint8Array.prototype.lastIndexOf.call(e,t,r):m(e,[t],r,n,i);throw new TypeError("val must be string, number or Buffer")}function m(e,t,r,n,i){var s,o=1,a=e.length,u=t.length;if(void 0!==n&&("ucs2"===(n=String(n).toLowerCase())||"ucs-2"===n||"utf16le"===n||"utf-16le"===n)){if(e.length<2||t.length<2)return-1;o=2,a/=2,u/=2,r/=2}function h(e,t){return 1===o?e[t]:e.readUInt16BE(t*o)}if(i){var c=-1;for(s=r;s<a;s++)if(h(e,s)===h(t,-1===c?0:s-c)){if(-1===c&&(c=s),s-c+1===u)return c*o}else-1!==c&&(s-=s-c),c=-1}else for(r+u>a&&(r=a-u),s=r;s>=0;s--){for(var f=!0,l=0;l<u;l++)if(h(e,s+l)!==h(t,l)){f=!1;break}if(f)return s}return-1}function w(e,t,r,n){r=Number(r)||0;var i=e.length-r;n?(n=Number(n))>i&&(n=i):n=i;var s=t.length;if(s%2!=0)throw new TypeError("Invalid hex string");n>s/2&&(n=s/2);for(var o=0;o<n;++o){var a=parseInt(t.substr(2*o,2),16);if(isNaN(a))return o;e[r+o]=a}return o}function y(e,t,r,n){return W(z(t,e.length-r),e,r,n)}function b(e,t,r,n){return W(function(e){for(var t=[],r=0;r<e.length;++r)t.push(255&e.charCodeAt(r));return t}(t),e,r,n)}function v(e,t,r,n){return b(e,t,r,n)}function R(e,t,r,n){return W(M(t),e,r,n)}function x(e,t,r,n){return W(function(e,t){for(var r,n,i,s=[],o=0;o<e.length&&!((t-=2)<0);++o)r=e.charCodeAt(o),n=r>>8,i=r%256,s.push(i),s.push(n);return s}(t,e.length-r),e,r,n)}function E(e,t,r){return 0===t&&r===e.length?n.fromByteArray(e):n.fromByteArray(e.slice(t,r))}function k(e,t,r){r=Math.min(e.length,r);for(var n=[],i=t;i<r;){var s,o,a,u,h=e[i],c=null,f=h>239?4:h>223?3:h>191?2:1;if(i+f<=r)switch(f){case 1:h<128&&(c=h);break;case 2:128==(192&(s=e[i+1]))&&(u=(31&h)<<6|63&s)>127&&(c=u);break;case 3:s=e[i+1],o=e[i+2],128==(192&s)&&128==(192&o)&&(u=(15&h)<<12|(63&s)<<6|63&o)>2047&&(u<55296||u>57343)&&(c=u);break;case 4:s=e[i+1],o=e[i+2],a=e[i+3],128==(192&s)&&128==(192&o)&&128==(192&a)&&(u=(15&h)<<18|(63&s)<<12|(63&o)<<6|63&a)>65535&&u<1114112&&(c=u)}null===c?(c=65533,f=1):c>65535&&(c-=65536,n.push(c>>>10&1023|55296),c=56320|1023&c),n.push(c),i+=f}return function(e){var t=e.length;if(t<=S)return String.fromCharCode.apply(String,e);var r="",n=0;for(;n<t;)r+=String.fromCharCode.apply(String,e.slice(n,n+=S));return r}(n)}t.Buffer=u,t.SlowBuffer=function(e){+e!=e&&(e=0);return u.alloc(+e)},t.INSPECT_MAX_BYTES=50,u.TYPED_ARRAY_SUPPORT=void 0!==e.TYPED_ARRAY_SUPPORT?e.TYPED_ARRAY_SUPPORT:function(){try{var e=new Uint8Array(1);return e.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===e.foo()&&"function"==typeof e.subarray&&0===e.subarray(1,1).byteLength}catch(e){return!1}}(),t.kMaxLength=o(),u.poolSize=8192,u._augment=function(e){return e.__proto__=u.prototype,e},u.from=function(e,t,r){return h(null,e,t,r)},u.TYPED_ARRAY_SUPPORT&&(u.prototype.__proto__=Uint8Array.prototype,u.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&u[Symbol.species]===u&&Object.defineProperty(u,Symbol.species,{value:null,configurable:!0})),u.alloc=function(e,t,r){return function(e,t,r,n){return c(t),t<=0?a(e,t):void 0!==r?"string"==typeof n?a(e,t).fill(r,n):a(e,t).fill(r):a(e,t)}(null,e,t,r)},u.allocUnsafe=function(e){return f(null,e)},u.allocUnsafeSlow=function(e){return f(null,e)},u.isBuffer=function(e){return!(null==e||!e._isBuffer)},u.compare=function(e,t){if(!u.isBuffer(e)||!u.isBuffer(t))throw new TypeError("Arguments must be Buffers");if(e===t)return 0;for(var r=e.length,n=t.length,i=0,s=Math.min(r,n);i<s;++i)if(e[i]!==t[i]){r=e[i],n=t[i];break}return r<n?-1:n<r?1:0},u.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},u.concat=function(e,t){if(!s(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return u.alloc(0);var r;if(void 0===t)for(t=0,r=0;r<e.length;++r)t+=e[r].length;var n=u.allocUnsafe(t),i=0;for(r=0;r<e.length;++r){var o=e[r];if(!u.isBuffer(o))throw new TypeError('"list" argument must be an Array of Buffers');o.copy(n,i),i+=o.length}return n},u.byteLength=p,u.prototype._isBuffer=!0,u.prototype.swap16=function(){var e=this.length;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var t=0;t<e;t+=2)_(this,t,t+1);return this},u.prototype.swap32=function(){var e=this.length;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var t=0;t<e;t+=4)_(this,t,t+3),_(this,t+1,t+2);return this},u.prototype.swap64=function(){var e=this.length;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var t=0;t<e;t+=8)_(this,t,t+7),_(this,t+1,t+6),_(this,t+2,t+5),_(this,t+3,t+4);return this},u.prototype.toString=function(){var e=0|this.length;return 0===e?"":0===arguments.length?k(this,0,e):function(e,t,r){var n=!1;if((void 0===t||t<0)&&(t=0),t>this.length)return"";if((void 0===r||r>this.length)&&(r=this.length),r<=0)return"";if((r>>>=0)<=(t>>>=0))return"";for(e||(e="utf8");;)switch(e){case"hex":return C(this,t,r);case"utf8":case"utf-8":return k(this,t,r);case"ascii":return A(this,t,r);case"latin1":case"binary":return T(this,t,r);case"base64":return E(this,t,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return O(this,t,r);default:if(n)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),n=!0}}.apply(this,arguments)},u.prototype.equals=function(e){if(!u.isBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e||0===u.compare(this,e)},u.prototype.inspect=function(){var e="",r=t.INSPECT_MAX_BYTES;return this.length>0&&(e=this.toString("hex",0,r).match(/.{2}/g).join(" "),this.length>r&&(e+=" ... ")),"<Buffer "+e+">"},u.prototype.compare=function(e,t,r,n,i){if(!u.isBuffer(e))throw new TypeError("Argument must be a Buffer");if(void 0===t&&(t=0),void 0===r&&(r=e?e.length:0),void 0===n&&(n=0),void 0===i&&(i=this.length),t<0||r>e.length||n<0||i>this.length)throw new RangeError("out of range index");if(n>=i&&t>=r)return 0;if(n>=i)return-1;if(t>=r)return 1;if(this===e)return 0;for(var s=(i>>>=0)-(n>>>=0),o=(r>>>=0)-(t>>>=0),a=Math.min(s,o),h=this.slice(n,i),c=e.slice(t,r),f=0;f<a;++f)if(h[f]!==c[f]){s=h[f],o=c[f];break}return s<o?-1:o<s?1:0},u.prototype.includes=function(e,t,r){return-1!==this.indexOf(e,t,r)},u.prototype.indexOf=function(e,t,r){return g(this,e,t,r,!0)},u.prototype.lastIndexOf=function(e,t,r){return g(this,e,t,r,!1)},u.prototype.write=function(e,t,r,n){if(void 0===t)n="utf8",r=this.length,t=0;else if(void 0===r&&"string"==typeof t)n=t,r=this.length,t=0;else{if(!isFinite(t))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");t|=0,isFinite(r)?(r|=0,void 0===n&&(n="utf8")):(n=r,r=void 0)}var i=this.length-t;if((void 0===r||r>i)&&(r=i),e.length>0&&(r<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");n||(n="utf8");for(var s=!1;;)switch(n){case"hex":return w(this,e,t,r);case"utf8":case"utf-8":return y(this,e,t,r);case"ascii":return b(this,e,t,r);case"latin1":case"binary":return v(this,e,t,r);case"base64":return R(this,e,t,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return x(this,e,t,r);default:if(s)throw new TypeError("Unknown encoding: "+n);n=(""+n).toLowerCase(),s=!0}},u.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var S=4096;function A(e,t,r){var n="";r=Math.min(e.length,r);for(var i=t;i<r;++i)n+=String.fromCharCode(127&e[i]);return n}function T(e,t,r){var n="";r=Math.min(e.length,r);for(var i=t;i<r;++i)n+=String.fromCharCode(e[i]);return n}function C(e,t,r){var n=e.length;(!t||t<0)&&(t=0),(!r||r<0||r>n)&&(r=n);for(var i="",s=t;s<r;++s)i+=U(e[s]);return i}function O(e,t,r){for(var n=e.slice(t,r),i="",s=0;s<n.length;s+=2)i+=String.fromCharCode(n[s]+256*n[s+1]);return i}function I(e,t,r){if(e%1!=0||e<0)throw new RangeError("offset is not uint");if(e+t>r)throw new RangeError("Trying to access beyond buffer length")}function L(e,t,r,n,i,s){if(!u.isBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(t>i||t<s)throw new RangeError('"value" argument is out of bounds');if(r+n>e.length)throw new RangeError("Index out of range")}function q(e,t,r,n){t<0&&(t=65535+t+1);for(var i=0,s=Math.min(e.length-r,2);i<s;++i)e[r+i]=(t&255<<8*(n?i:1-i))>>>8*(n?i:1-i)}function P(e,t,r,n){t<0&&(t=4294967295+t+1);for(var i=0,s=Math.min(e.length-r,4);i<s;++i)e[r+i]=t>>>8*(n?i:3-i)&255}function B(e,t,r,n,i,s){if(r+n>e.length)throw new RangeError("Index out of range");if(r<0)throw new RangeError("Index out of range")}function j(e,t,r,n,s){return s||B(e,0,r,4),i.write(e,t,r,n,23,4),r+4}function N(e,t,r,n,s){return s||B(e,0,r,8),i.write(e,t,r,n,52,8),r+8}u.prototype.slice=function(e,t){var r,n=this.length;if((e=~~e)<0?(e+=n)<0&&(e=0):e>n&&(e=n),(t=void 0===t?n:~~t)<0?(t+=n)<0&&(t=0):t>n&&(t=n),t<e&&(t=e),u.TYPED_ARRAY_SUPPORT)(r=this.subarray(e,t)).__proto__=u.prototype;else{var i=t-e;r=new u(i,void 0);for(var s=0;s<i;++s)r[s]=this[s+e]}return r},u.prototype.readUIntLE=function(e,t,r){e|=0,t|=0,r||I(e,t,this.length);for(var n=this[e],i=1,s=0;++s<t&&(i*=256);)n+=this[e+s]*i;return n},u.prototype.readUIntBE=function(e,t,r){e|=0,t|=0,r||I(e,t,this.length);for(var n=this[e+--t],i=1;t>0&&(i*=256);)n+=this[e+--t]*i;return n},u.prototype.readUInt8=function(e,t){return t||I(e,1,this.length),this[e]},u.prototype.readUInt16LE=function(e,t){return t||I(e,2,this.length),this[e]|this[e+1]<<8},u.prototype.readUInt16BE=function(e,t){return t||I(e,2,this.length),this[e]<<8|this[e+1]},u.prototype.readUInt32LE=function(e,t){return t||I(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},u.prototype.readUInt32BE=function(e,t){return t||I(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},u.prototype.readIntLE=function(e,t,r){e|=0,t|=0,r||I(e,t,this.length);for(var n=this[e],i=1,s=0;++s<t&&(i*=256);)n+=this[e+s]*i;return n>=(i*=128)&&(n-=Math.pow(2,8*t)),n},u.prototype.readIntBE=function(e,t,r){e|=0,t|=0,r||I(e,t,this.length);for(var n=t,i=1,s=this[e+--n];n>0&&(i*=256);)s+=this[e+--n]*i;return s>=(i*=128)&&(s-=Math.pow(2,8*t)),s},u.prototype.readInt8=function(e,t){return t||I(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},u.prototype.readInt16LE=function(e,t){t||I(e,2,this.length);var r=this[e]|this[e+1]<<8;return 32768&r?4294901760|r:r},u.prototype.readInt16BE=function(e,t){t||I(e,2,this.length);var r=this[e+1]|this[e]<<8;return 32768&r?4294901760|r:r},u.prototype.readInt32LE=function(e,t){return t||I(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},u.prototype.readInt32BE=function(e,t){return t||I(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},u.prototype.readFloatLE=function(e,t){return t||I(e,4,this.length),i.read(this,e,!0,23,4)},u.prototype.readFloatBE=function(e,t){return t||I(e,4,this.length),i.read(this,e,!1,23,4)},u.prototype.readDoubleLE=function(e,t){return t||I(e,8,this.length),i.read(this,e,!0,52,8)},u.prototype.readDoubleBE=function(e,t){return t||I(e,8,this.length),i.read(this,e,!1,52,8)},u.prototype.writeUIntLE=function(e,t,r,n){(e=+e,t|=0,r|=0,n)||L(this,e,t,r,Math.pow(2,8*r)-1,0);var i=1,s=0;for(this[t]=255&e;++s<r&&(i*=256);)this[t+s]=e/i&255;return t+r},u.prototype.writeUIntBE=function(e,t,r,n){(e=+e,t|=0,r|=0,n)||L(this,e,t,r,Math.pow(2,8*r)-1,0);var i=r-1,s=1;for(this[t+i]=255&e;--i>=0&&(s*=256);)this[t+i]=e/s&255;return t+r},u.prototype.writeUInt8=function(e,t,r){return e=+e,t|=0,r||L(this,e,t,1,255,0),u.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),this[t]=255&e,t+1},u.prototype.writeUInt16LE=function(e,t,r){return e=+e,t|=0,r||L(this,e,t,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):q(this,e,t,!0),t+2},u.prototype.writeUInt16BE=function(e,t,r){return e=+e,t|=0,r||L(this,e,t,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):q(this,e,t,!1),t+2},u.prototype.writeUInt32LE=function(e,t,r){return e=+e,t|=0,r||L(this,e,t,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e):P(this,e,t,!0),t+4},u.prototype.writeUInt32BE=function(e,t,r){return e=+e,t|=0,r||L(this,e,t,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):P(this,e,t,!1),t+4},u.prototype.writeIntLE=function(e,t,r,n){if(e=+e,t|=0,!n){var i=Math.pow(2,8*r-1);L(this,e,t,r,i-1,-i)}var s=0,o=1,a=0;for(this[t]=255&e;++s<r&&(o*=256);)e<0&&0===a&&0!==this[t+s-1]&&(a=1),this[t+s]=(e/o>>0)-a&255;return t+r},u.prototype.writeIntBE=function(e,t,r,n){if(e=+e,t|=0,!n){var i=Math.pow(2,8*r-1);L(this,e,t,r,i-1,-i)}var s=r-1,o=1,a=0;for(this[t+s]=255&e;--s>=0&&(o*=256);)e<0&&0===a&&0!==this[t+s+1]&&(a=1),this[t+s]=(e/o>>0)-a&255;return t+r},u.prototype.writeInt8=function(e,t,r){return e=+e,t|=0,r||L(this,e,t,1,127,-128),u.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),e<0&&(e=255+e+1),this[t]=255&e,t+1},u.prototype.writeInt16LE=function(e,t,r){return e=+e,t|=0,r||L(this,e,t,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):q(this,e,t,!0),t+2},u.prototype.writeInt16BE=function(e,t,r){return e=+e,t|=0,r||L(this,e,t,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):q(this,e,t,!1),t+2},u.prototype.writeInt32LE=function(e,t,r){return e=+e,t|=0,r||L(this,e,t,4,2147483647,-2147483648),u.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24):P(this,e,t,!0),t+4},u.prototype.writeInt32BE=function(e,t,r){return e=+e,t|=0,r||L(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),u.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):P(this,e,t,!1),t+4},u.prototype.writeFloatLE=function(e,t,r){return j(this,e,t,!0,r)},u.prototype.writeFloatBE=function(e,t,r){return j(this,e,t,!1,r)},u.prototype.writeDoubleLE=function(e,t,r){return N(this,e,t,!0,r)},u.prototype.writeDoubleBE=function(e,t,r){return N(this,e,t,!1,r)},u.prototype.copy=function(e,t,r,n){if(r||(r=0),n||0===n||(n=this.length),t>=e.length&&(t=e.length),t||(t=0),n>0&&n<r&&(n=r),n===r)return 0;if(0===e.length||0===this.length)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(r<0||r>=this.length)throw new RangeError("sourceStart out of bounds");if(n<0)throw new RangeError("sourceEnd out of bounds");n>this.length&&(n=this.length),e.length-t<n-r&&(n=e.length-t+r);var i,s=n-r;if(this===e&&r<t&&t<n)for(i=s-1;i>=0;--i)e[i+t]=this[i+r];else if(s<1e3||!u.TYPED_ARRAY_SUPPORT)for(i=0;i<s;++i)e[i+t]=this[i+r];else Uint8Array.prototype.set.call(e,this.subarray(r,r+s),t);return s},u.prototype.fill=function(e,t,r,n){if("string"==typeof e){if("string"==typeof t?(n=t,t=0,r=this.length):"string"==typeof r&&(n=r,r=this.length),1===e.length){var i=e.charCodeAt(0);i<256&&(e=i)}if(void 0!==n&&"string"!=typeof n)throw new TypeError("encoding must be a string");if("string"==typeof n&&!u.isEncoding(n))throw new TypeError("Unknown encoding: "+n)}else"number"==typeof e&&(e&=255);if(t<0||this.length<t||this.length<r)throw new RangeError("Out of range index");if(r<=t)return this;var s;if(t>>>=0,r=void 0===r?this.length:r>>>0,e||(e=0),"number"==typeof e)for(s=t;s<r;++s)this[s]=e;else{var o=u.isBuffer(e)?e:z(new u(e,n).toString()),a=o.length;for(s=0;s<r-t;++s)this[s+t]=o[s%a]}return this};var D=/[^+\/0-9A-Za-z-_]/g;function U(e){return e<16?"0"+e.toString(16):e.toString(16)}function z(e,t){var r;t=t||1/0;for(var n=e.length,i=null,s=[],o=0;o<n;++o){if((r=e.charCodeAt(o))>55295&&r<57344){if(!i){if(r>56319){(t-=3)>-1&&s.push(239,191,189);continue}if(o+1===n){(t-=3)>-1&&s.push(239,191,189);continue}i=r;continue}if(r<56320){(t-=3)>-1&&s.push(239,191,189),i=r;continue}r=65536+(i-55296<<10|r-56320)}else i&&(t-=3)>-1&&s.push(239,191,189);if(i=null,r<128){if((t-=1)<0)break;s.push(r)}else if(r<2048){if((t-=2)<0)break;s.push(r>>6|192,63&r|128)}else if(r<65536){if((t-=3)<0)break;s.push(r>>12|224,r>>6&63|128,63&r|128)}else{if(!(r<1114112))throw new Error("Invalid code point");if((t-=4)<0)break;s.push(r>>18|240,r>>12&63|128,r>>6&63|128,63&r|128)}}return s}function M(e){return n.toByteArray(function(e){if((e=function(e){return e.trim?e.trim():e.replace(/^\s+|\s+$/g,"")}(e).replace(D,"")).length<2)return"";for(;e.length%4!=0;)e+="=";return e}(e))}function W(e,t,r,n){for(var i=0;i<n&&!(i+r>=t.length||i>=e.length);++i)t[i+r]=e[i];return i}}).call(this,r(1))},function(e,t){var r;r=function(){return this}();try{r=r||new Function("return this")()}catch(e){"object"==typeof window&&(r=window)}e.exports=r},function(e,t){var r,n,i=e.exports={};function s(){throw new Error("setTimeout has not been defined")}function o(){throw new Error("clearTimeout has not been defined")}function a(e){if(r===setTimeout)return setTimeout(e,0);if((r===s||!r)&&setTimeout)return r=setTimeout,setTimeout(e,0);try{return r(e,0)}catch(t){try{return r.call(null,e,0)}catch(t){return r.call(this,e,0)}}}!function(){try{r="function"==typeof setTimeout?setTimeout:s}catch(e){r=s}try{n="function"==typeof clearTimeout?clearTimeout:o}catch(e){n=o}}();var u,h=[],c=!1,f=-1;function l(){c&&u&&(c=!1,u.length?h=u.concat(h):f=-1,h.length&&d())}function d(){if(!c){var e=a(l);c=!0;for(var t=h.length;t;){for(u=h,h=[];++f<t;)u&&u[f].run();f=-1,t=h.length}u=null,c=!1,function(e){if(n===clearTimeout)return clearTimeout(e);if((n===o||!n)&&clearTimeout)return n=clearTimeout,clearTimeout(e);try{n(e)}catch(t){try{return n.call(null,e)}catch(t){return n.call(this,e)}}}(e)}}function p(e,t){this.fun=e,this.array=t}function _(){}i.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)t[r-1]=arguments[r];h.push(new p(e,t)),1!==h.length||c||a(d)},p.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=_,i.addListener=_,i.once=_,i.off=_,i.removeListener=_,i.removeAllListeners=_,i.emit=_,i.prependListener=_,i.prependOnceListener=_,i.listeners=function(e){return[]},i.binding=function(e){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(e){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}},function(e,t){const r="\r\n",n="1.0",i=`WARC/${n}${r}`,s={warcinfo:"warcinfo",metadata:"metadata",request:"request",response:"response",revisit:"revisit",resource:"resource",conversion:"conversion",unknown:"unknown",continuation:"continuation"},o={warcFields:"Content-Type: application/warc-fields\r\n",httpRequest:"Content-Type: application/http; msgtype=request\r\n",httpResponse:"Content-Type: application/http; msgtype=response\r\n"};function a(e){return`WARC-Record-ID: <urn:uuid:${e}>${r}`}function u(e){return`WARC-Date: ${e}${r}`}function h(e){return`WARC-Type: ${e}${r}`}function c(e){return`Content-Length: ${e}${r}`}function f(e){return`WARC-Concurrent-To: <urn:uuid:${e}>${r}`}function l(e){return`WARC-Warcinfo-ID: <urn:uuid:${e}>${r}`}function d(e,{rid:t,date:n,len:s,targetURI:o}){return null!=o?`${i}${h(e)}${a(t)}${u(n)}${function(e){return`WARC-Target-URI: ${e}${r}`}(o)}${c(s)}`:`${i}${h(e)}${a(t)}${u(n)}${c(s)}`}e.exports={requiredHeaderFields:d,warcInfoHeader:function(e){const t=`${d(s.warcinfo,e)}${o.warcFields}`;return null!=e.fileName?`${t}${n=e.fileName,`WARC-Filename: ${n}${r}`}`:t;var n},warcInfoContent:function(e){const t=[`format: WARC File Format ${n}${r}`];for(let n in e)t.push(`${n}: ${e[n]}${r}`);return t.join("")},warcRequestHeader:function({targetURI:e,now:t,concurrentTo:r,rid:n,len:i,wid:a}){const u=[d(s.request,{date:t,len:i,rid:n,targetURI:e}),o.httpRequest];return null!=r&&u.push(f(r)),null!=a&&u.push(l(a)),u.join("")},warcResponseHeader:function({targetURI:e,now:t,rid:r,len:n,wid:i}){const a=[d(s.response,{date:t,len:n,rid:r,targetURI:e}),o.httpResponse];return null!=i&&a.push(l(i)),a.join("")},warcMetadataHeader:function({targetURI:e,now:t,concurrentTo:r,rid:n,len:i,wid:a}){const u=[d(s.metadata,{date:t,len:i,rid:n,targetURI:e}),o.warcFields];return null!=r&&u.push(f(r)),null!=a&&u.push(l(a)),u.join("")},recordSeparator:"\r\n\r\n",CRLF:r,CRLF2x:"\r\n\r\n",WARCTypes:s,WARCV:n,WARCContentTypes:o}},function(e,t){"function"==typeof Object.create?e.exports=function(e,t){e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}})}:e.exports=function(e,t){e.super_=t;var r=function(){};r.prototype=t.prototype,e.prototype=new r,e.prototype.constructor=e}},function(e,t,r){"use strict";var n="undefined"!=typeof Uint8Array&&"undefined"!=typeof Uint16Array&&"undefined"!=typeof Int32Array;function i(e,t){return Object.prototype.hasOwnProperty.call(e,t)}t.assign=function(e){for(var t=Array.prototype.slice.call(arguments,1);t.length;){var r=t.shift();if(r){if("object"!=typeof r)throw new TypeError(r+"must be non-object");for(var n in r)i(r,n)&&(e[n]=r[n])}}return e},t.shrinkBuf=function(e,t){return e.length===t?e:e.subarray?e.subarray(0,t):(e.length=t,e)};var s={arraySet:function(e,t,r,n,i){if(t.subarray&&e.subarray)e.set(t.subarray(r,r+n),i);else for(var s=0;s<n;s++)e[i+s]=t[r+s]},flattenChunks:function(e){var t,r,n,i,s,o;for(n=0,t=0,r=e.length;t<r;t++)n+=e[t].length;for(o=new Uint8Array(n),i=0,t=0,r=e.length;t<r;t++)s=e[t],o.set(s,i),i+=s.length;return o}},o={arraySet:function(e,t,r,n,i){for(var s=0;s<n;s++)e[i+s]=t[r+s]},flattenChunks:function(e){return[].concat.apply([],e)}};t.setTyped=function(e){e?(t.Buf8=Uint8Array,t.Buf16=Uint16Array,t.Buf32=Int32Array,t.assign(t,s)):(t.Buf8=Array,t.Buf16=Array,t.Buf32=Array,t.assign(t,o))},t.setTyped(n)},function(e,t,r){var n=r(54),i="object"==typeof self&&self&&self.Object===Object&&self,s=n||i||Function("return this")();e.exports=s},function(e,t,r){"use strict";var n=r(20),i=Object.keys||function(e){var t=[];for(var r in e)t.push(r);return t};e.exports=f;var s=r(12);s.inherits=r(4);var o=r(39),a=r(27);s.inherits(f,o);for(var u=i(a.prototype),h=0;h<u.length;h++){var c=u[h];f.prototype[c]||(f.prototype[c]=a.prototype[c])}function f(e){if(!(this instanceof f))return new f(e);o.call(this,e),a.call(this,e),e&&!1===e.readable&&(this.readable=!1),e&&!1===e.writable&&(this.writable=!1),this.allowHalfOpen=!0,e&&!1===e.allowHalfOpen&&(this.allowHalfOpen=!1),this.once("end",l)}function l(){this.allowHalfOpen||this._writableState.ended||n.nextTick(d,this)}function d(e){e.end()}Object.defineProperty(f.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),Object.defineProperty(f.prototype,"destroyed",{get:function(){return void 0!==this._readableState&&void 0!==this._writableState&&(this._readableState.destroyed&&this._writableState.destroyed)},set:function(e){void 0!==this._readableState&&void 0!==this._writableState&&(this._readableState.destroyed=e,this._writableState.destroyed=e)}}),f.prototype._destroy=function(e,t){this.push(null),this.end(),n.nextTick(t,e)}},function(e,t,r){(function(t,n){const i=r(10).fs,s=r(19),o=r(95),a=r(51),u=r(22),{warcInfoHeader:h,warcInfoContent:c,warcRequestHeader:f,warcResponseHeader:l,warcMetadataHeader:d,recordSeparator:p,CRLF:_,CRLF2x:g}=r(3),m=r(98),w=t.from(p,"utf8"),y=t.from(_,"utf8"),b=w.length+y.length;function v(e,r){if(null!=r){const n=e.endsWith(g)?t.from(e,"utf8"):t.from(`${e}${_}`,"utf8"),i=t.isBuffer(r)?r:t.from(r,"utf8");return t.concat([n,i],n.length+i.length)}return t.from(e,"utf8")}function R(e){return null==e&&(e={}),{appending:e.appending||!1,gzip:e.gzip||null!=n.env.NODEWARC_WRITE_GZIPPED}}e.exports=class extends u{constructor(e){super(),this._warcOutStream=null,this._lastError=null,this._now=null,this._fileName=null,this._warcInfoId=null,this.opts=null,this.defaultOpts=R(e),this._version=r(99).version,this._onFinish=this._onFinish.bind(this),this._onError=this._onError.bind(this)}setDefaultOpts(e){this.defaultOpts=R(e)}initWARC(e,t){this.opts=Object.assign({},this.defaultOpts,t||{});const r=m(e,this.opts.gzip);i?this.opts.appending?this._warcOutStream=i.createWriteStream(r,{flags:"a",encoding:"utf8"}):this._warcOutStream=i.createWriteStream(r,{encoding:"utf8"}):this._warcOutStream=e,this._warcOutStream.on("finish",this._onFinish),this._warcOutStream.on("error",this._onError);let n=(new Date).toISOString();this._now=n.substr(0,n.indexOf("."))+"Z",this._fileName=o.basename(r)}async writeRequestResponseRecords(e,t,r){const n=a();return await this._writeRequestRecord(e,n,t.headers,t.data),this._writeResponseRecord(e,n,r.headers,r.data)}async writeRecordChunks(...e){for(let t of e)await this.writeRecordBlock(t)}writeWarcInfoRecord(e){return t.isBuffer(e)||"string"==typeof e?this.writeWarcRawInfoRecord(e):(null==e.software&&(e.software=`node-warc/${this._version}`),this.writeWarcRawInfoRecord(t.from(c(e),"utf8")))}writeWarcRawInfoRecord(e){let r;this._warcInfoId?r=a():this._warcInfoId=r=a();const n=t.isBuffer(e)?e:t.from(e,"utf8"),i=t.from(h({date:this._now,fileName:this._fileName,len:n.length,rid:r}),"utf8"),s=i.length+n.length+b;return this.writeRecordBlock(t.concat([i,y,n,w],s))}writeWebrecorderBookmarksInfoRecord(e){let r;this._warcInfoId?r=a():this._warcInfoId=r=a();const n={software:`node-warc/${this._version}`,"json-metadata":JSON.stringify({desc:"",auto_title:!0,type:"recording",pages:Array.isArray(e)?e.map(e=>({timestamp:this._now,url:e})):[{timestamp:this._now,url:e}]})},i=t.from(c(n),"utf8"),s=t.from(h({date:this._now,fileName:this._fileName,len:i.length,rid:r}),"utf8"),o=s.length+i.length+b;return this.writeRecordBlock(t.concat([s,y,i,w],o))}writeWarcMetadataOutlinks(e,t){return this.writeWarcMetadata(e,t)}writeWarcMetadata(e,r){const n=t.isBuffer(r)?r:t.from(r,"utf8"),i=t.from(d({targetURI:e,now:this._now,len:n.length,concurrentTo:this._warcInfoId,rid:a()}),"utf8"),s=n.length+i.length+b;return this.writeRecordBlock(t.concat([i,y,n,w],s))}writeRequestRecord(e,t,r){return this._writeRequestRecord(e,null,t,r)}writeResponseRecord(e,t,r){return this._writeResponseRecord(e,a(),t,r)}writeRecordBlock(e){return new Promise((t,r)=>{this.opts.gzip&&(e=s.gzipSync(e)),this._warcOutStream.write(e,"utf8")?t():this._warcOutStream.once("drain",t)})}end(){null!=this._warcOutStream&&this._warcOutStream.end()}_writeRequestRecord(e,r,n,i){const s=v(n,i),o=t.from(f({targetURI:e,concurrentTo:r,now:this._now,rid:a(),wid:this._warcInfoId,len:s.length}),"utf8"),u=o.length+s.length+b;return this.writeRecordBlock(t.concat([o,y,s,w],u))}_writeResponseRecord(e,r,n,i){const s=v(n,i),o=t.from(l({targetURI:e,now:this._now,rid:r,wid:this._warcInfoId,len:s.length}),"utf8"),a=o.length+s.length+b;return this.writeRecordBlock(t.concat([o,y,s,w],a))}_onFinish(){let e=this._lastError;this._lastError=null,this._warcOutStream.removeAllListeners(),this._warcOutStream.destroy(),this._warcOutStream=null,this._now=null,this._fileName=null,this._warcInfoId=null,e?this.emit("finished",e):this.emit("finished")}_onError(e){this._lastError=e,this.emit("error",e)}}}).call(this,r(0).Buffer,r(2))},function(e,t,r){"use strict";e.exports={noGZ:/Content-Encoding.*(?:gzip|br|deflate)\r\n/gi,replaceContentLen:/Content-Length:.*\r\n/gi}},function(e,t,r){"use strict";r.r(t),r.d(t,"getStream",function(){return o}),r.d(t,"fs",function(){return n}),r.d(t,"untildify",function(){return i});let n=null,i=null,s=null;try{i=r(!function(){var e=new Error("Cannot find module 'untildify'");throw e.code="MODULE_NOT_FOUND",e}()),n=r(!function(){var e=new Error("Cannot find module 'fs-extra'");throw e.code="MODULE_NOT_FOUND",e}()),s=!0}catch(e){s=!1}function o(e,t){return s?(t&&(e=i(e)),n.createReadStream(e)):e}},function(e,t,r){(t=e.exports=r(39)).Stream=t,t.Readable=t,t.Writable=r(27),t.Duplex=r(7),t.Transform=r(43),t.PassThrough=r(77)},function(e,t,r){(function(e){function r(e){return Object.prototype.toString.call(e)}t.isArray=function(e){return Array.isArray?Array.isArray(e):"[object Array]"===r(e)},t.isBoolean=function(e){return"boolean"==typeof e},t.isNull=function(e){return null===e},t.isNullOrUndefined=function(e){return null==e},t.isNumber=function(e){return"number"==typeof e},t.isString=function(e){return"string"==typeof e},t.isSymbol=function(e){return"symbol"==typeof e},t.isUndefined=function(e){return void 0===e},t.isRegExp=function(e){return"[object RegExp]"===r(e)},t.isObject=function(e){return"object"==typeof e&&null!==e},t.isDate=function(e){return"[object Date]"===r(e)},t.isError=function(e){return"[object Error]"===r(e)||e instanceof Error},t.isFunction=function(e){return"function"==typeof e},t.isPrimitive=function(e){return null===e||"boolean"==typeof e||"number"==typeof e||"string"==typeof e||"symbol"==typeof e||void 0===e},t.isBuffer=e.isBuffer}).call(this,r(0).Buffer)},function(e,t,r){"use strict";(function(t){const{Transform:n}=r(25),i=r(88),{crlf:s}=r(32);e.exports=class extends n{constructor(){super({readableObjectMode:!0}),this.buffered=void 0,this.builder=new i,this.sepLen=s.length}_consumeChunk(e,t,r){let n,i,o=0,a=0,u=e.length;for(;;){if(!(-1!==(n=o>=u?-1:e.indexOf(s,o))&&n<e.length)){this.buffered=e.slice(a),r&&((i=this.builder.consumeLine(this.buffered))&&this.push(i),(i=this.builder.buildRecord())&&this.push(i));break}null!=(i=this.builder.consumeLine(e.slice(a,n+this.sepLen)))&&this.push(i),a=o=n+this.sepLen}t()}_transform(e,r,n){let i;this.buffered?(i=t.concat([this.buffered,e],this.buffered.length+e.length),this.buffered=void 0):i=e,this._consumeChunk(i,n)}_flush(e){this.buffered&&this._consumeChunk(this.buffered,e,!0),e()}}}).call(this,r(0).Buffer)},function(e,t){let r=!0;try{new Function("async function* test(){yield await Promise.resolve(1)}")}catch(e){r=!1}e.exports=r&&void 0!==Symbol.asyncIterator},function(e,t,r){"use strict";const n=r(13);e.exports=async function*(e){const t=e.pipe(new n)[Symbol.asyncIterator]();let r;for(;!(r=await t.next()).done;)yield r.value}},function(e,t,r){var n=r(107),i=r(112);e.exports=function(e,t){var r=i(e,t);return n(r)?r:void 0}},function(e,t,r){var n=r(33),i=r(108),s=r(109),o="[object Null]",a="[object Undefined]",u=n?n.toStringTag:void 0;e.exports=function(e){return null==e?void 0===e?a:o:u&&u in Object(e)?i(e):s(e)}},function(e,t,r){"use strict";var n=r(129),i=r(130);function s(){this.protocol=null,this.slashes=null,this.auth=null,this.host=null,this.port=null,this.hostname=null,this.hash=null,this.search=null,this.query=null,this.pathname=null,this.path=null,this.href=null}t.parse=y,t.resolve=function(e,t){return y(e,!1,!0).resolve(t)},t.resolveObject=function(e,t){return e?y(e,!1,!0).resolveObject(t):t},t.format=function(e){i.isString(e)&&(e=y(e));return e instanceof s?e.format():s.prototype.format.call(e)},t.Url=s;var o=/^([a-z0-9.+-]+:)/i,a=/:[0-9]*$/,u=/^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,h=["{","}","|","\\","^","`"].concat(["<",">",'"',"`"," ","\r","\n","\t"]),c=["'"].concat(h),f=["%","/","?",";","#"].concat(c),l=["/","?","#"],d=/^[+a-z0-9A-Z_-]{0,63}$/,p=/^([+a-z0-9A-Z_-]{0,63})(.*)$/,_={javascript:!0,"javascript:":!0},g={javascript:!0,"javascript:":!0},m={http:!0,https:!0,ftp:!0,gopher:!0,file:!0,"http:":!0,"https:":!0,"ftp:":!0,"gopher:":!0,"file:":!0},w=r(131);function y(e,t,r){if(e&&i.isObject(e)&&e instanceof s)return e;var n=new s;return n.parse(e,t,r),n}s.prototype.parse=function(e,t,r){if(!i.isString(e))throw new TypeError("Parameter 'url' must be a string, not "+typeof e);var s=e.indexOf("?"),a=-1!==s&&s<e.indexOf("#")?"?":"#",h=e.split(a);h[0]=h[0].replace(/\\/g,"/");var y=e=h.join(a);if(y=y.trim(),!r&&1===e.split("#").length){var b=u.exec(y);if(b)return this.path=y,this.href=y,this.pathname=b[1],b[2]?(this.search=b[2],this.query=t?w.parse(this.search.substr(1)):this.search.substr(1)):t&&(this.search="",this.query={}),this}var v=o.exec(y);if(v){var R=(v=v[0]).toLowerCase();this.protocol=R,y=y.substr(v.length)}if(r||v||y.match(/^\/\/[^@\/]+@[^@\/]+/)){var x="//"===y.substr(0,2);!x||v&&g[v]||(y=y.substr(2),this.slashes=!0)}if(!g[v]&&(x||v&&!m[v])){for(var E,k,S=-1,A=0;A<l.length;A++){-1!==(T=y.indexOf(l[A]))&&(-1===S||T<S)&&(S=T)}-1!==(k=-1===S?y.lastIndexOf("@"):y.lastIndexOf("@",S))&&(E=y.slice(0,k),y=y.slice(k+1),this.auth=decodeURIComponent(E)),S=-1;for(A=0;A<f.length;A++){var T;-1!==(T=y.indexOf(f[A]))&&(-1===S||T<S)&&(S=T)}-1===S&&(S=y.length),this.host=y.slice(0,S),y=y.slice(S),this.parseHost(),this.hostname=this.hostname||"";var C="["===this.hostname[0]&&"]"===this.hostname[this.hostname.length-1];if(!C)for(var O=this.hostname.split(/\./),I=(A=0,O.length);A<I;A++){var L=O[A];if(L&&!L.match(d)){for(var q="",P=0,B=L.length;P<B;P++)L.charCodeAt(P)>127?q+="x":q+=L[P];if(!q.match(d)){var j=O.slice(0,A),N=O.slice(A+1),D=L.match(p);D&&(j.push(D[1]),N.unshift(D[2])),N.length&&(y="/"+N.join(".")+y),this.hostname=j.join(".");break}}}this.hostname.length>255?this.hostname="":this.hostname=this.hostname.toLowerCase(),C||(this.hostname=n.toASCII(this.hostname));var U=this.port?":"+this.port:"",z=this.hostname||"";this.host=z+U,this.href+=this.host,C&&(this.hostname=this.hostname.substr(1,this.hostname.length-2),"/"!==y[0]&&(y="/"+y))}if(!_[R])for(A=0,I=c.length;A<I;A++){var M=c[A];if(-1!==y.indexOf(M)){var W=encodeURIComponent(M);W===M&&(W=escape(M)),y=y.split(M).join(W)}}var F=y.indexOf("#");-1!==F&&(this.hash=y.substr(F),y=y.slice(0,F));var H=y.indexOf("?");if(-1!==H?(this.search=y.substr(H),this.query=y.substr(H+1),t&&(this.query=w.parse(this.query)),y=y.slice(0,H)):t&&(this.search="",this.query={}),y&&(this.pathname=y),m[R]&&this.hostname&&!this.pathname&&(this.pathname="/"),this.pathname||this.search){U=this.pathname||"";var Z=this.search||"";this.path=U+Z}return this.href=this.format(),this},s.prototype.format=function(){var e=this.auth||"";e&&(e=(e=encodeURIComponent(e)).replace(/%3A/i,":"),e+="@");var t=this.protocol||"",r=this.pathname||"",n=this.hash||"",s=!1,o="";this.host?s=e+this.host:this.hostname&&(s=e+(-1===this.hostname.indexOf(":")?this.hostname:"["+this.hostname+"]"),this.port&&(s+=":"+this.port)),this.query&&i.isObject(this.query)&&Object.keys(this.query).length&&(o=w.stringify(this.query));var a=this.search||o&&"?"+o||"";return t&&":"!==t.substr(-1)&&(t+=":"),this.slashes||(!t||m[t])&&!1!==s?(s="//"+(s||""),r&&"/"!==r.charAt(0)&&(r="/"+r)):s||(s=""),n&&"#"!==n.charAt(0)&&(n="#"+n),a&&"?"!==a.charAt(0)&&(a="?"+a),t+s+(r=r.replace(/[?#]/g,function(e){return encodeURIComponent(e)}))+(a=a.replace("#","%23"))+n},s.prototype.resolve=function(e){return this.resolveObject(y(e,!1,!0)).format()},s.prototype.resolveObject=function(e){if(i.isString(e)){var t=new s;t.parse(e,!1,!0),e=t}for(var r=new s,n=Object.keys(this),o=0;o<n.length;o++){var a=n[o];r[a]=this[a]}if(r.hash=e.hash,""===e.href)return r.href=r.format(),r;if(e.slashes&&!e.protocol){for(var u=Object.keys(e),h=0;h<u.length;h++){var c=u[h];"protocol"!==c&&(r[c]=e[c])}return m[r.protocol]&&r.hostname&&!r.pathname&&(r.path=r.pathname="/"),r.href=r.format(),r}if(e.protocol&&e.protocol!==r.protocol){if(!m[e.protocol]){for(var f=Object.keys(e),l=0;l<f.length;l++){var d=f[l];r[d]=e[d]}return r.href=r.format(),r}if(r.protocol=e.protocol,e.host||g[e.protocol])r.pathname=e.pathname;else{for(var p=(e.pathname||"").split("/");p.length&&!(e.host=p.shift()););e.host||(e.host=""),e.hostname||(e.hostname=""),""!==p[0]&&p.unshift(""),p.length<2&&p.unshift(""),r.pathname=p.join("/")}if(r.search=e.search,r.query=e.query,r.host=e.host||"",r.auth=e.auth,r.hostname=e.hostname||e.host,r.port=e.port,r.pathname||r.search){var _=r.pathname||"",w=r.search||"";r.path=_+w}return r.slashes=r.slashes||e.slashes,r.href=r.format(),r}var y=r.pathname&&"/"===r.pathname.charAt(0),b=e.host||e.pathname&&"/"===e.pathname.charAt(0),v=b||y||r.host&&e.pathname,R=v,x=r.pathname&&r.pathname.split("/")||[],E=(p=e.pathname&&e.pathname.split("/")||[],r.protocol&&!m[r.protocol]);if(E&&(r.hostname="",r.port=null,r.host&&(""===x[0]?x[0]=r.host:x.unshift(r.host)),r.host="",e.protocol&&(e.hostname=null,e.port=null,e.host&&(""===p[0]?p[0]=e.host:p.unshift(e.host)),e.host=null),v=v&&(""===p[0]||""===x[0])),b)r.host=e.host||""===e.host?e.host:r.host,r.hostname=e.hostname||""===e.hostname?e.hostname:r.hostname,r.search=e.search,r.query=e.query,x=p;else if(p.length)x||(x=[]),x.pop(),x=x.concat(p),r.search=e.search,r.query=e.query;else if(!i.isNullOrUndefined(e.search)){if(E)r.hostname=r.host=x.shift(),(C=!!(r.host&&r.host.indexOf("@")>0)&&r.host.split("@"))&&(r.auth=C.shift(),r.host=r.hostname=C.shift());return r.search=e.search,r.query=e.query,i.isNull(r.pathname)&&i.isNull(r.search)||(r.path=(r.pathname?r.pathname:"")+(r.search?r.search:"")),r.href=r.format(),r}if(!x.length)return r.pathname=null,r.search?r.path="/"+r.search:r.path=null,r.href=r.format(),r;for(var k=x.slice(-1)[0],S=(r.host||e.host||x.length>1)&&("."===k||".."===k)||""===k,A=0,T=x.length;T>=0;T--)"."===(k=x[T])?x.splice(T,1):".."===k?(x.splice(T,1),A++):A&&(x.splice(T,1),A--);if(!v&&!R)for(;A--;A)x.unshift("..");!v||""===x[0]||x[0]&&"/"===x[0].charAt(0)||x.unshift(""),S&&"/"!==x.join("/").substr(-1)&&x.push("");var C,O=""===x[0]||x[0]&&"/"===x[0].charAt(0);E&&(r.hostname=r.host=O?"":x.length?x.shift():"",(C=!!(r.host&&r.host.indexOf("@")>0)&&r.host.split("@"))&&(r.auth=C.shift(),r.host=r.hostname=C.shift()));return(v=v||r.host&&x.length)&&!O&&x.unshift(""),x.length?r.pathname=x.join("/"):(r.pathname=null,r.path=null),i.isNull(r.pathname)&&i.isNull(r.search)||(r.path=(r.pathname?r.pathname:"")+(r.search?r.search:"")),r.auth=e.auth||r.auth,r.slashes=r.slashes||e.slashes,r.href=r.format(),r},s.prototype.parseHost=function(){var e=this.host,t=a.exec(e);t&&(":"!==(t=t[0])&&(this.port=t.substr(1)),e=e.substr(0,e.length-t.length)),e&&(this.hostname=e)}},function(e,t,r){"use strict";(function(e){var n=r(0).Buffer,i=r(25).Transform,s=r(82),o=r(45),a=r(44).ok,u=r(0).kMaxLength,h="Cannot create final Buffer. It would be larger than 0x"+u.toString(16)+" bytes";s.Z_MIN_WINDOWBITS=8,s.Z_MAX_WINDOWBITS=15,s.Z_DEFAULT_WINDOWBITS=15,s.Z_MIN_CHUNK=64,s.Z_MAX_CHUNK=1/0,s.Z_DEFAULT_CHUNK=16384,s.Z_MIN_MEMLEVEL=1,s.Z_MAX_MEMLEVEL=9,s.Z_DEFAULT_MEMLEVEL=8,s.Z_MIN_LEVEL=-1,s.Z_MAX_LEVEL=9,s.Z_DEFAULT_LEVEL=s.Z_DEFAULT_COMPRESSION;for(var c=Object.keys(s),f=0;f<c.length;f++){var l=c[f];l.match(/^Z/)&&Object.defineProperty(t,l,{enumerable:!0,value:s[l],writable:!1})}for(var d={Z_OK:s.Z_OK,Z_STREAM_END:s.Z_STREAM_END,Z_NEED_DICT:s.Z_NEED_DICT,Z_ERRNO:s.Z_ERRNO,Z_STREAM_ERROR:s.Z_STREAM_ERROR,Z_DATA_ERROR:s.Z_DATA_ERROR,Z_MEM_ERROR:s.Z_MEM_ERROR,Z_BUF_ERROR:s.Z_BUF_ERROR,Z_VERSION_ERROR:s.Z_VERSION_ERROR},p=Object.keys(d),_=0;_<p.length;_++){var g=p[_];d[d[g]]=g}function m(e,t,r){var i=[],s=0;function o(){for(var t;null!==(t=e.read());)i.push(t),s+=t.length;e.once("readable",o)}function a(){var t,o=null;s>=u?o=new RangeError(h):t=n.concat(i,s),i=[],e.close(),r(o,t)}e.on("error",function(t){e.removeListener("end",a),e.removeListener("readable",o),r(t)}),e.on("end",a),e.end(t),o()}function w(e,t){if("string"==typeof t&&(t=n.from(t)),!n.isBuffer(t))throw new TypeError("Not a string or buffer");var r=e._finishFlushFlag;return e._processChunk(t,r)}function y(e){if(!(this instanceof y))return new y(e);A.call(this,e,s.DEFLATE)}function b(e){if(!(this instanceof b))return new b(e);A.call(this,e,s.INFLATE)}function v(e){if(!(this instanceof v))return new v(e);A.call(this,e,s.GZIP)}function R(e){if(!(this instanceof R))return new R(e);A.call(this,e,s.GUNZIP)}function x(e){if(!(this instanceof x))return new x(e);A.call(this,e,s.DEFLATERAW)}function E(e){if(!(this instanceof E))return new E(e);A.call(this,e,s.INFLATERAW)}function k(e){if(!(this instanceof k))return new k(e);A.call(this,e,s.UNZIP)}function S(e){return e===s.Z_NO_FLUSH||e===s.Z_PARTIAL_FLUSH||e===s.Z_SYNC_FLUSH||e===s.Z_FULL_FLUSH||e===s.Z_FINISH||e===s.Z_BLOCK}function A(e,r){var o=this;if(this._opts=e=e||{},this._chunkSize=e.chunkSize||t.Z_DEFAULT_CHUNK,i.call(this,e),e.flush&&!S(e.flush))throw new Error("Invalid flush flag: "+e.flush);if(e.finishFlush&&!S(e.finishFlush))throw new Error("Invalid flush flag: "+e.finishFlush);if(this._flushFlag=e.flush||s.Z_NO_FLUSH,this._finishFlushFlag=void 0!==e.finishFlush?e.finishFlush:s.Z_FINISH,e.chunkSize&&(e.chunkSize<t.Z_MIN_CHUNK||e.chunkSize>t.Z_MAX_CHUNK))throw new Error("Invalid chunk size: "+e.chunkSize);if(e.windowBits&&(e.windowBits<t.Z_MIN_WINDOWBITS||e.windowBits>t.Z_MAX_WINDOWBITS))throw new Error("Invalid windowBits: "+e.windowBits);if(e.level&&(e.level<t.Z_MIN_LEVEL||e.level>t.Z_MAX_LEVEL))throw new Error("Invalid compression level: "+e.level);if(e.memLevel&&(e.memLevel<t.Z_MIN_MEMLEVEL||e.memLevel>t.Z_MAX_MEMLEVEL))throw new Error("Invalid memLevel: "+e.memLevel);if(e.strategy&&e.strategy!=t.Z_FILTERED&&e.strategy!=t.Z_HUFFMAN_ONLY&&e.strategy!=t.Z_RLE&&e.strategy!=t.Z_FIXED&&e.strategy!=t.Z_DEFAULT_STRATEGY)throw new Error("Invalid strategy: "+e.strategy);if(e.dictionary&&!n.isBuffer(e.dictionary))throw new Error("Invalid dictionary: it should be a Buffer instance");this._handle=new s.Zlib(r);var a=this;this._hadError=!1,this._handle.onerror=function(e,r){T(a),a._hadError=!0;var n=new Error(e);n.errno=r,n.code=t.codes[r],a.emit("error",n)};var u=t.Z_DEFAULT_COMPRESSION;"number"==typeof e.level&&(u=e.level);var h=t.Z_DEFAULT_STRATEGY;"number"==typeof e.strategy&&(h=e.strategy),this._handle.init(e.windowBits||t.Z_DEFAULT_WINDOWBITS,u,e.memLevel||t.Z_DEFAULT_MEMLEVEL,h,e.dictionary),this._buffer=n.allocUnsafe(this._chunkSize),this._offset=0,this._level=u,this._strategy=h,this.once("end",this.close),Object.defineProperty(this,"_closed",{get:function(){return!o._handle},configurable:!0,enumerable:!0})}function T(t,r){r&&e.nextTick(r),t._handle&&(t._handle.close(),t._handle=null)}function C(e){e.emit("close")}Object.defineProperty(t,"codes",{enumerable:!0,value:Object.freeze(d),writable:!1}),t.Deflate=y,t.Inflate=b,t.Gzip=v,t.Gunzip=R,t.DeflateRaw=x,t.InflateRaw=E,t.Unzip=k,t.createDeflate=function(e){return new y(e)},t.createInflate=function(e){return new b(e)},t.createDeflateRaw=function(e){return new x(e)},t.createInflateRaw=function(e){return new E(e)},t.createGzip=function(e){return new v(e)},t.createGunzip=function(e){return new R(e)},t.createUnzip=function(e){return new k(e)},t.deflate=function(e,t,r){return"function"==typeof t&&(r=t,t={}),m(new y(t),e,r)},t.deflateSync=function(e,t){return w(new y(t),e)},t.gzip=function(e,t,r){return"function"==typeof t&&(r=t,t={}),m(new v(t),e,r)},t.gzipSync=function(e,t){return w(new v(t),e)},t.deflateRaw=function(e,t,r){return"function"==typeof t&&(r=t,t={}),m(new x(t),e,r)},t.deflateRawSync=function(e,t){return w(new x(t),e)},t.unzip=function(e,t,r){return"function"==typeof t&&(r=t,t={}),m(new k(t),e,r)},t.unzipSync=function(e,t){return w(new k(t),e)},t.inflate=function(e,t,r){return"function"==typeof t&&(r=t,t={}),m(new b(t),e,r)},t.inflateSync=function(e,t){return w(new b(t),e)},t.gunzip=function(e,t,r){return"function"==typeof t&&(r=t,t={}),m(new R(t),e,r)},t.gunzipSync=function(e,t){return w(new R(t),e)},t.inflateRaw=function(e,t,r){return"function"==typeof t&&(r=t,t={}),m(new E(t),e,r)},t.inflateRawSync=function(e,t){return w(new E(t),e)},o.inherits(A,i),A.prototype.params=function(r,n,i){if(r<t.Z_MIN_LEVEL||r>t.Z_MAX_LEVEL)throw new RangeError("Invalid compression level: "+r);if(n!=t.Z_FILTERED&&n!=t.Z_HUFFMAN_ONLY&&n!=t.Z_RLE&&n!=t.Z_FIXED&&n!=t.Z_DEFAULT_STRATEGY)throw new TypeError("Invalid strategy: "+n);if(this._level!==r||this._strategy!==n){var o=this;this.flush(s.Z_SYNC_FLUSH,function(){a(o._handle,"zlib binding closed"),o._handle.params(r,n),o._hadError||(o._level=r,o._strategy=n,i&&i())})}else e.nextTick(i)},A.prototype.reset=function(){return a(this._handle,"zlib binding closed"),this._handle.reset()},A.prototype._flush=function(e){this._transform(n.alloc(0),"",e)},A.prototype.flush=function(t,r){var i=this,o=this._writableState;("function"==typeof t||void 0===t&&!r)&&(r=t,t=s.Z_FULL_FLUSH),o.ended?r&&e.nextTick(r):o.ending?r&&this.once("end",r):o.needDrain?r&&this.once("drain",function(){return i.flush(t,r)}):(this._flushFlag=t,this.write(n.alloc(0),"",r))},A.prototype.close=function(t){T(this,t),e.nextTick(C,this)},A.prototype._transform=function(e,t,r){var i,o=this._writableState,a=(o.ending||o.ended)&&(!e||o.length===e.length);return null===e||n.isBuffer(e)?this._handle?(a?i=this._finishFlushFlag:(i=this._flushFlag,e.length>=o.length&&(this._flushFlag=this._opts.flush||s.Z_NO_FLUSH)),void this._processChunk(e,i,r)):r(new Error("zlib binding closed")):r(new Error("invalid input"))},A.prototype._processChunk=function(e,t,r){var i=e&&e.length,s=this._chunkSize-this._offset,o=0,c=this,f="function"==typeof r;if(!f){var l,d=[],p=0;this.on("error",function(e){l=e}),a(this._handle,"zlib binding closed");do{var _=this._handle.writeSync(t,e,o,i,this._buffer,this._offset,s)}while(!this._hadError&&w(_[0],_[1]));if(this._hadError)throw l;if(p>=u)throw T(this),new RangeError(h);var g=n.concat(d,p);return T(this),g}a(this._handle,"zlib binding closed");var m=this._handle.write(t,e,o,i,this._buffer,this._offset,s);function w(u,h){if(this&&(this.buffer=null,this.callback=null),!c._hadError){var l=s-h;if(a(l>=0,"have should not go down"),l>0){var _=c._buffer.slice(c._offset,c._offset+l);c._offset+=l,f?c.push(_):(d.push(_),p+=_.length)}if((0===h||c._offset>=c._chunkSize)&&(s=c._chunkSize,c._offset=0,c._buffer=n.allocUnsafe(c._chunkSize)),0===h){if(o+=i-u,i=u,!f)return!0;var g=c._handle.write(t,e,o,i,c._buffer,c._offset,c._chunkSize);return g.callback=w,void(g.buffer=e)}if(!f)return!1;r()}}m.buffer=e,m.callback=w},o.inherits(y,A),o.inherits(b,A),o.inherits(v,A),o.inherits(R,A),o.inherits(x,A),o.inherits(E,A),o.inherits(k,A)}).call(this,r(2))},function(e,t,r){"use strict";(function(t){!t.version||0===t.version.indexOf("v0.")||0===t.version.indexOf("v1.")&&0!==t.version.indexOf("v1.8.")?e.exports={nextTick:function(e,r,n,i){if("function"!=typeof e)throw new TypeError('"callback" argument must be a function');var s,o,a=arguments.length;switch(a){case 0:case 1:return t.nextTick(e);case 2:return t.nextTick(function(){e.call(null,r)});case 3:return t.nextTick(function(){e.call(null,r,n)});case 4:return t.nextTick(function(){e.call(null,r,n,i)});default:for(s=new Array(a-1),o=0;o<s.length;)s[o++]=arguments[o];return t.nextTick(function(){e.apply(null,s)})}}}:e.exports=t}).call(this,r(2))},function(e,t,r){var n=r(0),i=n.Buffer;function s(e,t){for(var r in e)t[r]=e[r]}function o(e,t,r){return i(e,t,r)}i.from&&i.alloc&&i.allocUnsafe&&i.allocUnsafeSlow?e.exports=n:(s(n,t),t.Buffer=o),s(i,o),o.from=function(e,t,r){if("number"==typeof e)throw new TypeError("Argument must not be a number");return i(e,t,r)},o.alloc=function(e,t,r){if("number"!=typeof e)throw new TypeError("Argument must be a number");var n=i(e);return void 0!==t?"string"==typeof r?n.fill(t,r):n.fill(t):n.fill(0),n},o.allocUnsafe=function(e){if("number"!=typeof e)throw new TypeError("Argument must be a number");return i(e)},o.allocUnsafeSlow=function(e){if("number"!=typeof e)throw new TypeError("Argument must be a number");return n.SlowBuffer(e)}},function(e,t,r){"use strict";var n=Object.prototype.hasOwnProperty,i="~";function s(){}function o(e,t,r){this.fn=e,this.context=t,this.once=r||!1}function a(e,t,r,n,s){if("function"!=typeof r)throw new TypeError("The listener must be a function");var a=new o(r,n||e,s),u=i?i+t:t;return e._events[u]?e._events[u].fn?e._events[u]=[e._events[u],a]:e._events[u].push(a):(e._events[u]=a,e._eventsCount++),e}function u(e,t){0==--e._eventsCount?e._events=new s:delete e._events[t]}function h(){this._events=new s,this._eventsCount=0}Object.create&&(s.prototype=Object.create(null),(new s).__proto__||(i=!1)),h.prototype.eventNames=function(){var e,t,r=[];if(0===this._eventsCount)return r;for(t in e=this._events)n.call(e,t)&&r.push(i?t.slice(1):t);return Object.getOwnPropertySymbols?r.concat(Object.getOwnPropertySymbols(e)):r},h.prototype.listeners=function(e){var t=i?i+e:e,r=this._events[t];if(!r)return[];if(r.fn)return[r.fn];for(var n=0,s=r.length,o=new Array(s);n<s;n++)o[n]=r[n].fn;return o},h.prototype.listenerCount=function(e){var t=i?i+e:e,r=this._events[t];return r?r.fn?1:r.length:0},h.prototype.emit=function(e,t,r,n,s,o){var a=i?i+e:e;if(!this._events[a])return!1;var u,h,c=this._events[a],f=arguments.length;if(c.fn){switch(c.once&&this.removeListener(e,c.fn,void 0,!0),f){case 1:return c.fn.call(c.context),!0;case 2:return c.fn.call(c.context,t),!0;case 3:return c.fn.call(c.context,t,r),!0;case 4:return c.fn.call(c.context,t,r,n),!0;case 5:return c.fn.call(c.context,t,r,n,s),!0;case 6:return c.fn.call(c.context,t,r,n,s,o),!0}for(h=1,u=new Array(f-1);h<f;h++)u[h-1]=arguments[h];c.fn.apply(c.context,u)}else{var l,d=c.length;for(h=0;h<d;h++)switch(c[h].once&&this.removeListener(e,c[h].fn,void 0,!0),f){case 1:c[h].fn.call(c[h].context);break;case 2:c[h].fn.call(c[h].context,t);break;case 3:c[h].fn.call(c[h].context,t,r);break;case 4:c[h].fn.call(c[h].context,t,r,n);break;default:if(!u)for(l=1,u=new Array(f-1);l<f;l++)u[l-1]=arguments[l];c[h].fn.apply(c[h].context,u)}}return!0},h.prototype.on=function(e,t,r){return a(this,e,t,r,!1)},h.prototype.once=function(e,t,r){return a(this,e,t,r,!0)},h.prototype.removeListener=function(e,t,r,n){var s=i?i+e:e;if(!this._events[s])return this;if(!t)return u(this,s),this;var o=this._events[s];if(o.fn)o.fn!==t||n&&!o.once||r&&o.context!==r||u(this,s);else{for(var a=0,h=[],c=o.length;a<c;a++)(o[a].fn!==t||n&&!o[a].once||r&&o[a].context!==r)&&h.push(o[a]);h.length?this._events[s]=1===h.length?h[0]:h:u(this,s)}return this},h.prototype.removeAllListeners=function(e){var t;return e?(t=i?i+e:e,this._events[t]&&u(this,t)):(this._events=new s,this._eventsCount=0),this},h.prototype.off=h.prototype.removeListener,h.prototype.addListener=h.prototype.on,h.prefixed=i,h.EventEmitter=h,e.exports=h},function(e,t){e.exports=function(e){return null!=e&&"object"==typeof e}},function(e,t,r){const n=r(64);e.exports=class{constructor(){this._capture=!0,this._requests=new Map}startCapturing(){this._requests.clear(),this._capture=!0}stopCapturing(){this._capture=!1}addRequestInfo(e){this._capture&&(this._requests.has(e.requestId)?this._requests.get(e.requestId).addRequestInfo(e):this._requests.set(e.requestId,new n(e)))}requestWillBeSent(e){this._capture&&(this._requests.has(e.requestId)?this._requests.get(e.requestId).addRequestInfo(e):this._requests.set(e.requestId,new n(e)))}responseReceived(e){this._capture&&(this._requests.has(e.requestId)?this._requests.get(e.requestId).addRequestInfo(e):this._requests.set(e.requestId,new n(e)))}[Symbol.iterator](){return this._requests[Symbol.iterator]()}clear(){this._requests.clear()}has(e){return this._requests.has(e)}get(e){return this._requests.get(e)}size(){return this._requests.size}entries(){return this._requests.entries()}keys(){return this._requests.keys()}values(){return this._requests.values()}forEach(e,t){this._requests.forEach(e,t)}*iterateRequests(){for(let e of this._requests.values())for(let t of e.values())yield t}}},function(e,t,r){e.exports=i;var n=r(26).EventEmitter;function i(){n.call(this)}r(4)(i,n),i.Readable=r(11),i.Writable=r(78),i.Duplex=r(79),i.Transform=r(80),i.PassThrough=r(81),i.Stream=i,i.prototype.pipe=function(e,t){var r=this;function i(t){e.writable&&!1===e.write(t)&&r.pause&&r.pause()}function s(){r.readable&&r.resume&&r.resume()}r.on("data",i),e.on("drain",s),e._isStdio||t&&!1===t.end||(r.on("end",a),r.on("close",u));var o=!1;function a(){o||(o=!0,e.end())}function u(){o||(o=!0,"function"==typeof e.destroy&&e.destroy())}function h(e){if(c(),0===n.listenerCount(this,"error"))throw e}function c(){r.removeListener("data",i),e.removeListener("drain",s),r.removeListener("end",a),r.removeListener("close",u),r.removeListener("error",h),e.removeListener("error",h),r.removeListener("end",c),r.removeListener("close",c),e.removeListener("close",c)}return r.on("error",h),e.on("error",h),r.on("end",c),r.on("close",c),e.on("close",c),e.emit("pipe",r),e}},function(e,t,r){"use strict";var n,i="object"==typeof Reflect?Reflect:null,s=i&&"function"==typeof i.apply?i.apply:function(e,t,r){return Function.prototype.apply.call(e,t,r)};n=i&&"function"==typeof i.ownKeys?i.ownKeys:Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:function(e){return Object.getOwnPropertyNames(e)};var o=Number.isNaN||function(e){return e!=e};function a(){a.init.call(this)}e.exports=a,a.EventEmitter=a,a.prototype._events=void 0,a.prototype._eventsCount=0,a.prototype._maxListeners=void 0;var u=10;function h(e){return void 0===e._maxListeners?a.defaultMaxListeners:e._maxListeners}function c(e,t,r,n){var i,s,o,a;if("function"!=typeof r)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof r);if(void 0===(s=e._events)?(s=e._events=Object.create(null),e._eventsCount=0):(void 0!==s.newListener&&(e.emit("newListener",t,r.listener?r.listener:r),s=e._events),o=s[t]),void 0===o)o=s[t]=r,++e._eventsCount;else if("function"==typeof o?o=s[t]=n?[r,o]:[o,r]:n?o.unshift(r):o.push(r),(i=h(e))>0&&o.length>i&&!o.warned){o.warned=!0;var u=new Error("Possible EventEmitter memory leak detected. "+o.length+" "+String(t)+" listeners added. Use emitter.setMaxListeners() to increase limit");u.name="MaxListenersExceededWarning",u.emitter=e,u.type=t,u.count=o.length,a=u,console&&console.warn&&console.warn(a)}return e}function f(e,t,r){var n={fired:!1,wrapFn:void 0,target:e,type:t,listener:r},i=function(){for(var e=[],t=0;t<arguments.length;t++)e.push(arguments[t]);this.fired||(this.target.removeListener(this.type,this.wrapFn),this.fired=!0,s(this.listener,this.target,e))}.bind(n);return i.listener=r,n.wrapFn=i,i}function l(e,t,r){var n=e._events;if(void 0===n)return[];var i=n[t];return void 0===i?[]:"function"==typeof i?r?[i.listener||i]:[i]:r?function(e){for(var t=new Array(e.length),r=0;r<t.length;++r)t[r]=e[r].listener||e[r];return t}(i):p(i,i.length)}function d(e){var t=this._events;if(void 0!==t){var r=t[e];if("function"==typeof r)return 1;if(void 0!==r)return r.length}return 0}function p(e,t){for(var r=new Array(t),n=0;n<t;++n)r[n]=e[n];return r}Object.defineProperty(a,"defaultMaxListeners",{enumerable:!0,get:function(){return u},set:function(e){if("number"!=typeof e||e<0||o(e))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+e+".");u=e}}),a.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},a.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||o(e))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+e+".");return this._maxListeners=e,this},a.prototype.getMaxListeners=function(){return h(this)},a.prototype.emit=function(e){for(var t=[],r=1;r<arguments.length;r++)t.push(arguments[r]);var n="error"===e,i=this._events;if(void 0!==i)n=n&&void 0===i.error;else if(!n)return!1;if(n){var o;if(t.length>0&&(o=t[0]),o instanceof Error)throw o;var a=new Error("Unhandled error."+(o?" ("+o.message+")":""));throw a.context=o,a}var u=i[e];if(void 0===u)return!1;if("function"==typeof u)s(u,this,t);else{var h=u.length,c=p(u,h);for(r=0;r<h;++r)s(c[r],this,t)}return!0},a.prototype.addListener=function(e,t){return c(this,e,t,!1)},a.prototype.on=a.prototype.addListener,a.prototype.prependListener=function(e,t){return c(this,e,t,!0)},a.prototype.once=function(e,t){if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof t);return this.on(e,f(this,e,t)),this},a.prototype.prependOnceListener=function(e,t){if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof t);return this.prependListener(e,f(this,e,t)),this},a.prototype.removeListener=function(e,t){var r,n,i,s,o;if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof t);if(void 0===(n=this._events))return this;if(void 0===(r=n[e]))return this;if(r===t||r.listener===t)0==--this._eventsCount?this._events=Object.create(null):(delete n[e],n.removeListener&&this.emit("removeListener",e,r.listener||t));else if("function"!=typeof r){for(i=-1,s=r.length-1;s>=0;s--)if(r[s]===t||r[s].listener===t){o=r[s].listener,i=s;break}if(i<0)return this;0===i?r.shift():function(e,t){for(;t+1<e.length;t++)e[t]=e[t+1];e.pop()}(r,i),1===r.length&&(n[e]=r[0]),void 0!==n.removeListener&&this.emit("removeListener",e,o||t)}return this},a.prototype.off=a.prototype.removeListener,a.prototype.removeAllListeners=function(e){var t,r,n;if(void 0===(r=this._events))return this;if(void 0===r.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==r[e]&&(0==--this._eventsCount?this._events=Object.create(null):delete r[e]),this;if(0===arguments.length){var i,s=Object.keys(r);for(n=0;n<s.length;++n)"removeListener"!==(i=s[n])&&this.removeAllListeners(i);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(t=r[e]))this.removeListener(e,t);else if(void 0!==t)for(n=t.length-1;n>=0;n--)this.removeListener(e,t[n]);return this},a.prototype.listeners=function(e){return l(this,e,!0)},a.prototype.rawListeners=function(e){return l(this,e,!1)},a.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):d.call(e,t)},a.prototype.listenerCount=d,a.prototype.eventNames=function(){return this._eventsCount>0?n(this._events):[]}},function(e,t,r){"use strict";(function(t,n,i){var s=r(20);function o(e){var t=this;this.next=null,this.entry=null,this.finish=function(){!function(e,t,r){var n=e.entry;e.entry=null;for(;n;){var i=n.callback;t.pendingcb--,i(r),n=n.next}t.corkedRequestsFree?t.corkedRequestsFree.next=e:t.corkedRequestsFree=e}(t,e)}}e.exports=w;var a,u=!t.browser&&["v0.10","v0.9."].indexOf(t.version.slice(0,5))>-1?n:s.nextTick;w.WritableState=m;var h=r(12);h.inherits=r(4);var c={deprecate:r(76)},f=r(40),l=r(21).Buffer,d=i.Uint8Array||function(){};var p,_=r(41);function g(){}function m(e,t){a=a||r(7),e=e||{};var n=t instanceof a;this.objectMode=!!e.objectMode,n&&(this.objectMode=this.objectMode||!!e.writableObjectMode);var i=e.highWaterMark,h=e.writableHighWaterMark,c=this.objectMode?16:16384;this.highWaterMark=i||0===i?i:n&&(h||0===h)?h:c,this.highWaterMark=Math.floor(this.highWaterMark),this.finalCalled=!1,this.needDrain=!1,this.ending=!1,this.ended=!1,this.finished=!1,this.destroyed=!1;var f=!1===e.decodeStrings;this.decodeStrings=!f,this.defaultEncoding=e.defaultEncoding||"utf8",this.length=0,this.writing=!1,this.corked=0,this.sync=!0,this.bufferProcessing=!1,this.onwrite=function(e){!function(e,t){var r=e._writableState,n=r.sync,i=r.writecb;if(function(e){e.writing=!1,e.writecb=null,e.length-=e.writelen,e.writelen=0}(r),t)!function(e,t,r,n,i){--t.pendingcb,r?(s.nextTick(i,n),s.nextTick(E,e,t),e._writableState.errorEmitted=!0,e.emit("error",n)):(i(n),e._writableState.errorEmitted=!0,e.emit("error",n),E(e,t))}(e,r,n,t,i);else{var o=R(r);o||r.corked||r.bufferProcessing||!r.bufferedRequest||v(e,r),n?u(b,e,r,o,i):b(e,r,o,i)}}(t,e)},this.writecb=null,this.writelen=0,this.bufferedRequest=null,this.lastBufferedRequest=null,this.pendingcb=0,this.prefinished=!1,this.errorEmitted=!1,this.bufferedRequestCount=0,this.corkedRequestsFree=new o(this)}function w(e){if(a=a||r(7),!(p.call(w,this)||this instanceof a))return new w(e);this._writableState=new m(e,this),this.writable=!0,e&&("function"==typeof e.write&&(this._write=e.write),"function"==typeof e.writev&&(this._writev=e.writev),"function"==typeof e.destroy&&(this._destroy=e.destroy),"function"==typeof e.final&&(this._final=e.final)),f.call(this)}function y(e,t,r,n,i,s,o){t.writelen=n,t.writecb=o,t.writing=!0,t.sync=!0,r?e._writev(i,t.onwrite):e._write(i,s,t.onwrite),t.sync=!1}function b(e,t,r,n){r||function(e,t){0===t.length&&t.needDrain&&(t.needDrain=!1,e.emit("drain"))}(e,t),t.pendingcb--,n(),E(e,t)}function v(e,t){t.bufferProcessing=!0;var r=t.bufferedRequest;if(e._writev&&r&&r.next){var n=t.bufferedRequestCount,i=new Array(n),s=t.corkedRequestsFree;s.entry=r;for(var a=0,u=!0;r;)i[a]=r,r.isBuf||(u=!1),r=r.next,a+=1;i.allBuffers=u,y(e,t,!0,t.length,i,"",s.finish),t.pendingcb++,t.lastBufferedRequest=null,s.next?(t.corkedRequestsFree=s.next,s.next=null):t.corkedRequestsFree=new o(t),t.bufferedRequestCount=0}else{for(;r;){var h=r.chunk,c=r.encoding,f=r.callback;if(y(e,t,!1,t.objectMode?1:h.length,h,c,f),r=r.next,t.bufferedRequestCount--,t.writing)break}null===r&&(t.lastBufferedRequest=null)}t.bufferedRequest=r,t.bufferProcessing=!1}function R(e){return e.ending&&0===e.length&&null===e.bufferedRequest&&!e.finished&&!e.writing}function x(e,t){e._final(function(r){t.pendingcb--,r&&e.emit("error",r),t.prefinished=!0,e.emit("prefinish"),E(e,t)})}function E(e,t){var r=R(t);return r&&(!function(e,t){t.prefinished||t.finalCalled||("function"==typeof e._final?(t.pendingcb++,t.finalCalled=!0,s.nextTick(x,e,t)):(t.prefinished=!0,e.emit("prefinish")))}(e,t),0===t.pendingcb&&(t.finished=!0,e.emit("finish"))),r}h.inherits(w,f),m.prototype.getBuffer=function(){for(var e=this.bufferedRequest,t=[];e;)t.push(e),e=e.next;return t},function(){try{Object.defineProperty(m.prototype,"buffer",{get:c.deprecate(function(){return this.getBuffer()},"_writableState.buffer is deprecated. Use _writableState.getBuffer instead.","DEP0003")})}catch(e){}}(),"function"==typeof Symbol&&Symbol.hasInstance&&"function"==typeof Function.prototype[Symbol.hasInstance]?(p=Function.prototype[Symbol.hasInstance],Object.defineProperty(w,Symbol.hasInstance,{value:function(e){return!!p.call(this,e)||this===w&&(e&&e._writableState instanceof m)}})):p=function(e){return e instanceof this},w.prototype.pipe=function(){this.emit("error",new Error("Cannot pipe, not readable"))},w.prototype.write=function(e,t,r){var n,i=this._writableState,o=!1,a=!i.objectMode&&(n=e,l.isBuffer(n)||n instanceof d);return a&&!l.isBuffer(e)&&(e=function(e){return l.from(e)}(e)),"function"==typeof t&&(r=t,t=null),a?t="buffer":t||(t=i.defaultEncoding),"function"!=typeof r&&(r=g),i.ended?function(e,t){var r=new Error("write after end");e.emit("error",r),s.nextTick(t,r)}(this,r):(a||function(e,t,r,n){var i=!0,o=!1;return null===r?o=new TypeError("May not write null values to stream"):"string"==typeof r||void 0===r||t.objectMode||(o=new TypeError("Invalid non-string/buffer chunk")),o&&(e.emit("error",o),s.nextTick(n,o),i=!1),i}(this,i,e,r))&&(i.pendingcb++,o=function(e,t,r,n,i,s){if(!r){var o=function(e,t,r){e.objectMode||!1===e.decodeStrings||"string"!=typeof t||(t=l.from(t,r));return t}(t,n,i);n!==o&&(r=!0,i="buffer",n=o)}var a=t.objectMode?1:n.length;t.length+=a;var u=t.length<t.highWaterMark;u||(t.needDrain=!0);if(t.writing||t.corked){var h=t.lastBufferedRequest;t.lastBufferedRequest={chunk:n,encoding:i,isBuf:r,callback:s,next:null},h?h.next=t.lastBufferedRequest:t.bufferedRequest=t.lastBufferedRequest,t.bufferedRequestCount+=1}else y(e,t,!1,a,n,i,s);return u}(this,i,a,e,t,r)),o},w.prototype.cork=function(){this._writableState.corked++},w.prototype.uncork=function(){var e=this._writableState;e.corked&&(e.corked--,e.writing||e.corked||e.finished||e.bufferProcessing||!e.bufferedRequest||v(this,e))},w.prototype.setDefaultEncoding=function(e){if("string"==typeof e&&(e=e.toLowerCase()),!(["hex","utf8","utf-8","ascii","binary","base64","ucs2","ucs-2","utf16le","utf-16le","raw"].indexOf((e+"").toLowerCase())>-1))throw new TypeError("Unknown encoding: "+e);return this._writableState.defaultEncoding=e,this},Object.defineProperty(w.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),w.prototype._write=function(e,t,r){r(new Error("_write() is not implemented"))},w.prototype._writev=null,w.prototype.end=function(e,t,r){var n=this._writableState;"function"==typeof e?(r=e,e=null,t=null):"function"==typeof t&&(r=t,t=null),null!=e&&this.write(e,t),n.corked&&(n.corked=1,this.uncork()),n.ending||n.finished||function(e,t,r){t.ending=!0,E(e,t),r&&(t.finished?s.nextTick(r):e.once("finish",r));t.ended=!0,e.writable=!1}(this,n,r)},Object.defineProperty(w.prototype,"destroyed",{get:function(){return void 0!==this._writableState&&this._writableState.destroyed},set:function(e){this._writableState&&(this._writableState.destroyed=e)}}),w.prototype.destroy=_.destroy,w.prototype._undestroy=_.undestroy,w.prototype._destroy=function(e,t){this.end(),t(e)}}).call(this,r(2),r(74).setImmediate,r(1))},function(e,t,r){"use strict";e.exports=function(){this.input=null,this.next_in=0,this.avail_in=0,this.total_in=0,this.output=null,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg="",this.state=null,this.data_type=2,this.adler=0}},function(e,t,r){"use strict";e.exports={2:"need dictionary",1:"stream end",0:"","-1":"file error","-2":"stream error","-3":"data error","-4":"insufficient memory","-5":"buffer error","-6":"incompatible version"}},function(e,t,r){"use strict";e.exports={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8}},function(e,t){const r=new Set(["HTTP/0.9","HTTP/1.0","HTTP/1.1","DATA","data"]);e.exports={canReplayProtocols:r,SPACE:" ",H2Method:":method",H2path:":path",HTTP1D1:"HTTP/1.1",DASH:"-"}},function(e,t,r){"use strict";(function(t){e.exports={begin:t.from("574152432f","hex"),info:t.from("574152432d547970653a2077617263696e666f","hex"),mdata:t.from("574152432d547970653a206d65746164617461","hex"),req:t.from("574152432d547970653a2072657175657374","hex"),res:t.from("574152432d547970653a20726573706f6e7365","hex"),revisit:t.from("574152432d547970653a2072657669736974","hex"),resource:t.from("574152432d547970653a207265736f75726365","hex"),crlf:t.from("0d0a","hex"),empty:t.from("0d","hex")}}).call(this,r(0).Buffer)},function(e,t,r){var n=r(6).Symbol;e.exports=n},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t,r){(function(e){var n=r(134),i=r(60),s=r(136),o=r(137),a=r(18),u=t;u.request=function(t,r){t="string"==typeof t?a.parse(t):s(t);var i=-1===e.location.protocol.search(/^https?:$/)?"http:":"",o=t.protocol||i,u=t.hostname||t.host,h=t.port,c=t.path||"/";u&&-1!==u.indexOf(":")&&(u="["+u+"]"),t.url=(u?o+"//"+u:"")+(h?":"+h:"")+c,t.method=(t.method||"GET").toUpperCase(),t.headers=t.headers||{};var f=new n(t);return r&&f.on("response",r),f},u.get=function(e,t){var r=u.request(e,t);return r.end(),r},u.ClientRequest=n,u.IncomingMessage=i.IncomingMessage,u.Agent=function(){},u.Agent.defaultMaxSockets=4,u.globalAgent=new u.Agent,u.STATUS_CODES=o,u.METHODS=["CHECKOUT","CONNECT","COPY","DELETE","GET","HEAD","LOCK","M-SEARCH","MERGE","MKACTIVITY","MKCOL","MOVE","NOTIFY","OPTIONS","PATCH","POST","PROPFIND","PROPPATCH","PURGE","PUT","REPORT","SEARCH","SUBSCRIBE","TRACE","UNLOCK","UNSUBSCRIBE"]}).call(this,r(1))},function(e,t,r){const n=r(138),{DASH:i}=r(31),{CRLF:s}=r(3),o=/\s/g;function a(e){return":"===e[0]?e:n(e).replace(o,i)}t.stringifyHeaders=function(e){let t,r=[];for(t in e)r.push(`${a(t)}: ${e[t]}${s}`);return r.join("")},t.stringifyRequestHeaders=function(e,t){let r,n=!1,i=[];for(r in e)"host"!==r&&"Host"!==r||(n=!0),i.push(`${a(r)}: ${e[r]}${s}`);return n||i.push(`Host: ${t}${s}`),i.join("")}},function(e,t,r){var n=r(144);e.exports=function(e){return null==e?"":n(e)}},function(e,t){var r={}.toString;e.exports=Array.isArray||function(e){return"[object Array]"==r.call(e)}},function(e,t,r){"use strict";(function(t,n){var i=r(20);e.exports=y;var s,o=r(38);y.ReadableState=w;r(26).EventEmitter;var a=function(e,t){return e.listeners(t).length},u=r(40),h=r(21).Buffer,c=t.Uint8Array||function(){};var f=r(12);f.inherits=r(4);var l=r(71),d=void 0;d=l&&l.debuglog?l.debuglog("stream"):function(){};var p,_=r(72),g=r(41);f.inherits(y,u);var m=["error","close","destroy","pause","resume"];function w(e,t){e=e||{};var n=t instanceof(s=s||r(7));this.objectMode=!!e.objectMode,n&&(this.objectMode=this.objectMode||!!e.readableObjectMode);var i=e.highWaterMark,o=e.readableHighWaterMark,a=this.objectMode?16:16384;this.highWaterMark=i||0===i?i:n&&(o||0===o)?o:a,this.highWaterMark=Math.floor(this.highWaterMark),this.buffer=new _,this.length=0,this.pipes=null,this.pipesCount=0,this.flowing=null,this.ended=!1,this.endEmitted=!1,this.reading=!1,this.sync=!0,this.needReadable=!1,this.emittedReadable=!1,this.readableListening=!1,this.resumeScheduled=!1,this.destroyed=!1,this.defaultEncoding=e.defaultEncoding||"utf8",this.awaitDrain=0,this.readingMore=!1,this.decoder=null,this.encoding=null,e.encoding&&(p||(p=r(42).StringDecoder),this.decoder=new p(e.encoding),this.encoding=e.encoding)}function y(e){if(s=s||r(7),!(this instanceof y))return new y(e);this._readableState=new w(e,this),this.readable=!0,e&&("function"==typeof e.read&&(this._read=e.read),"function"==typeof e.destroy&&(this._destroy=e.destroy)),u.call(this)}function b(e,t,r,n,i){var s,o=e._readableState;null===t?(o.reading=!1,function(e,t){if(t.ended)return;if(t.decoder){var r=t.decoder.end();r&&r.length&&(t.buffer.push(r),t.length+=t.objectMode?1:r.length)}t.ended=!0,E(e)}(e,o)):(i||(s=function(e,t){var r;n=t,h.isBuffer(n)||n instanceof c||"string"==typeof t||void 0===t||e.objectMode||(r=new TypeError("Invalid non-string/buffer chunk"));var n;return r}(o,t)),s?e.emit("error",s):o.objectMode||t&&t.length>0?("string"==typeof t||o.objectMode||Object.getPrototypeOf(t)===h.prototype||(t=function(e){return h.from(e)}(t)),n?o.endEmitted?e.emit("error",new Error("stream.unshift() after end event")):v(e,o,t,!0):o.ended?e.emit("error",new Error("stream.push() after EOF")):(o.reading=!1,o.decoder&&!r?(t=o.decoder.write(t),o.objectMode||0!==t.length?v(e,o,t,!1):S(e,o)):v(e,o,t,!1))):n||(o.reading=!1));return function(e){return!e.ended&&(e.needReadable||e.length<e.highWaterMark||0===e.length)}(o)}function v(e,t,r,n){t.flowing&&0===t.length&&!t.sync?(e.emit("data",r),e.read(0)):(t.length+=t.objectMode?1:r.length,n?t.buffer.unshift(r):t.buffer.push(r),t.needReadable&&E(e)),S(e,t)}Object.defineProperty(y.prototype,"destroyed",{get:function(){return void 0!==this._readableState&&this._readableState.destroyed},set:function(e){this._readableState&&(this._readableState.destroyed=e)}}),y.prototype.destroy=g.destroy,y.prototype._undestroy=g.undestroy,y.prototype._destroy=function(e,t){this.push(null),t(e)},y.prototype.push=function(e,t){var r,n=this._readableState;return n.objectMode?r=!0:"string"==typeof e&&((t=t||n.defaultEncoding)!==n.encoding&&(e=h.from(e,t),t=""),r=!0),b(this,e,t,!1,r)},y.prototype.unshift=function(e){return b(this,e,null,!0,!1)},y.prototype.isPaused=function(){return!1===this._readableState.flowing},y.prototype.setEncoding=function(e){return p||(p=r(42).StringDecoder),this._readableState.decoder=new p(e),this._readableState.encoding=e,this};var R=8388608;function x(e,t){return e<=0||0===t.length&&t.ended?0:t.objectMode?1:e!=e?t.flowing&&t.length?t.buffer.head.data.length:t.length:(e>t.highWaterMark&&(t.highWaterMark=function(e){return e>=R?e=R:(e--,e|=e>>>1,e|=e>>>2,e|=e>>>4,e|=e>>>8,e|=e>>>16,e++),e}(e)),e<=t.length?e:t.ended?t.length:(t.needReadable=!0,0))}function E(e){var t=e._readableState;t.needReadable=!1,t.emittedReadable||(d("emitReadable",t.flowing),t.emittedReadable=!0,t.sync?i.nextTick(k,e):k(e))}function k(e){d("emit readable"),e.emit("readable"),O(e)}function S(e,t){t.readingMore||(t.readingMore=!0,i.nextTick(A,e,t))}function A(e,t){for(var r=t.length;!t.reading&&!t.flowing&&!t.ended&&t.length<t.highWaterMark&&(d("maybeReadMore read 0"),e.read(0),r!==t.length);)r=t.length;t.readingMore=!1}function T(e){d("readable nexttick read 0"),e.read(0)}function C(e,t){t.reading||(d("resume read 0"),e.read(0)),t.resumeScheduled=!1,t.awaitDrain=0,e.emit("resume"),O(e),t.flowing&&!t.reading&&e.read(0)}function O(e){var t=e._readableState;for(d("flow",t.flowing);t.flowing&&null!==e.read(););}function I(e,t){return 0===t.length?null:(t.objectMode?r=t.buffer.shift():!e||e>=t.length?(r=t.decoder?t.buffer.join(""):1===t.buffer.length?t.buffer.head.data:t.buffer.concat(t.length),t.buffer.clear()):r=function(e,t,r){var n;e<t.head.data.length?(n=t.head.data.slice(0,e),t.head.data=t.head.data.slice(e)):n=e===t.head.data.length?t.shift():r?function(e,t){var r=t.head,n=1,i=r.data;e-=i.length;for(;r=r.next;){var s=r.data,o=e>s.length?s.length:e;if(o===s.length?i+=s:i+=s.slice(0,e),0===(e-=o)){o===s.length?(++n,r.next?t.head=r.next:t.head=t.tail=null):(t.head=r,r.data=s.slice(o));break}++n}return t.length-=n,i}(e,t):function(e,t){var r=h.allocUnsafe(e),n=t.head,i=1;n.data.copy(r),e-=n.data.length;for(;n=n.next;){var s=n.data,o=e>s.length?s.length:e;if(s.copy(r,r.length-e,0,o),0===(e-=o)){o===s.length?(++i,n.next?t.head=n.next:t.head=t.tail=null):(t.head=n,n.data=s.slice(o));break}++i}return t.length-=i,r}(e,t);return n}(e,t.buffer,t.decoder),r);var r}function L(e){var t=e._readableState;if(t.length>0)throw new Error('"endReadable()" called on non-empty stream');t.endEmitted||(t.ended=!0,i.nextTick(q,t,e))}function q(e,t){e.endEmitted||0!==e.length||(e.endEmitted=!0,t.readable=!1,t.emit("end"))}function P(e,t){for(var r=0,n=e.length;r<n;r++)if(e[r]===t)return r;return-1}y.prototype.read=function(e){d("read",e),e=parseInt(e,10);var t=this._readableState,r=e;if(0!==e&&(t.emittedReadable=!1),0===e&&t.needReadable&&(t.length>=t.highWaterMark||t.ended))return d("read: emitReadable",t.length,t.ended),0===t.length&&t.ended?L(this):E(this),null;if(0===(e=x(e,t))&&t.ended)return 0===t.length&&L(this),null;var n,i=t.needReadable;return d("need readable",i),(0===t.length||t.length-e<t.highWaterMark)&&d("length less than watermark",i=!0),t.ended||t.reading?d("reading or ended",i=!1):i&&(d("do read"),t.reading=!0,t.sync=!0,0===t.length&&(t.needReadable=!0),this._read(t.highWaterMark),t.sync=!1,t.reading||(e=x(r,t))),null===(n=e>0?I(e,t):null)?(t.needReadable=!0,e=0):t.length-=e,0===t.length&&(t.ended||(t.needReadable=!0),r!==e&&t.ended&&L(this)),null!==n&&this.emit("data",n),n},y.prototype._read=function(e){this.emit("error",new Error("_read() is not implemented"))},y.prototype.pipe=function(e,t){var r=this,s=this._readableState;switch(s.pipesCount){case 0:s.pipes=e;break;case 1:s.pipes=[s.pipes,e];break;default:s.pipes.push(e)}s.pipesCount+=1,d("pipe count=%d opts=%j",s.pipesCount,t);var u=(!t||!1!==t.end)&&e!==n.stdout&&e!==n.stderr?c:y;function h(t,n){d("onunpipe"),t===r&&n&&!1===n.hasUnpiped&&(n.hasUnpiped=!0,d("cleanup"),e.removeListener("close",m),e.removeListener("finish",w),e.removeListener("drain",f),e.removeListener("error",g),e.removeListener("unpipe",h),r.removeListener("end",c),r.removeListener("end",y),r.removeListener("data",_),l=!0,!s.awaitDrain||e._writableState&&!e._writableState.needDrain||f())}function c(){d("onend"),e.end()}s.endEmitted?i.nextTick(u):r.once("end",u),e.on("unpipe",h);var f=function(e){return function(){var t=e._readableState;d("pipeOnDrain",t.awaitDrain),t.awaitDrain&&t.awaitDrain--,0===t.awaitDrain&&a(e,"data")&&(t.flowing=!0,O(e))}}(r);e.on("drain",f);var l=!1;var p=!1;function _(t){d("ondata"),p=!1,!1!==e.write(t)||p||((1===s.pipesCount&&s.pipes===e||s.pipesCount>1&&-1!==P(s.pipes,e))&&!l&&(d("false write response, pause",r._readableState.awaitDrain),r._readableState.awaitDrain++,p=!0),r.pause())}function g(t){d("onerror",t),y(),e.removeListener("error",g),0===a(e,"error")&&e.emit("error",t)}function m(){e.removeListener("finish",w),y()}function w(){d("onfinish"),e.removeListener("close",m),y()}function y(){d("unpipe"),r.unpipe(e)}return r.on("data",_),function(e,t,r){if("function"==typeof e.prependListener)return e.prependListener(t,r);e._events&&e._events[t]?o(e._events[t])?e._events[t].unshift(r):e._events[t]=[r,e._events[t]]:e.on(t,r)}(e,"error",g),e.once("close",m),e.once("finish",w),e.emit("pipe",r),s.flowing||(d("pipe resume"),r.resume()),e},y.prototype.unpipe=function(e){var t=this._readableState,r={hasUnpiped:!1};if(0===t.pipesCount)return this;if(1===t.pipesCount)return e&&e!==t.pipes?this:(e||(e=t.pipes),t.pipes=null,t.pipesCount=0,t.flowing=!1,e&&e.emit("unpipe",this,r),this);if(!e){var n=t.pipes,i=t.pipesCount;t.pipes=null,t.pipesCount=0,t.flowing=!1;for(var s=0;s<i;s++)n[s].emit("unpipe",this,r);return this}var o=P(t.pipes,e);return-1===o?this:(t.pipes.splice(o,1),t.pipesCount-=1,1===t.pipesCount&&(t.pipes=t.pipes[0]),e.emit("unpipe",this,r),this)},y.prototype.on=function(e,t){var r=u.prototype.on.call(this,e,t);if("data"===e)!1!==this._readableState.flowing&&this.resume();else if("readable"===e){var n=this._readableState;n.endEmitted||n.readableListening||(n.readableListening=n.needReadable=!0,n.emittedReadable=!1,n.reading?n.length&&E(this):i.nextTick(T,this))}return r},y.prototype.addListener=y.prototype.on,y.prototype.resume=function(){var e=this._readableState;return e.flowing||(d("resume"),e.flowing=!0,function(e,t){t.resumeScheduled||(t.resumeScheduled=!0,i.nextTick(C,e,t))}(this,e)),this},y.prototype.pause=function(){return d("call pause flowing=%j",this._readableState.flowing),!1!==this._readableState.flowing&&(d("pause"),this._readableState.flowing=!1,this.emit("pause")),this},y.prototype.wrap=function(e){var t=this,r=this._readableState,n=!1;for(var i in e.on("end",function(){if(d("wrapped end"),r.decoder&&!r.ended){var e=r.decoder.end();e&&e.length&&t.push(e)}t.push(null)}),e.on("data",function(i){(d("wrapped data"),r.decoder&&(i=r.decoder.write(i)),r.objectMode&&null==i)||(r.objectMode||i&&i.length)&&(t.push(i)||(n=!0,e.pause()))}),e)void 0===this[i]&&"function"==typeof e[i]&&(this[i]=function(t){return function(){return e[t].apply(e,arguments)}}(i));for(var s=0;s<m.length;s++)e.on(m[s],this.emit.bind(this,m[s]));return this._read=function(t){d("wrapped _read",t),n&&(n=!1,e.resume())},this},Object.defineProperty(y.prototype,"readableHighWaterMark",{enumerable:!1,get:function(){return this._readableState.highWaterMark}}),y._fromList=I}).call(this,r(1),r(2))},function(e,t,r){e.exports=r(26).EventEmitter},function(e,t,r){"use strict";var n=r(20);function i(e,t){e.emit("error",t)}e.exports={destroy:function(e,t){var r=this,s=this._readableState&&this._readableState.destroyed,o=this._writableState&&this._writableState.destroyed;return s||o?(t?t(e):!e||this._writableState&&this._writableState.errorEmitted||n.nextTick(i,this,e),this):(this._readableState&&(this._readableState.destroyed=!0),this._writableState&&(this._writableState.destroyed=!0),this._destroy(e||null,function(e){!t&&e?(n.nextTick(i,r,e),r._writableState&&(r._writableState.errorEmitted=!0)):t&&t(e)}),this)},undestroy:function(){this._readableState&&(this._readableState.destroyed=!1,this._readableState.reading=!1,this._readableState.ended=!1,this._readableState.endEmitted=!1),this._writableState&&(this._writableState.destroyed=!1,this._writableState.ended=!1,this._writableState.ending=!1,this._writableState.finished=!1,this._writableState.errorEmitted=!1)}}},function(e,t,r){"use strict";var n=r(21).Buffer,i=n.isEncoding||function(e){switch((e=""+e)&&e.toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":case"raw":return!0;default:return!1}};function s(e){var t;switch(this.encoding=function(e){var t=function(e){if(!e)return"utf8";for(var t;;)switch(e){case"utf8":case"utf-8":return"utf8";case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return"utf16le";case"latin1":case"binary":return"latin1";case"base64":case"ascii":case"hex":return e;default:if(t)return;e=(""+e).toLowerCase(),t=!0}}(e);if("string"!=typeof t&&(n.isEncoding===i||!i(e)))throw new Error("Unknown encoding: "+e);return t||e}(e),this.encoding){case"utf16le":this.text=u,this.end=h,t=4;break;case"utf8":this.fillLast=a,t=4;break;case"base64":this.text=c,this.end=f,t=3;break;default:return this.write=l,void(this.end=d)}this.lastNeed=0,this.lastTotal=0,this.lastChar=n.allocUnsafe(t)}function o(e){return e<=127?0:e>>5==6?2:e>>4==14?3:e>>3==30?4:e>>6==2?-1:-2}function a(e){var t=this.lastTotal-this.lastNeed,r=function(e,t,r){if(128!=(192&t[0]))return e.lastNeed=0,"�";if(e.lastNeed>1&&t.length>1){if(128!=(192&t[1]))return e.lastNeed=1,"�";if(e.lastNeed>2&&t.length>2&&128!=(192&t[2]))return e.lastNeed=2,"�"}}(this,e);return void 0!==r?r:this.lastNeed<=e.length?(e.copy(this.lastChar,t,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal)):(e.copy(this.lastChar,t,0,e.length),void(this.lastNeed-=e.length))}function u(e,t){if((e.length-t)%2==0){var r=e.toString("utf16le",t);if(r){var n=r.charCodeAt(r.length-1);if(n>=55296&&n<=56319)return this.lastNeed=2,this.lastTotal=4,this.lastChar[0]=e[e.length-2],this.lastChar[1]=e[e.length-1],r.slice(0,-1)}return r}return this.lastNeed=1,this.lastTotal=2,this.lastChar[0]=e[e.length-1],e.toString("utf16le",t,e.length-1)}function h(e){var t=e&&e.length?this.write(e):"";if(this.lastNeed){var r=this.lastTotal-this.lastNeed;return t+this.lastChar.toString("utf16le",0,r)}return t}function c(e,t){var r=(e.length-t)%3;return 0===r?e.toString("base64",t):(this.lastNeed=3-r,this.lastTotal=3,1===r?this.lastChar[0]=e[e.length-1]:(this.lastChar[0]=e[e.length-2],this.lastChar[1]=e[e.length-1]),e.toString("base64",t,e.length-r))}function f(e){var t=e&&e.length?this.write(e):"";return this.lastNeed?t+this.lastChar.toString("base64",0,3-this.lastNeed):t}function l(e){return e.toString(this.encoding)}function d(e){return e&&e.length?this.write(e):""}t.StringDecoder=s,s.prototype.write=function(e){if(0===e.length)return"";var t,r;if(this.lastNeed){if(void 0===(t=this.fillLast(e)))return"";r=this.lastNeed,this.lastNeed=0}else r=0;return r<e.length?t?t+this.text(e,r):this.text(e,r):t||""},s.prototype.end=function(e){var t=e&&e.length?this.write(e):"";return this.lastNeed?t+"�":t},s.prototype.text=function(e,t){var r=function(e,t,r){var n=t.length-1;if(n<r)return 0;var i=o(t[n]);if(i>=0)return i>0&&(e.lastNeed=i-1),i;if(--n<r||-2===i)return 0;if((i=o(t[n]))>=0)return i>0&&(e.lastNeed=i-2),i;if(--n<r||-2===i)return 0;if((i=o(t[n]))>=0)return i>0&&(2===i?i=0:e.lastNeed=i-3),i;return 0}(this,e,t);if(!this.lastNeed)return e.toString("utf8",t);this.lastTotal=r;var n=e.length-(r-this.lastNeed);return e.copy(this.lastChar,0,n),e.toString("utf8",t,n)},s.prototype.fillLast=function(e){if(this.lastNeed<=e.length)return e.copy(this.lastChar,this.lastTotal-this.lastNeed,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal);e.copy(this.lastChar,this.lastTotal-this.lastNeed,0,e.length),this.lastNeed-=e.length}},function(e,t,r){"use strict";e.exports=o;var n=r(7),i=r(12);function s(e,t){var r=this._transformState;r.transforming=!1;var n=r.writecb;if(!n)return this.emit("error",new Error("write callback called multiple times"));r.writechunk=null,r.writecb=null,null!=t&&this.push(t),n(e);var i=this._readableState;i.reading=!1,(i.needReadable||i.length<i.highWaterMark)&&this._read(i.highWaterMark)}function o(e){if(!(this instanceof o))return new o(e);n.call(this,e),this._transformState={afterTransform:s.bind(this),needTransform:!1,transforming:!1,writecb:null,writechunk:null,writeencoding:null},this._readableState.needReadable=!0,this._readableState.sync=!1,e&&("function"==typeof e.transform&&(this._transform=e.transform),"function"==typeof e.flush&&(this._flush=e.flush)),this.on("prefinish",a)}function a(){var e=this;"function"==typeof this._flush?this._flush(function(t,r){u(e,t,r)}):u(this,null,null)}function u(e,t,r){if(t)return e.emit("error",t);if(null!=r&&e.push(r),e._writableState.length)throw new Error("Calling transform done when ws.length != 0");if(e._transformState.transforming)throw new Error("Calling transform done when still transforming");return e.push(null)}i.inherits=r(4),i.inherits(o,n),o.prototype.push=function(e,t){return this._transformState.needTransform=!1,n.prototype.push.call(this,e,t)},o.prototype._transform=function(e,t,r){throw new Error("_transform() is not implemented")},o.prototype._write=function(e,t,r){var n=this._transformState;if(n.writecb=r,n.writechunk=e,n.writeencoding=t,!n.transforming){var i=this._readableState;(n.needTransform||i.needReadable||i.length<i.highWaterMark)&&this._read(i.highWaterMark)}},o.prototype._read=function(e){var t=this._transformState;null!==t.writechunk&&t.writecb&&!t.transforming?(t.transforming=!0,this._transform(t.writechunk,t.writeencoding,t.afterTransform)):t.needTransform=!0},o.prototype._destroy=function(e,t){var r=this;n.prototype._destroy.call(this,e,function(e){t(e),r.emit("close")})}},function(e,t,r){"use strict";(function(t){var n=r(83);
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */function i(e,t){if(e===t)return 0;for(var r=e.length,n=t.length,i=0,s=Math.min(r,n);i<s;++i)if(e[i]!==t[i]){r=e[i],n=t[i];break}return r<n?-1:n<r?1:0}function s(e){return t.Buffer&&"function"==typeof t.Buffer.isBuffer?t.Buffer.isBuffer(e):!(null==e||!e._isBuffer)}var o=r(45),a=Object.prototype.hasOwnProperty,u=Array.prototype.slice,h="foo"===function(){}.name;function c(e){return Object.prototype.toString.call(e)}function f(e){return!s(e)&&("function"==typeof t.ArrayBuffer&&("function"==typeof ArrayBuffer.isView?ArrayBuffer.isView(e):!!e&&(e instanceof DataView||!!(e.buffer&&e.buffer instanceof ArrayBuffer))))}var l=e.exports=w,d=/\s*function\s+([^\(\s]*)\s*/;function p(e){if(o.isFunction(e)){if(h)return e.name;var t=e.toString().match(d);return t&&t[1]}}function _(e,t){return"string"==typeof e?e.length<t?e:e.slice(0,t):e}function g(e){if(h||!o.isFunction(e))return o.inspect(e);var t=p(e);return"[Function"+(t?": "+t:"")+"]"}function m(e,t,r,n,i){throw new l.AssertionError({message:r,actual:e,expected:t,operator:n,stackStartFunction:i})}function w(e,t){e||m(e,!0,t,"==",l.ok)}function y(e,t,r,n){if(e===t)return!0;if(s(e)&&s(t))return 0===i(e,t);if(o.isDate(e)&&o.isDate(t))return e.getTime()===t.getTime();if(o.isRegExp(e)&&o.isRegExp(t))return e.source===t.source&&e.global===t.global&&e.multiline===t.multiline&&e.lastIndex===t.lastIndex&&e.ignoreCase===t.ignoreCase;if(null!==e&&"object"==typeof e||null!==t&&"object"==typeof t){if(f(e)&&f(t)&&c(e)===c(t)&&!(e instanceof Float32Array||e instanceof Float64Array))return 0===i(new Uint8Array(e.buffer),new Uint8Array(t.buffer));if(s(e)!==s(t))return!1;var a=(n=n||{actual:[],expected:[]}).actual.indexOf(e);return-1!==a&&a===n.expected.indexOf(t)||(n.actual.push(e),n.expected.push(t),function(e,t,r,n){if(null==e||null==t)return!1;if(o.isPrimitive(e)||o.isPrimitive(t))return e===t;if(r&&Object.getPrototypeOf(e)!==Object.getPrototypeOf(t))return!1;var i=b(e),s=b(t);if(i&&!s||!i&&s)return!1;if(i)return e=u.call(e),t=u.call(t),y(e,t,r);var a,h,c=x(e),f=x(t);if(c.length!==f.length)return!1;for(c.sort(),f.sort(),h=c.length-1;h>=0;h--)if(c[h]!==f[h])return!1;for(h=c.length-1;h>=0;h--)if(a=c[h],!y(e[a],t[a],r,n))return!1;return!0}(e,t,r,n))}return r?e===t:e==t}function b(e){return"[object Arguments]"==Object.prototype.toString.call(e)}function v(e,t){if(!e||!t)return!1;if("[object RegExp]"==Object.prototype.toString.call(t))return t.test(e);try{if(e instanceof t)return!0}catch(e){}return!Error.isPrototypeOf(t)&&!0===t.call({},e)}function R(e,t,r,n){var i;if("function"!=typeof t)throw new TypeError('"block" argument must be a function');"string"==typeof r&&(n=r,r=null),i=function(e){var t;try{e()}catch(e){t=e}return t}(t),n=(r&&r.name?" ("+r.name+").":".")+(n?" "+n:"."),e&&!i&&m(i,r,"Missing expected exception"+n);var s="string"==typeof n,a=!e&&i&&!r;if((!e&&o.isError(i)&&s&&v(i,r)||a)&&m(i,r,"Got unwanted exception"+n),e&&i&&r&&!v(i,r)||!e&&i)throw i}l.AssertionError=function(e){this.name="AssertionError",this.actual=e.actual,this.expected=e.expected,this.operator=e.operator,e.message?(this.message=e.message,this.generatedMessage=!1):(this.message=function(e){return _(g(e.actual),128)+" "+e.operator+" "+_(g(e.expected),128)}(this),this.generatedMessage=!0);var t=e.stackStartFunction||m;if(Error.captureStackTrace)Error.captureStackTrace(this,t);else{var r=new Error;if(r.stack){var n=r.stack,i=p(t),s=n.indexOf("\n"+i);if(s>=0){var o=n.indexOf("\n",s+1);n=n.substring(o+1)}this.stack=n}}},o.inherits(l.AssertionError,Error),l.fail=m,l.ok=w,l.equal=function(e,t,r){e!=t&&m(e,t,r,"==",l.equal)},l.notEqual=function(e,t,r){e==t&&m(e,t,r,"!=",l.notEqual)},l.deepEqual=function(e,t,r){y(e,t,!1)||m(e,t,r,"deepEqual",l.deepEqual)},l.deepStrictEqual=function(e,t,r){y(e,t,!0)||m(e,t,r,"deepStrictEqual",l.deepStrictEqual)},l.notDeepEqual=function(e,t,r){y(e,t,!1)&&m(e,t,r,"notDeepEqual",l.notDeepEqual)},l.notDeepStrictEqual=function e(t,r,n){y(t,r,!0)&&m(t,r,n,"notDeepStrictEqual",e)},l.strictEqual=function(e,t,r){e!==t&&m(e,t,r,"===",l.strictEqual)},l.notStrictEqual=function(e,t,r){e===t&&m(e,t,r,"!==",l.notStrictEqual)},l.throws=function(e,t,r){R(!0,e,t,r)},l.doesNotThrow=function(e,t,r){R(!1,e,t,r)},l.ifError=function(e){if(e)throw e},l.strict=n(function e(t,r){t||m(t,!0,r,"==",e)},l,{equal:l.strictEqual,deepEqual:l.deepStrictEqual,notEqual:l.notStrictEqual,notDeepEqual:l.notDeepStrictEqual}),l.strict.strict=l.strict;var x=Object.keys||function(e){var t=[];for(var r in e)a.call(e,r)&&t.push(r);return t}}).call(this,r(1))},function(e,t,r){(function(e){var n=Object.getOwnPropertyDescriptors||function(e){for(var t=Object.keys(e),r={},n=0;n<t.length;n++)r[t[n]]=Object.getOwnPropertyDescriptor(e,t[n]);return r},i=/%[sdj%]/g;t.format=function(e){if(!m(e)){for(var t=[],r=0;r<arguments.length;r++)t.push(a(arguments[r]));return t.join(" ")}r=1;for(var n=arguments,s=n.length,o=String(e).replace(i,function(e){if("%%"===e)return"%";if(r>=s)return e;switch(e){case"%s":return String(n[r++]);case"%d":return Number(n[r++]);case"%j":try{return JSON.stringify(n[r++])}catch(e){return"[Circular]"}default:return e}}),u=n[r];r<s;u=n[++r])_(u)||!b(u)?o+=" "+u:o+=" "+a(u);return o},t.deprecate=function(r,n){if(void 0!==e&&!0===e.noDeprecation)return r;if(void 0===e)return function(){return t.deprecate(r,n).apply(this,arguments)};var i=!1;return function(){if(!i){if(e.throwDeprecation)throw new Error(n);e.traceDeprecation?console.trace(n):console.error(n),i=!0}return r.apply(this,arguments)}};var s,o={};function a(e,r){var n={seen:[],stylize:h};return arguments.length>=3&&(n.depth=arguments[2]),arguments.length>=4&&(n.colors=arguments[3]),p(r)?n.showHidden=r:r&&t._extend(n,r),w(n.showHidden)&&(n.showHidden=!1),w(n.depth)&&(n.depth=2),w(n.colors)&&(n.colors=!1),w(n.customInspect)&&(n.customInspect=!0),n.colors&&(n.stylize=u),c(n,e,n.depth)}function u(e,t){var r=a.styles[t];return r?"["+a.colors[r][0]+"m"+e+"["+a.colors[r][1]+"m":e}function h(e,t){return e}function c(e,r,n){if(e.customInspect&&r&&x(r.inspect)&&r.inspect!==t.inspect&&(!r.constructor||r.constructor.prototype!==r)){var i=r.inspect(n,e);return m(i)||(i=c(e,i,n)),i}var s=function(e,t){if(w(t))return e.stylize("undefined","undefined");if(m(t)){var r="'"+JSON.stringify(t).replace(/^"|"$/g,"").replace(/'/g,"\\'").replace(/\\"/g,'"')+"'";return e.stylize(r,"string")}if(g(t))return e.stylize(""+t,"number");if(p(t))return e.stylize(""+t,"boolean");if(_(t))return e.stylize("null","null")}(e,r);if(s)return s;var o=Object.keys(r),a=function(e){var t={};return e.forEach(function(e,r){t[e]=!0}),t}(o);if(e.showHidden&&(o=Object.getOwnPropertyNames(r)),R(r)&&(o.indexOf("message")>=0||o.indexOf("description")>=0))return f(r);if(0===o.length){if(x(r)){var u=r.name?": "+r.name:"";return e.stylize("[Function"+u+"]","special")}if(y(r))return e.stylize(RegExp.prototype.toString.call(r),"regexp");if(v(r))return e.stylize(Date.prototype.toString.call(r),"date");if(R(r))return f(r)}var h,b="",E=!1,k=["{","}"];(d(r)&&(E=!0,k=["[","]"]),x(r))&&(b=" [Function"+(r.name?": "+r.name:"")+"]");return y(r)&&(b=" "+RegExp.prototype.toString.call(r)),v(r)&&(b=" "+Date.prototype.toUTCString.call(r)),R(r)&&(b=" "+f(r)),0!==o.length||E&&0!=r.length?n<0?y(r)?e.stylize(RegExp.prototype.toString.call(r),"regexp"):e.stylize("[Object]","special"):(e.seen.push(r),h=E?function(e,t,r,n,i){for(var s=[],o=0,a=t.length;o<a;++o)A(t,String(o))?s.push(l(e,t,r,n,String(o),!0)):s.push("");return i.forEach(function(i){i.match(/^\d+$/)||s.push(l(e,t,r,n,i,!0))}),s}(e,r,n,a,o):o.map(function(t){return l(e,r,n,a,t,E)}),e.seen.pop(),function(e,t,r){if(e.reduce(function(e,t){return 0,t.indexOf("\n")>=0&&0,e+t.replace(/\u001b\[\d\d?m/g,"").length+1},0)>60)return r[0]+(""===t?"":t+"\n ")+" "+e.join(",\n  ")+" "+r[1];return r[0]+t+" "+e.join(", ")+" "+r[1]}(h,b,k)):k[0]+b+k[1]}function f(e){return"["+Error.prototype.toString.call(e)+"]"}function l(e,t,r,n,i,s){var o,a,u;if((u=Object.getOwnPropertyDescriptor(t,i)||{value:t[i]}).get?a=u.set?e.stylize("[Getter/Setter]","special"):e.stylize("[Getter]","special"):u.set&&(a=e.stylize("[Setter]","special")),A(n,i)||(o="["+i+"]"),a||(e.seen.indexOf(u.value)<0?(a=_(r)?c(e,u.value,null):c(e,u.value,r-1)).indexOf("\n")>-1&&(a=s?a.split("\n").map(function(e){return"  "+e}).join("\n").substr(2):"\n"+a.split("\n").map(function(e){return"   "+e}).join("\n")):a=e.stylize("[Circular]","special")),w(o)){if(s&&i.match(/^\d+$/))return a;(o=JSON.stringify(""+i)).match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)?(o=o.substr(1,o.length-2),o=e.stylize(o,"name")):(o=o.replace(/'/g,"\\'").replace(/\\"/g,'"').replace(/(^"|"$)/g,"'"),o=e.stylize(o,"string"))}return o+": "+a}function d(e){return Array.isArray(e)}function p(e){return"boolean"==typeof e}function _(e){return null===e}function g(e){return"number"==typeof e}function m(e){return"string"==typeof e}function w(e){return void 0===e}function y(e){return b(e)&&"[object RegExp]"===E(e)}function b(e){return"object"==typeof e&&null!==e}function v(e){return b(e)&&"[object Date]"===E(e)}function R(e){return b(e)&&("[object Error]"===E(e)||e instanceof Error)}function x(e){return"function"==typeof e}function E(e){return Object.prototype.toString.call(e)}function k(e){return e<10?"0"+e.toString(10):e.toString(10)}t.debuglog=function(r){if(w(s)&&(s=e.env.NODE_DEBUG||""),r=r.toUpperCase(),!o[r])if(new RegExp("\\b"+r+"\\b","i").test(s)){var n=e.pid;o[r]=function(){var e=t.format.apply(t,arguments);console.error("%s %d: %s",r,n,e)}}else o[r]=function(){};return o[r]},t.inspect=a,a.colors={bold:[1,22],italic:[3,23],underline:[4,24],inverse:[7,27],white:[37,39],grey:[90,39],black:[30,39],blue:[34,39],cyan:[36,39],green:[32,39],magenta:[35,39],red:[31,39],yellow:[33,39]},a.styles={special:"cyan",number:"yellow",boolean:"yellow",undefined:"grey",null:"bold",string:"green",date:"magenta",regexp:"red"},t.isArray=d,t.isBoolean=p,t.isNull=_,t.isNullOrUndefined=function(e){return null==e},t.isNumber=g,t.isString=m,t.isSymbol=function(e){return"symbol"==typeof e},t.isUndefined=w,t.isRegExp=y,t.isObject=b,t.isDate=v,t.isError=R,t.isFunction=x,t.isPrimitive=function(e){return null===e||"boolean"==typeof e||"number"==typeof e||"string"==typeof e||"symbol"==typeof e||void 0===e},t.isBuffer=r(84);var S=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];function A(e,t){return Object.prototype.hasOwnProperty.call(e,t)}t.log=function(){var e,r;console.log("%s - %s",(e=new Date,r=[k(e.getHours()),k(e.getMinutes()),k(e.getSeconds())].join(":"),[e.getDate(),S[e.getMonth()],r].join(" ")),t.format.apply(t,arguments))},t.inherits=r(4),t._extend=function(e,t){if(!t||!b(t))return e;for(var r=Object.keys(t),n=r.length;n--;)e[r[n]]=t[r[n]];return e};var T="undefined"!=typeof Symbol?Symbol("util.promisify.custom"):void 0;function C(e,t){if(!e){var r=new Error("Promise was rejected with a falsy value");r.reason=e,e=r}return t(e)}t.promisify=function(e){if("function"!=typeof e)throw new TypeError('The "original" argument must be of type Function');if(T&&e[T]){var t;if("function"!=typeof(t=e[T]))throw new TypeError('The "util.promisify.custom" argument must be of type Function');return Object.defineProperty(t,T,{value:t,enumerable:!1,writable:!1,configurable:!0}),t}function t(){for(var t,r,n=new Promise(function(e,n){t=e,r=n}),i=[],s=0;s<arguments.length;s++)i.push(arguments[s]);i.push(function(e,n){e?r(e):t(n)});try{e.apply(this,i)}catch(e){r(e)}return n}return Object.setPrototypeOf(t,Object.getPrototypeOf(e)),T&&Object.defineProperty(t,T,{value:t,enumerable:!1,writable:!1,configurable:!0}),Object.defineProperties(t,n(e))},t.promisify.custom=T,t.callbackify=function(t){if("function"!=typeof t)throw new TypeError('The "original" argument must be of type Function');function r(){for(var r=[],n=0;n<arguments.length;n++)r.push(arguments[n]);var i=r.pop();if("function"!=typeof i)throw new TypeError("The last argument must be of type Function");var s=this,o=function(){return i.apply(s,arguments)};t.apply(this,r).then(function(t){e.nextTick(o,null,t)},function(t){e.nextTick(C,t,o)})}return Object.setPrototypeOf(r,Object.getPrototypeOf(t)),Object.defineProperties(r,n(t)),r}}).call(this,r(2))},function(e,t,r){"use strict";var n,i=r(5),s=r(85),o=r(47),a=r(48),u=r(29),h=0,c=1,f=3,l=4,d=5,p=0,_=1,g=-2,m=-3,w=-5,y=-1,b=1,v=2,R=3,x=4,E=0,k=2,S=8,A=9,T=15,C=8,O=286,I=30,L=19,q=2*O+1,P=15,B=3,j=258,N=j+B+1,D=32,U=42,z=69,M=73,W=91,F=103,H=113,Z=666,$=1,G=2,Y=3,K=4,V=3;function X(e,t){return e.msg=u[t],t}function J(e){return(e<<1)-(e>4?9:0)}function Q(e){for(var t=e.length;--t>=0;)e[t]=0}function ee(e){var t=e.state,r=t.pending;r>e.avail_out&&(r=e.avail_out),0!==r&&(i.arraySet(e.output,t.pending_buf,t.pending_out,r,e.next_out),e.next_out+=r,t.pending_out+=r,e.total_out+=r,e.avail_out-=r,t.pending-=r,0===t.pending&&(t.pending_out=0))}function te(e,t){s._tr_flush_block(e,e.block_start>=0?e.block_start:-1,e.strstart-e.block_start,t),e.block_start=e.strstart,ee(e.strm)}function re(e,t){e.pending_buf[e.pending++]=t}function ne(e,t){e.pending_buf[e.pending++]=t>>>8&255,e.pending_buf[e.pending++]=255&t}function ie(e,t){var r,n,i=e.max_chain_length,s=e.strstart,o=e.prev_length,a=e.nice_match,u=e.strstart>e.w_size-N?e.strstart-(e.w_size-N):0,h=e.window,c=e.w_mask,f=e.prev,l=e.strstart+j,d=h[s+o-1],p=h[s+o];e.prev_length>=e.good_match&&(i>>=2),a>e.lookahead&&(a=e.lookahead);do{if(h[(r=t)+o]===p&&h[r+o-1]===d&&h[r]===h[s]&&h[++r]===h[s+1]){s+=2,r++;do{}while(h[++s]===h[++r]&&h[++s]===h[++r]&&h[++s]===h[++r]&&h[++s]===h[++r]&&h[++s]===h[++r]&&h[++s]===h[++r]&&h[++s]===h[++r]&&h[++s]===h[++r]&&s<l);if(n=j-(l-s),s=l-j,n>o){if(e.match_start=t,o=n,n>=a)break;d=h[s+o-1],p=h[s+o]}}}while((t=f[t&c])>u&&0!=--i);return o<=e.lookahead?o:e.lookahead}function se(e){var t,r,n,s,u,h,c,f,l,d,p=e.w_size;do{if(s=e.window_size-e.lookahead-e.strstart,e.strstart>=p+(p-N)){i.arraySet(e.window,e.window,p,p,0),e.match_start-=p,e.strstart-=p,e.block_start-=p,t=r=e.hash_size;do{n=e.head[--t],e.head[t]=n>=p?n-p:0}while(--r);t=r=p;do{n=e.prev[--t],e.prev[t]=n>=p?n-p:0}while(--r);s+=p}if(0===e.strm.avail_in)break;if(h=e.strm,c=e.window,f=e.strstart+e.lookahead,l=s,d=void 0,(d=h.avail_in)>l&&(d=l),r=0===d?0:(h.avail_in-=d,i.arraySet(c,h.input,h.next_in,d,f),1===h.state.wrap?h.adler=o(h.adler,c,d,f):2===h.state.wrap&&(h.adler=a(h.adler,c,d,f)),h.next_in+=d,h.total_in+=d,d),e.lookahead+=r,e.lookahead+e.insert>=B)for(u=e.strstart-e.insert,e.ins_h=e.window[u],e.ins_h=(e.ins_h<<e.hash_shift^e.window[u+1])&e.hash_mask;e.insert&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[u+B-1])&e.hash_mask,e.prev[u&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=u,u++,e.insert--,!(e.lookahead+e.insert<B)););}while(e.lookahead<N&&0!==e.strm.avail_in)}function oe(e,t){for(var r,n;;){if(e.lookahead<N){if(se(e),e.lookahead<N&&t===h)return $;if(0===e.lookahead)break}if(r=0,e.lookahead>=B&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+B-1])&e.hash_mask,r=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart),0!==r&&e.strstart-r<=e.w_size-N&&(e.match_length=ie(e,r)),e.match_length>=B)if(n=s._tr_tally(e,e.strstart-e.match_start,e.match_length-B),e.lookahead-=e.match_length,e.match_length<=e.max_lazy_match&&e.lookahead>=B){e.match_length--;do{e.strstart++,e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+B-1])&e.hash_mask,r=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart}while(0!=--e.match_length);e.strstart++}else e.strstart+=e.match_length,e.match_length=0,e.ins_h=e.window[e.strstart],e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+1])&e.hash_mask;else n=s._tr_tally(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++;if(n&&(te(e,!1),0===e.strm.avail_out))return $}return e.insert=e.strstart<B-1?e.strstart:B-1,t===l?(te(e,!0),0===e.strm.avail_out?Y:K):e.last_lit&&(te(e,!1),0===e.strm.avail_out)?$:G}function ae(e,t){for(var r,n,i;;){if(e.lookahead<N){if(se(e),e.lookahead<N&&t===h)return $;if(0===e.lookahead)break}if(r=0,e.lookahead>=B&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+B-1])&e.hash_mask,r=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart),e.prev_length=e.match_length,e.prev_match=e.match_start,e.match_length=B-1,0!==r&&e.prev_length<e.max_lazy_match&&e.strstart-r<=e.w_size-N&&(e.match_length=ie(e,r),e.match_length<=5&&(e.strategy===b||e.match_length===B&&e.strstart-e.match_start>4096)&&(e.match_length=B-1)),e.prev_length>=B&&e.match_length<=e.prev_length){i=e.strstart+e.lookahead-B,n=s._tr_tally(e,e.strstart-1-e.prev_match,e.prev_length-B),e.lookahead-=e.prev_length-1,e.prev_length-=2;do{++e.strstart<=i&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+B-1])&e.hash_mask,r=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart)}while(0!=--e.prev_length);if(e.match_available=0,e.match_length=B-1,e.strstart++,n&&(te(e,!1),0===e.strm.avail_out))return $}else if(e.match_available){if((n=s._tr_tally(e,0,e.window[e.strstart-1]))&&te(e,!1),e.strstart++,e.lookahead--,0===e.strm.avail_out)return $}else e.match_available=1,e.strstart++,e.lookahead--}return e.match_available&&(n=s._tr_tally(e,0,e.window[e.strstart-1]),e.match_available=0),e.insert=e.strstart<B-1?e.strstart:B-1,t===l?(te(e,!0),0===e.strm.avail_out?Y:K):e.last_lit&&(te(e,!1),0===e.strm.avail_out)?$:G}function ue(e,t,r,n,i){this.good_length=e,this.max_lazy=t,this.nice_length=r,this.max_chain=n,this.func=i}function he(){this.strm=null,this.status=0,this.pending_buf=null,this.pending_buf_size=0,this.pending_out=0,this.pending=0,this.wrap=0,this.gzhead=null,this.gzindex=0,this.method=S,this.last_flush=-1,this.w_size=0,this.w_bits=0,this.w_mask=0,this.window=null,this.window_size=0,this.prev=null,this.head=null,this.ins_h=0,this.hash_size=0,this.hash_bits=0,this.hash_mask=0,this.hash_shift=0,this.block_start=0,this.match_length=0,this.prev_match=0,this.match_available=0,this.strstart=0,this.match_start=0,this.lookahead=0,this.prev_length=0,this.max_chain_length=0,this.max_lazy_match=0,this.level=0,this.strategy=0,this.good_match=0,this.nice_match=0,this.dyn_ltree=new i.Buf16(2*q),this.dyn_dtree=new i.Buf16(2*(2*I+1)),this.bl_tree=new i.Buf16(2*(2*L+1)),Q(this.dyn_ltree),Q(this.dyn_dtree),Q(this.bl_tree),this.l_desc=null,this.d_desc=null,this.bl_desc=null,this.bl_count=new i.Buf16(P+1),this.heap=new i.Buf16(2*O+1),Q(this.heap),this.heap_len=0,this.heap_max=0,this.depth=new i.Buf16(2*O+1),Q(this.depth),this.l_buf=0,this.lit_bufsize=0,this.last_lit=0,this.d_buf=0,this.opt_len=0,this.static_len=0,this.matches=0,this.insert=0,this.bi_buf=0,this.bi_valid=0}function ce(e){var t;return e&&e.state?(e.total_in=e.total_out=0,e.data_type=k,(t=e.state).pending=0,t.pending_out=0,t.wrap<0&&(t.wrap=-t.wrap),t.status=t.wrap?U:H,e.adler=2===t.wrap?0:1,t.last_flush=h,s._tr_init(t),p):X(e,g)}function fe(e){var t,r=ce(e);return r===p&&((t=e.state).window_size=2*t.w_size,Q(t.head),t.max_lazy_match=n[t.level].max_lazy,t.good_match=n[t.level].good_length,t.nice_match=n[t.level].nice_length,t.max_chain_length=n[t.level].max_chain,t.strstart=0,t.block_start=0,t.lookahead=0,t.insert=0,t.match_length=t.prev_length=B-1,t.match_available=0,t.ins_h=0),r}function le(e,t,r,n,s,o){if(!e)return g;var a=1;if(t===y&&(t=6),n<0?(a=0,n=-n):n>15&&(a=2,n-=16),s<1||s>A||r!==S||n<8||n>15||t<0||t>9||o<0||o>x)return X(e,g);8===n&&(n=9);var u=new he;return e.state=u,u.strm=e,u.wrap=a,u.gzhead=null,u.w_bits=n,u.w_size=1<<u.w_bits,u.w_mask=u.w_size-1,u.hash_bits=s+7,u.hash_size=1<<u.hash_bits,u.hash_mask=u.hash_size-1,u.hash_shift=~~((u.hash_bits+B-1)/B),u.window=new i.Buf8(2*u.w_size),u.head=new i.Buf16(u.hash_size),u.prev=new i.Buf16(u.w_size),u.lit_bufsize=1<<s+6,u.pending_buf_size=4*u.lit_bufsize,u.pending_buf=new i.Buf8(u.pending_buf_size),u.d_buf=1*u.lit_bufsize,u.l_buf=3*u.lit_bufsize,u.level=t,u.strategy=o,u.method=r,fe(e)}n=[new ue(0,0,0,0,function(e,t){var r=65535;for(r>e.pending_buf_size-5&&(r=e.pending_buf_size-5);;){if(e.lookahead<=1){if(se(e),0===e.lookahead&&t===h)return $;if(0===e.lookahead)break}e.strstart+=e.lookahead,e.lookahead=0;var n=e.block_start+r;if((0===e.strstart||e.strstart>=n)&&(e.lookahead=e.strstart-n,e.strstart=n,te(e,!1),0===e.strm.avail_out))return $;if(e.strstart-e.block_start>=e.w_size-N&&(te(e,!1),0===e.strm.avail_out))return $}return e.insert=0,t===l?(te(e,!0),0===e.strm.avail_out?Y:K):(e.strstart>e.block_start&&(te(e,!1),e.strm.avail_out),$)}),new ue(4,4,8,4,oe),new ue(4,5,16,8,oe),new ue(4,6,32,32,oe),new ue(4,4,16,16,ae),new ue(8,16,32,32,ae),new ue(8,16,128,128,ae),new ue(8,32,128,256,ae),new ue(32,128,258,1024,ae),new ue(32,258,258,4096,ae)],t.deflateInit=function(e,t){return le(e,t,S,T,C,E)},t.deflateInit2=le,t.deflateReset=fe,t.deflateResetKeep=ce,t.deflateSetHeader=function(e,t){return e&&e.state?2!==e.state.wrap?g:(e.state.gzhead=t,p):g},t.deflate=function(e,t){var r,i,o,u;if(!e||!e.state||t>d||t<0)return e?X(e,g):g;if(i=e.state,!e.output||!e.input&&0!==e.avail_in||i.status===Z&&t!==l)return X(e,0===e.avail_out?w:g);if(i.strm=e,r=i.last_flush,i.last_flush=t,i.status===U)if(2===i.wrap)e.adler=0,re(i,31),re(i,139),re(i,8),i.gzhead?(re(i,(i.gzhead.text?1:0)+(i.gzhead.hcrc?2:0)+(i.gzhead.extra?4:0)+(i.gzhead.name?8:0)+(i.gzhead.comment?16:0)),re(i,255&i.gzhead.time),re(i,i.gzhead.time>>8&255),re(i,i.gzhead.time>>16&255),re(i,i.gzhead.time>>24&255),re(i,9===i.level?2:i.strategy>=v||i.level<2?4:0),re(i,255&i.gzhead.os),i.gzhead.extra&&i.gzhead.extra.length&&(re(i,255&i.gzhead.extra.length),re(i,i.gzhead.extra.length>>8&255)),i.gzhead.hcrc&&(e.adler=a(e.adler,i.pending_buf,i.pending,0)),i.gzindex=0,i.status=z):(re(i,0),re(i,0),re(i,0),re(i,0),re(i,0),re(i,9===i.level?2:i.strategy>=v||i.level<2?4:0),re(i,V),i.status=H);else{var m=S+(i.w_bits-8<<4)<<8;m|=(i.strategy>=v||i.level<2?0:i.level<6?1:6===i.level?2:3)<<6,0!==i.strstart&&(m|=D),m+=31-m%31,i.status=H,ne(i,m),0!==i.strstart&&(ne(i,e.adler>>>16),ne(i,65535&e.adler)),e.adler=1}if(i.status===z)if(i.gzhead.extra){for(o=i.pending;i.gzindex<(65535&i.gzhead.extra.length)&&(i.pending!==i.pending_buf_size||(i.gzhead.hcrc&&i.pending>o&&(e.adler=a(e.adler,i.pending_buf,i.pending-o,o)),ee(e),o=i.pending,i.pending!==i.pending_buf_size));)re(i,255&i.gzhead.extra[i.gzindex]),i.gzindex++;i.gzhead.hcrc&&i.pending>o&&(e.adler=a(e.adler,i.pending_buf,i.pending-o,o)),i.gzindex===i.gzhead.extra.length&&(i.gzindex=0,i.status=M)}else i.status=M;if(i.status===M)if(i.gzhead.name){o=i.pending;do{if(i.pending===i.pending_buf_size&&(i.gzhead.hcrc&&i.pending>o&&(e.adler=a(e.adler,i.pending_buf,i.pending-o,o)),ee(e),o=i.pending,i.pending===i.pending_buf_size)){u=1;break}u=i.gzindex<i.gzhead.name.length?255&i.gzhead.name.charCodeAt(i.gzindex++):0,re(i,u)}while(0!==u);i.gzhead.hcrc&&i.pending>o&&(e.adler=a(e.adler,i.pending_buf,i.pending-o,o)),0===u&&(i.gzindex=0,i.status=W)}else i.status=W;if(i.status===W)if(i.gzhead.comment){o=i.pending;do{if(i.pending===i.pending_buf_size&&(i.gzhead.hcrc&&i.pending>o&&(e.adler=a(e.adler,i.pending_buf,i.pending-o,o)),ee(e),o=i.pending,i.pending===i.pending_buf_size)){u=1;break}u=i.gzindex<i.gzhead.comment.length?255&i.gzhead.comment.charCodeAt(i.gzindex++):0,re(i,u)}while(0!==u);i.gzhead.hcrc&&i.pending>o&&(e.adler=a(e.adler,i.pending_buf,i.pending-o,o)),0===u&&(i.status=F)}else i.status=F;if(i.status===F&&(i.gzhead.hcrc?(i.pending+2>i.pending_buf_size&&ee(e),i.pending+2<=i.pending_buf_size&&(re(i,255&e.adler),re(i,e.adler>>8&255),e.adler=0,i.status=H)):i.status=H),0!==i.pending){if(ee(e),0===e.avail_out)return i.last_flush=-1,p}else if(0===e.avail_in&&J(t)<=J(r)&&t!==l)return X(e,w);if(i.status===Z&&0!==e.avail_in)return X(e,w);if(0!==e.avail_in||0!==i.lookahead||t!==h&&i.status!==Z){var y=i.strategy===v?function(e,t){for(var r;;){if(0===e.lookahead&&(se(e),0===e.lookahead)){if(t===h)return $;break}if(e.match_length=0,r=s._tr_tally(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++,r&&(te(e,!1),0===e.strm.avail_out))return $}return e.insert=0,t===l?(te(e,!0),0===e.strm.avail_out?Y:K):e.last_lit&&(te(e,!1),0===e.strm.avail_out)?$:G}(i,t):i.strategy===R?function(e,t){for(var r,n,i,o,a=e.window;;){if(e.lookahead<=j){if(se(e),e.lookahead<=j&&t===h)return $;if(0===e.lookahead)break}if(e.match_length=0,e.lookahead>=B&&e.strstart>0&&(n=a[i=e.strstart-1])===a[++i]&&n===a[++i]&&n===a[++i]){o=e.strstart+j;do{}while(n===a[++i]&&n===a[++i]&&n===a[++i]&&n===a[++i]&&n===a[++i]&&n===a[++i]&&n===a[++i]&&n===a[++i]&&i<o);e.match_length=j-(o-i),e.match_length>e.lookahead&&(e.match_length=e.lookahead)}if(e.match_length>=B?(r=s._tr_tally(e,1,e.match_length-B),e.lookahead-=e.match_length,e.strstart+=e.match_length,e.match_length=0):(r=s._tr_tally(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++),r&&(te(e,!1),0===e.strm.avail_out))return $}return e.insert=0,t===l?(te(e,!0),0===e.strm.avail_out?Y:K):e.last_lit&&(te(e,!1),0===e.strm.avail_out)?$:G}(i,t):n[i.level].func(i,t);if(y!==Y&&y!==K||(i.status=Z),y===$||y===Y)return 0===e.avail_out&&(i.last_flush=-1),p;if(y===G&&(t===c?s._tr_align(i):t!==d&&(s._tr_stored_block(i,0,0,!1),t===f&&(Q(i.head),0===i.lookahead&&(i.strstart=0,i.block_start=0,i.insert=0))),ee(e),0===e.avail_out))return i.last_flush=-1,p}return t!==l?p:i.wrap<=0?_:(2===i.wrap?(re(i,255&e.adler),re(i,e.adler>>8&255),re(i,e.adler>>16&255),re(i,e.adler>>24&255),re(i,255&e.total_in),re(i,e.total_in>>8&255),re(i,e.total_in>>16&255),re(i,e.total_in>>24&255)):(ne(i,e.adler>>>16),ne(i,65535&e.adler)),ee(e),i.wrap>0&&(i.wrap=-i.wrap),0!==i.pending?p:_)},t.deflateEnd=function(e){var t;return e&&e.state?(t=e.state.status)!==U&&t!==z&&t!==M&&t!==W&&t!==F&&t!==H&&t!==Z?X(e,g):(e.state=null,t===H?X(e,m):p):g},t.deflateSetDictionary=function(e,t){var r,n,s,a,u,h,c,f,l=t.length;if(!e||!e.state)return g;if(2===(a=(r=e.state).wrap)||1===a&&r.status!==U||r.lookahead)return g;for(1===a&&(e.adler=o(e.adler,t,l,0)),r.wrap=0,l>=r.w_size&&(0===a&&(Q(r.head),r.strstart=0,r.block_start=0,r.insert=0),f=new i.Buf8(r.w_size),i.arraySet(f,t,l-r.w_size,r.w_size,0),t=f,l=r.w_size),u=e.avail_in,h=e.next_in,c=e.input,e.avail_in=l,e.next_in=0,e.input=t,se(r);r.lookahead>=B;){n=r.strstart,s=r.lookahead-(B-1);do{r.ins_h=(r.ins_h<<r.hash_shift^r.window[n+B-1])&r.hash_mask,r.prev[n&r.w_mask]=r.head[r.ins_h],r.head[r.ins_h]=n,n++}while(--s);r.strstart=n,r.lookahead=B-1,se(r)}return r.strstart+=r.lookahead,r.block_start=r.strstart,r.insert=r.lookahead,r.lookahead=0,r.match_length=r.prev_length=B-1,r.match_available=0,e.next_in=h,e.input=c,e.avail_in=u,r.wrap=a,p},t.deflateInfo="pako deflate (from Nodeca project)"},function(e,t,r){"use strict";e.exports=function(e,t,r,n){for(var i=65535&e|0,s=e>>>16&65535|0,o=0;0!==r;){r-=o=r>2e3?2e3:r;do{s=s+(i=i+t[n++]|0)|0}while(--o);i%=65521,s%=65521}return i|s<<16|0}},function(e,t,r){"use strict";var n=function(){for(var e,t=[],r=0;r<256;r++){e=r;for(var n=0;n<8;n++)e=1&e?3988292384^e>>>1:e>>>1;t[r]=e}return t}();e.exports=function(e,t,r,i){var s=n,o=i+r;e^=-1;for(var a=i;a<o;a++)e=e>>>8^s[255&(e^t[a])];return-1^e}},function(e,t,r){"use strict";var n=r(5),i=r(47),s=r(48),o=r(86),a=r(87),u=0,h=1,c=2,f=4,l=5,d=6,p=0,_=1,g=2,m=-2,w=-3,y=-4,b=-5,v=8,R=1,x=2,E=3,k=4,S=5,A=6,T=7,C=8,O=9,I=10,L=11,q=12,P=13,B=14,j=15,N=16,D=17,U=18,z=19,M=20,W=21,F=22,H=23,Z=24,$=25,G=26,Y=27,K=28,V=29,X=30,J=31,Q=32,ee=852,te=592,re=15;function ne(e){return(e>>>24&255)+(e>>>8&65280)+((65280&e)<<8)+((255&e)<<24)}function ie(){this.mode=0,this.last=!1,this.wrap=0,this.havedict=!1,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=null,this.distcode=null,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=null,this.lens=new n.Buf16(320),this.work=new n.Buf16(288),this.lendyn=null,this.distdyn=null,this.sane=0,this.back=0,this.was=0}function se(e){var t;return e&&e.state?(t=e.state,e.total_in=e.total_out=t.total=0,e.msg="",t.wrap&&(e.adler=1&t.wrap),t.mode=R,t.last=0,t.havedict=0,t.dmax=32768,t.head=null,t.hold=0,t.bits=0,t.lencode=t.lendyn=new n.Buf32(ee),t.distcode=t.distdyn=new n.Buf32(te),t.sane=1,t.back=-1,p):m}function oe(e){var t;return e&&e.state?((t=e.state).wsize=0,t.whave=0,t.wnext=0,se(e)):m}function ae(e,t){var r,n;return e&&e.state?(n=e.state,t<0?(r=0,t=-t):(r=1+(t>>4),t<48&&(t&=15)),t&&(t<8||t>15)?m:(null!==n.window&&n.wbits!==t&&(n.window=null),n.wrap=r,n.wbits=t,oe(e))):m}function ue(e,t){var r,n;return e?(n=new ie,e.state=n,n.window=null,(r=ae(e,t))!==p&&(e.state=null),r):m}var he,ce,fe=!0;function le(e){if(fe){var t;for(he=new n.Buf32(512),ce=new n.Buf32(32),t=0;t<144;)e.lens[t++]=8;for(;t<256;)e.lens[t++]=9;for(;t<280;)e.lens[t++]=7;for(;t<288;)e.lens[t++]=8;for(a(h,e.lens,0,288,he,0,e.work,{bits:9}),t=0;t<32;)e.lens[t++]=5;a(c,e.lens,0,32,ce,0,e.work,{bits:5}),fe=!1}e.lencode=he,e.lenbits=9,e.distcode=ce,e.distbits=5}function de(e,t,r,i){var s,o=e.state;return null===o.window&&(o.wsize=1<<o.wbits,o.wnext=0,o.whave=0,o.window=new n.Buf8(o.wsize)),i>=o.wsize?(n.arraySet(o.window,t,r-o.wsize,o.wsize,0),o.wnext=0,o.whave=o.wsize):((s=o.wsize-o.wnext)>i&&(s=i),n.arraySet(o.window,t,r-i,s,o.wnext),(i-=s)?(n.arraySet(o.window,t,r-i,i,0),o.wnext=i,o.whave=o.wsize):(o.wnext+=s,o.wnext===o.wsize&&(o.wnext=0),o.whave<o.wsize&&(o.whave+=s))),0}t.inflateReset=oe,t.inflateReset2=ae,t.inflateResetKeep=se,t.inflateInit=function(e){return ue(e,re)},t.inflateInit2=ue,t.inflate=function(e,t){var r,ee,te,re,ie,se,oe,ae,ue,he,ce,fe,pe,_e,ge,me,we,ye,be,ve,Re,xe,Ee,ke,Se=0,Ae=new n.Buf8(4),Te=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];if(!e||!e.state||!e.output||!e.input&&0!==e.avail_in)return m;(r=e.state).mode===q&&(r.mode=P),ie=e.next_out,te=e.output,oe=e.avail_out,re=e.next_in,ee=e.input,se=e.avail_in,ae=r.hold,ue=r.bits,he=se,ce=oe,xe=p;e:for(;;)switch(r.mode){case R:if(0===r.wrap){r.mode=P;break}for(;ue<16;){if(0===se)break e;se--,ae+=ee[re++]<<ue,ue+=8}if(2&r.wrap&&35615===ae){r.check=0,Ae[0]=255&ae,Ae[1]=ae>>>8&255,r.check=s(r.check,Ae,2,0),ae=0,ue=0,r.mode=x;break}if(r.flags=0,r.head&&(r.head.done=!1),!(1&r.wrap)||(((255&ae)<<8)+(ae>>8))%31){e.msg="incorrect header check",r.mode=X;break}if((15&ae)!==v){e.msg="unknown compression method",r.mode=X;break}if(ue-=4,Re=8+(15&(ae>>>=4)),0===r.wbits)r.wbits=Re;else if(Re>r.wbits){e.msg="invalid window size",r.mode=X;break}r.dmax=1<<Re,e.adler=r.check=1,r.mode=512&ae?I:q,ae=0,ue=0;break;case x:for(;ue<16;){if(0===se)break e;se--,ae+=ee[re++]<<ue,ue+=8}if(r.flags=ae,(255&r.flags)!==v){e.msg="unknown compression method",r.mode=X;break}if(57344&r.flags){e.msg="unknown header flags set",r.mode=X;break}r.head&&(r.head.text=ae>>8&1),512&r.flags&&(Ae[0]=255&ae,Ae[1]=ae>>>8&255,r.check=s(r.check,Ae,2,0)),ae=0,ue=0,r.mode=E;case E:for(;ue<32;){if(0===se)break e;se--,ae+=ee[re++]<<ue,ue+=8}r.head&&(r.head.time=ae),512&r.flags&&(Ae[0]=255&ae,Ae[1]=ae>>>8&255,Ae[2]=ae>>>16&255,Ae[3]=ae>>>24&255,r.check=s(r.check,Ae,4,0)),ae=0,ue=0,r.mode=k;case k:for(;ue<16;){if(0===se)break e;se--,ae+=ee[re++]<<ue,ue+=8}r.head&&(r.head.xflags=255&ae,r.head.os=ae>>8),512&r.flags&&(Ae[0]=255&ae,Ae[1]=ae>>>8&255,r.check=s(r.check,Ae,2,0)),ae=0,ue=0,r.mode=S;case S:if(1024&r.flags){for(;ue<16;){if(0===se)break e;se--,ae+=ee[re++]<<ue,ue+=8}r.length=ae,r.head&&(r.head.extra_len=ae),512&r.flags&&(Ae[0]=255&ae,Ae[1]=ae>>>8&255,r.check=s(r.check,Ae,2,0)),ae=0,ue=0}else r.head&&(r.head.extra=null);r.mode=A;case A:if(1024&r.flags&&((fe=r.length)>se&&(fe=se),fe&&(r.head&&(Re=r.head.extra_len-r.length,r.head.extra||(r.head.extra=new Array(r.head.extra_len)),n.arraySet(r.head.extra,ee,re,fe,Re)),512&r.flags&&(r.check=s(r.check,ee,fe,re)),se-=fe,re+=fe,r.length-=fe),r.length))break e;r.length=0,r.mode=T;case T:if(2048&r.flags){if(0===se)break e;fe=0;do{Re=ee[re+fe++],r.head&&Re&&r.length<65536&&(r.head.name+=String.fromCharCode(Re))}while(Re&&fe<se);if(512&r.flags&&(r.check=s(r.check,ee,fe,re)),se-=fe,re+=fe,Re)break e}else r.head&&(r.head.name=null);r.length=0,r.mode=C;case C:if(4096&r.flags){if(0===se)break e;fe=0;do{Re=ee[re+fe++],r.head&&Re&&r.length<65536&&(r.head.comment+=String.fromCharCode(Re))}while(Re&&fe<se);if(512&r.flags&&(r.check=s(r.check,ee,fe,re)),se-=fe,re+=fe,Re)break e}else r.head&&(r.head.comment=null);r.mode=O;case O:if(512&r.flags){for(;ue<16;){if(0===se)break e;se--,ae+=ee[re++]<<ue,ue+=8}if(ae!==(65535&r.check)){e.msg="header crc mismatch",r.mode=X;break}ae=0,ue=0}r.head&&(r.head.hcrc=r.flags>>9&1,r.head.done=!0),e.adler=r.check=0,r.mode=q;break;case I:for(;ue<32;){if(0===se)break e;se--,ae+=ee[re++]<<ue,ue+=8}e.adler=r.check=ne(ae),ae=0,ue=0,r.mode=L;case L:if(0===r.havedict)return e.next_out=ie,e.avail_out=oe,e.next_in=re,e.avail_in=se,r.hold=ae,r.bits=ue,g;e.adler=r.check=1,r.mode=q;case q:if(t===l||t===d)break e;case P:if(r.last){ae>>>=7&ue,ue-=7&ue,r.mode=Y;break}for(;ue<3;){if(0===se)break e;se--,ae+=ee[re++]<<ue,ue+=8}switch(r.last=1&ae,ue-=1,3&(ae>>>=1)){case 0:r.mode=B;break;case 1:if(le(r),r.mode=M,t===d){ae>>>=2,ue-=2;break e}break;case 2:r.mode=D;break;case 3:e.msg="invalid block type",r.mode=X}ae>>>=2,ue-=2;break;case B:for(ae>>>=7&ue,ue-=7&ue;ue<32;){if(0===se)break e;se--,ae+=ee[re++]<<ue,ue+=8}if((65535&ae)!=(ae>>>16^65535)){e.msg="invalid stored block lengths",r.mode=X;break}if(r.length=65535&ae,ae=0,ue=0,r.mode=j,t===d)break e;case j:r.mode=N;case N:if(fe=r.length){if(fe>se&&(fe=se),fe>oe&&(fe=oe),0===fe)break e;n.arraySet(te,ee,re,fe,ie),se-=fe,re+=fe,oe-=fe,ie+=fe,r.length-=fe;break}r.mode=q;break;case D:for(;ue<14;){if(0===se)break e;se--,ae+=ee[re++]<<ue,ue+=8}if(r.nlen=257+(31&ae),ae>>>=5,ue-=5,r.ndist=1+(31&ae),ae>>>=5,ue-=5,r.ncode=4+(15&ae),ae>>>=4,ue-=4,r.nlen>286||r.ndist>30){e.msg="too many length or distance symbols",r.mode=X;break}r.have=0,r.mode=U;case U:for(;r.have<r.ncode;){for(;ue<3;){if(0===se)break e;se--,ae+=ee[re++]<<ue,ue+=8}r.lens[Te[r.have++]]=7&ae,ae>>>=3,ue-=3}for(;r.have<19;)r.lens[Te[r.have++]]=0;if(r.lencode=r.lendyn,r.lenbits=7,Ee={bits:r.lenbits},xe=a(u,r.lens,0,19,r.lencode,0,r.work,Ee),r.lenbits=Ee.bits,xe){e.msg="invalid code lengths set",r.mode=X;break}r.have=0,r.mode=z;case z:for(;r.have<r.nlen+r.ndist;){for(;me=(Se=r.lencode[ae&(1<<r.lenbits)-1])>>>16&255,we=65535&Se,!((ge=Se>>>24)<=ue);){if(0===se)break e;se--,ae+=ee[re++]<<ue,ue+=8}if(we<16)ae>>>=ge,ue-=ge,r.lens[r.have++]=we;else{if(16===we){for(ke=ge+2;ue<ke;){if(0===se)break e;se--,ae+=ee[re++]<<ue,ue+=8}if(ae>>>=ge,ue-=ge,0===r.have){e.msg="invalid bit length repeat",r.mode=X;break}Re=r.lens[r.have-1],fe=3+(3&ae),ae>>>=2,ue-=2}else if(17===we){for(ke=ge+3;ue<ke;){if(0===se)break e;se--,ae+=ee[re++]<<ue,ue+=8}ue-=ge,Re=0,fe=3+(7&(ae>>>=ge)),ae>>>=3,ue-=3}else{for(ke=ge+7;ue<ke;){if(0===se)break e;se--,ae+=ee[re++]<<ue,ue+=8}ue-=ge,Re=0,fe=11+(127&(ae>>>=ge)),ae>>>=7,ue-=7}if(r.have+fe>r.nlen+r.ndist){e.msg="invalid bit length repeat",r.mode=X;break}for(;fe--;)r.lens[r.have++]=Re}}if(r.mode===X)break;if(0===r.lens[256]){e.msg="invalid code -- missing end-of-block",r.mode=X;break}if(r.lenbits=9,Ee={bits:r.lenbits},xe=a(h,r.lens,0,r.nlen,r.lencode,0,r.work,Ee),r.lenbits=Ee.bits,xe){e.msg="invalid literal/lengths set",r.mode=X;break}if(r.distbits=6,r.distcode=r.distdyn,Ee={bits:r.distbits},xe=a(c,r.lens,r.nlen,r.ndist,r.distcode,0,r.work,Ee),r.distbits=Ee.bits,xe){e.msg="invalid distances set",r.mode=X;break}if(r.mode=M,t===d)break e;case M:r.mode=W;case W:if(se>=6&&oe>=258){e.next_out=ie,e.avail_out=oe,e.next_in=re,e.avail_in=se,r.hold=ae,r.bits=ue,o(e,ce),ie=e.next_out,te=e.output,oe=e.avail_out,re=e.next_in,ee=e.input,se=e.avail_in,ae=r.hold,ue=r.bits,r.mode===q&&(r.back=-1);break}for(r.back=0;me=(Se=r.lencode[ae&(1<<r.lenbits)-1])>>>16&255,we=65535&Se,!((ge=Se>>>24)<=ue);){if(0===se)break e;se--,ae+=ee[re++]<<ue,ue+=8}if(me&&0==(240&me)){for(ye=ge,be=me,ve=we;me=(Se=r.lencode[ve+((ae&(1<<ye+be)-1)>>ye)])>>>16&255,we=65535&Se,!(ye+(ge=Se>>>24)<=ue);){if(0===se)break e;se--,ae+=ee[re++]<<ue,ue+=8}ae>>>=ye,ue-=ye,r.back+=ye}if(ae>>>=ge,ue-=ge,r.back+=ge,r.length=we,0===me){r.mode=G;break}if(32&me){r.back=-1,r.mode=q;break}if(64&me){e.msg="invalid literal/length code",r.mode=X;break}r.extra=15&me,r.mode=F;case F:if(r.extra){for(ke=r.extra;ue<ke;){if(0===se)break e;se--,ae+=ee[re++]<<ue,ue+=8}r.length+=ae&(1<<r.extra)-1,ae>>>=r.extra,ue-=r.extra,r.back+=r.extra}r.was=r.length,r.mode=H;case H:for(;me=(Se=r.distcode[ae&(1<<r.distbits)-1])>>>16&255,we=65535&Se,!((ge=Se>>>24)<=ue);){if(0===se)break e;se--,ae+=ee[re++]<<ue,ue+=8}if(0==(240&me)){for(ye=ge,be=me,ve=we;me=(Se=r.distcode[ve+((ae&(1<<ye+be)-1)>>ye)])>>>16&255,we=65535&Se,!(ye+(ge=Se>>>24)<=ue);){if(0===se)break e;se--,ae+=ee[re++]<<ue,ue+=8}ae>>>=ye,ue-=ye,r.back+=ye}if(ae>>>=ge,ue-=ge,r.back+=ge,64&me){e.msg="invalid distance code",r.mode=X;break}r.offset=we,r.extra=15&me,r.mode=Z;case Z:if(r.extra){for(ke=r.extra;ue<ke;){if(0===se)break e;se--,ae+=ee[re++]<<ue,ue+=8}r.offset+=ae&(1<<r.extra)-1,ae>>>=r.extra,ue-=r.extra,r.back+=r.extra}if(r.offset>r.dmax){e.msg="invalid distance too far back",r.mode=X;break}r.mode=$;case $:if(0===oe)break e;if(fe=ce-oe,r.offset>fe){if((fe=r.offset-fe)>r.whave&&r.sane){e.msg="invalid distance too far back",r.mode=X;break}fe>r.wnext?(fe-=r.wnext,pe=r.wsize-fe):pe=r.wnext-fe,fe>r.length&&(fe=r.length),_e=r.window}else _e=te,pe=ie-r.offset,fe=r.length;fe>oe&&(fe=oe),oe-=fe,r.length-=fe;do{te[ie++]=_e[pe++]}while(--fe);0===r.length&&(r.mode=W);break;case G:if(0===oe)break e;te[ie++]=r.length,oe--,r.mode=W;break;case Y:if(r.wrap){for(;ue<32;){if(0===se)break e;se--,ae|=ee[re++]<<ue,ue+=8}if(ce-=oe,e.total_out+=ce,r.total+=ce,ce&&(e.adler=r.check=r.flags?s(r.check,te,ce,ie-ce):i(r.check,te,ce,ie-ce)),ce=oe,(r.flags?ae:ne(ae))!==r.check){e.msg="incorrect data check",r.mode=X;break}ae=0,ue=0}r.mode=K;case K:if(r.wrap&&r.flags){for(;ue<32;){if(0===se)break e;se--,ae+=ee[re++]<<ue,ue+=8}if(ae!==(4294967295&r.total)){e.msg="incorrect length check",r.mode=X;break}ae=0,ue=0}r.mode=V;case V:xe=_;break e;case X:xe=w;break e;case J:return y;case Q:default:return m}return e.next_out=ie,e.avail_out=oe,e.next_in=re,e.avail_in=se,r.hold=ae,r.bits=ue,(r.wsize||ce!==e.avail_out&&r.mode<X&&(r.mode<Y||t!==f))&&de(e,e.output,e.next_out,ce-e.avail_out)?(r.mode=J,y):(he-=e.avail_in,ce-=e.avail_out,e.total_in+=he,e.total_out+=ce,r.total+=ce,r.wrap&&ce&&(e.adler=r.check=r.flags?s(r.check,te,ce,e.next_out-ce):i(r.check,te,ce,e.next_out-ce)),e.data_type=r.bits+(r.last?64:0)+(r.mode===q?128:0)+(r.mode===M||r.mode===j?256:0),(0===he&&0===ce||t===f)&&xe===p&&(xe=b),xe)},t.inflateEnd=function(e){if(!e||!e.state)return m;var t=e.state;return t.window&&(t.window=null),e.state=null,p},t.inflateGetHeader=function(e,t){var r;return e&&e.state?0==(2&(r=e.state).wrap)?m:(r.head=t,t.done=!1,p):m},t.inflateSetDictionary=function(e,t){var r,n=t.length;return e&&e.state?0!==(r=e.state).wrap&&r.mode!==L?m:r.mode===L&&i(1,t,n,0)!==r.check?w:de(e,t,n,n)?(r.mode=J,y):(r.havedict=1,p):m},t.inflateInfo="pako inflate (from Nodeca project)"},function(e,t,r){(function(t){const n=r(10),i=n.fs,s=n.untildify,o=t.from("1f8b08","hex"),a=o.length;e.exports=class{static async isGzipped(e){if(null==e)throw new Error(`The filePath path is ${e}`);e=s(e);const r=await i.open(e,"r"),n=t.allocUnsafe(3);await i.read(r,n,0,3,void 0),await i.close(r);let u=0,h=!0;if(a!==n.length)return!1;for(;u<a;++u)if(o[u]!==n[u]){h=!1;break}return h}static isGzippedSync(e){if(null==e)throw new Error(`The filePath path is ${e}`);e=s(e);const r=i.openSync(e,"r"),n=t.allocUnsafe(3);i.readSync(r,n,0,3,void 0),i.closeSync(r);let u=0,h=!0;if(a!==n.length)return!1;for(;u<a;++u)if(o[u]!==n[u]){h=!1;break}return h}}}).call(this,r(0).Buffer)},function(e,t,r){var n,i,s=r(96),o=r(97),a=0,u=0;e.exports=function(e,t,r){var h=t&&r||0,c=t||[],f=(e=e||{}).node||n,l=void 0!==e.clockseq?e.clockseq:i;if(null==f||null==l){var d=s();null==f&&(f=n=[1|d[0],d[1],d[2],d[3],d[4],d[5]]),null==l&&(l=i=16383&(d[6]<<8|d[7]))}var p=void 0!==e.msecs?e.msecs:(new Date).getTime(),_=void 0!==e.nsecs?e.nsecs:u+1,g=p-a+(_-u)/1e4;if(g<0&&void 0===e.clockseq&&(l=l+1&16383),(g<0||p>a)&&void 0===e.nsecs&&(_=0),_>=1e4)throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");a=p,u=_,i=l;var m=(1e4*(268435455&(p+=122192928e5))+_)%4294967296;c[h++]=m>>>24&255,c[h++]=m>>>16&255,c[h++]=m>>>8&255,c[h++]=255&m;var w=p/4294967296*1e4&268435455;c[h++]=w>>>8&255,c[h++]=255&w,c[h++]=w>>>24&15|16,c[h++]=w>>>16&255,c[h++]=l>>>8|128,c[h++]=255&l;for(var y=0;y<6;++y)c[h+y]=f[y];return t||o(c)}},function(e,t){var r=Object.prototype;e.exports=function(e){var t=e&&e.constructor;return e===("function"==typeof t&&t.prototype||r)}},function(e,t,r){var n=r(17),i=r(55),s="[object AsyncFunction]",o="[object Function]",a="[object GeneratorFunction]",u="[object Proxy]";e.exports=function(e){if(!i(e))return!1;var t=n(e);return t==o||t==a||t==s||t==u}},function(e,t,r){(function(t){var r="object"==typeof t&&t&&t.Object===Object&&t;e.exports=r}).call(this,r(1))},function(e,t){e.exports=function(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)}},function(e,t){var r=Function.prototype.toString;e.exports=function(e){if(null!=e){try{return r.call(e)}catch(e){}try{return e+""}catch(e){}}return""}},function(e,t){var r=Array.isArray;e.exports=r},function(e,t){var r=9007199254740991;e.exports=function(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=r}},function(e,t,r){(function(e){t.fetch=a(e.fetch)&&a(e.ReadableStream),t.writableStream=a(e.WritableStream),t.abortController=a(e.AbortController),t.blobConstructor=!1;try{new Blob([new ArrayBuffer(1)]),t.blobConstructor=!0}catch(e){}var r;function n(){if(void 0!==r)return r;if(e.XMLHttpRequest){r=new e.XMLHttpRequest;try{r.open("GET",e.XDomainRequest?"/":"https://example.com")}catch(e){r=null}}else r=null;return r}function i(e){var t=n();if(!t)return!1;try{return t.responseType=e,t.responseType===e}catch(e){}return!1}var s=void 0!==e.ArrayBuffer,o=s&&a(e.ArrayBuffer.prototype.slice);function a(e){return"function"==typeof e}t.arraybuffer=t.fetch||s&&i("arraybuffer"),t.msstream=!t.fetch&&o&&i("ms-stream"),t.mozchunkedarraybuffer=!t.fetch&&s&&i("moz-chunked-arraybuffer"),t.overrideMimeType=t.fetch||!!n()&&a(n().overrideMimeType),t.vbArray=a(e.VBArray),r=null}).call(this,r(1))},function(e,t,r){(function(e,n,i){var s=r(59),o=r(4),a=r(11),u=t.readyStates={UNSENT:0,OPENED:1,HEADERS_RECEIVED:2,LOADING:3,DONE:4},h=t.IncomingMessage=function(t,r,o,u){var h=this;if(a.Readable.call(h),h._mode=o,h.headers={},h.rawHeaders=[],h.trailers={},h.rawTrailers=[],h.on("end",function(){e.nextTick(function(){h.emit("close")})}),"fetch"===o){if(h._fetchResponse=r,h.url=r.url,h.statusCode=r.status,h.statusMessage=r.statusText,r.headers.forEach(function(e,t){h.headers[t.toLowerCase()]=e,h.rawHeaders.push(t,e)}),s.writableStream){var c=new WritableStream({write:function(e){return new Promise(function(t,r){h._destroyed?r():h.push(new n(e))?t():h._resumeFetch=t})},close:function(){i.clearTimeout(u),h._destroyed||h.push(null)},abort:function(e){h._destroyed||h.emit("error",e)}});try{return void r.body.pipeTo(c).catch(function(e){i.clearTimeout(u),h._destroyed||h.emit("error",e)})}catch(e){}}var f=r.body.getReader();!function e(){f.read().then(function(t){if(!h._destroyed){if(t.done)return i.clearTimeout(u),void h.push(null);h.push(new n(t.value)),e()}}).catch(function(e){i.clearTimeout(u),h._destroyed||h.emit("error",e)})}()}else{if(h._xhr=t,h._pos=0,h.url=t.responseURL,h.statusCode=t.status,h.statusMessage=t.statusText,t.getAllResponseHeaders().split(/\r?\n/).forEach(function(e){var t=e.match(/^([^:]+):\s*(.*)/);if(t){var r=t[1].toLowerCase();"set-cookie"===r?(void 0===h.headers[r]&&(h.headers[r]=[]),h.headers[r].push(t[2])):void 0!==h.headers[r]?h.headers[r]+=", "+t[2]:h.headers[r]=t[2],h.rawHeaders.push(t[1],t[2])}}),h._charset="x-user-defined",!s.overrideMimeType){var l=h.rawHeaders["mime-type"];if(l){var d=l.match(/;\s*charset=([^;])(;|$)/);d&&(h._charset=d[1].toLowerCase())}h._charset||(h._charset="utf-8")}}};o(h,a.Readable),h.prototype._read=function(){var e=this._resumeFetch;e&&(this._resumeFetch=null,e())},h.prototype._onXHRProgress=function(){var e=this,t=e._xhr,r=null;switch(e._mode){case"text:vbarray":if(t.readyState!==u.DONE)break;try{r=new i.VBArray(t.responseBody).toArray()}catch(e){}if(null!==r){e.push(new n(r));break}case"text":try{r=t.responseText}catch(t){e._mode="text:vbarray";break}if(r.length>e._pos){var s=r.substr(e._pos);if("x-user-defined"===e._charset){for(var o=new n(s.length),a=0;a<s.length;a++)o[a]=255&s.charCodeAt(a);e.push(o)}else e.push(s,e._charset);e._pos=r.length}break;case"arraybuffer":if(t.readyState!==u.DONE||!t.response)break;r=t.response,e.push(new n(new Uint8Array(r)));break;case"moz-chunked-arraybuffer":if(r=t.response,t.readyState!==u.LOADING||!r)break;e.push(new n(new Uint8Array(r)));break;case"ms-stream":if(r=t.response,t.readyState!==u.LOADING)break;var h=new i.MSStreamReader;h.onprogress=function(){h.result.byteLength>e._pos&&(e.push(new n(new Uint8Array(h.result.slice(e._pos)))),e._pos=h.result.byteLength)},h.onload=function(){e.push(null)},h.readAsArrayBuffer(r)}e._xhr.readyState===u.DONE&&"ms-stream"!==e._mode&&e.push(null)}}).call(this,r(2),r(0).Buffer,r(1))},function(e,t){var r=RegExp("[\\u200d\\ud800-\\udfff\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff\\ufe0e\\ufe0f]");e.exports=function(e){return r.test(e)}},function(e,t,r){const{URL:n}=r(18);e.exports={httpRequestPath:function(e){return e instanceof n||(e=new n(e)),`${e.pathname}${e.search?`?${e.searchParams.toString()}`:""}${e.hash?e.hash:""}`}}},function(e,t,r){const{STATUS_CODES:n}=r(35),{URL:i}=r(18),{canReplayProtocols:s,SPACE:o,HTTP1D1:a,H2Method:u}=r(31),{httpRequestPath:h}=r(62),{CRLF:c}=r(3),{stringifyHeaders:f}=r(36),l=`${c}${c}`;class d{constructor(){this.requestId=void 0,this._url=void 0,this.urlFragment=void 0,this.method=void 0,this.protocol=void 0,this.status=void 0,this.statusText=void 0,this.postData=void 0,this.requestHeaders=void 0,this.requestHeaders_=void 0,this.requestHeadersText=void 0,this.responseHeaders=void 0,this.responseHeadersText=void 0,this.getBody=!1,this.hasPostData=!1}static fromRequest(e){const t=new d;return t.requestId=e.requestId,t._url=e.request.url,t.urlFragment=e.request.urlFragment,t.method=e.request.method,t.requestHeaders_=e.request.headers,t.postData=e.request.postData,t.hasPostData=e.request.hasPostData,t}static fromRedir(e){const t=new d;return t.requestId=e.requestId,t._url=e.redirectResponse.url,t.method=e.request.method,t.requestHeaders=e.redirectResponse.requestHeaders,t.requestHeadersText=e.redirectResponse.requestHeadersText,t.responseHeaders=e.redirectResponse.headers,t.responseHeadersText=e.redirectResponse.headersText,t.status=e.redirectResponse.status,t.statusText=e.redirectResponse.statusText,t.protocol=e.redirectResponse.protocol,t}static fromResponse(e){const t=new d;return t.requestId=e.requestId,t._url=e.response.url,t.requestHeaders=e.response.requestHeaders,t.requestHeadersText=e.response.requestHeadersText,t.responseHeaders=e.response.headers,t.responseHeadersText=e.response.headersText,t.status=e.response.status,t.statusText=e.response.statusText,t.protocol=e.response.protocol,t.getBody=!0,t}addResponse(e,t=!0){this._url=this._url||e.url,this.requestHeaders=e.requestHeaders,this.requestHeadersText=e.requestHeadersText,this.responseHeaders=e.headers,this.responseHeadersText=e.headersText,this.status=e.status,this.statusText=e.statusText,this.protocol=e.protocol,this.getBody=t}get url(){return null!=this.urlFragment?this._url+this.urlFragment:this._url}getParsedURL(){return new i(this.url)}_serializeRequestHeadersText(){const e=this.requestHeadersText.indexOf(c);let t=this.requestHeadersText.substring(0,e);const r=this.requestHeadersText.substring(e),n=t.substring(t.lastIndexOf(o)+1);return s.has(n)||(t=t.replace(n,a)),r.substring(r.length-4)===l?t+r:t+r+c}_getReqHeaderObj(){return null!=this.requestHeaders?this.requestHeaders:null!=this.requestHeaders_?this.requestHeaders_:null}_ensureProto(){null!=this.protocol&&s.has(this.protocol.toUpperCase())||(this.protocol=a)}_serializeRequestHeadersObj(){this._checkMethod(),this._ensureProto();const e=this.getParsedURL(),t=this._getReqHeaderObj(),r=h(e),n=`${this.method} ${r} ${this.protocol}${c}`;return null!=t?(null==t.host&&null==t.Host&&(t.Host=e.host),n+f(t)):n+`Host: ${e.host}${c}${c}`}serializeRequestHeaders(){return null!=this.requestHeadersText?this._serializeRequestHeadersText():this._serializeRequestHeadersObj()}serializeResponseHeaders(){let e;if(null!=this.responseHeadersText){const t=this.responseHeadersText.substring(0,this.responseHeadersText.indexOf(o));return(e=s.has(t)?this.responseHeadersText:this.responseHeadersText.replace(t,a)).substring(e.length-4)===l?e:e+c}return null!=this.responseHeaders&&(this._ensureProto(),this.statusText||(this.statusText=n[this.status]),e=`${this.protocol} ${this.status} ${this.statusText}${c}${f(this.responseHeaders)}`),e}canSerializeResponse(){return 0!==this.url.indexOf("data:")&&(null!=this.responseHeadersText||null!=this.status&&null!=this.protocol&&null!=this.responseHeaders)}_checkMethod(){if(!this.method){let e=!1;if(this.requestHeaders){let t=this.requestHeaders[u];t&&(this.method=t,e=!0)}if(this.responseHeaders){let t=this.responseHeaders[u];t&&(this.method=t,e=!0)}!e&&this.requestHeadersText&&this._methProtoFromReqHeadText(this.requestHeadersText),null==this.method&&(this.method=null!=this.postData||this.hasPostData?"POST":"GET")}}_methProtoFromReqHeadText(e){if(e){let t=e.substr(0,e.indexOf(c));if(t){let e=t.split(o);e&&(this.method=e[0],this.protocol||(this.protocol=this._correctProtocol(e[2])))}}}_correctProtocol(e){let t;return e?(t=e.toUpperCase(),t=s.has(t)?t:a):t=a,this.protocol||(this.protocol=t),t}}e.exports=d},function(e,t,r){const n=r(51),i=r(63),s=Symbol("is_request"),o=Symbol("is_redirection"),a=Symbol("is_response");function u(e){return null!=e.redirectResponse?o:null!=e.request?s:a}class h{constructor(e){this.requestId=e.requestId,this._reqs=new Map;let t=u(e);if(t===o){let t=i.fromRedir(e),r=i.fromRequest(e);this._reqs.set(t.url,t),this._reqs.set(r.url,r)}else t===s?this._reqs.set(e.request.url,i.fromRequest(e)):this._reqs.set(e.response.url,i.fromResponse(e))}static newOne(e){return new h(e)}addRequestInfo(e){let t=u(e);if(t===o){this._reqs.has(e.redirectResponse.url)?this._reqs.get(e.redirectResponse.url).addResponse(e.redirectResponse,!1):this._reqs.set(e.redirectResponse.url,i.fromRedir(e)),this._reqs.set(e.request.url,i.fromRequest(e))}else t===s?this._reqs.has(e.request.url)?this._reqs.set(`${e.request.url}${n()}`,i.fromRequest(e)):this._reqs.set(e.request.url,i.fromRequest(e)):this._reqs.has(e.response.url)?this._reqs.get(e.response.url).addResponse(e.response):this._reqs.set(e.response.url,i.fromResponse(e))}[Symbol.iterator](){return this._reqs.values()}url(){let e=Array.from(this._reqs.keys());return 1===e.length?e[0]:e}keys(){return this._reqs.keys()}values(){return this._reqs.values()}}e.exports=h},function(e,t,r){"use strict";var n=r(5),i=!0,s=!0;try{String.fromCharCode.apply(null,[0])}catch(e){i=!1}try{String.fromCharCode.apply(null,new Uint8Array(1))}catch(e){s=!1}for(var o=new n.Buf8(256),a=0;a<256;a++)o[a]=a>=252?6:a>=248?5:a>=240?4:a>=224?3:a>=192?2:1;function u(e,t){if(t<65534&&(e.subarray&&s||!e.subarray&&i))return String.fromCharCode.apply(null,n.shrinkBuf(e,t));for(var r="",o=0;o<t;o++)r+=String.fromCharCode(e[o]);return r}o[254]=o[254]=1,t.string2buf=function(e){var t,r,i,s,o,a=e.length,u=0;for(s=0;s<a;s++)55296==(64512&(r=e.charCodeAt(s)))&&s+1<a&&56320==(64512&(i=e.charCodeAt(s+1)))&&(r=65536+(r-55296<<10)+(i-56320),s++),u+=r<128?1:r<2048?2:r<65536?3:4;for(t=new n.Buf8(u),o=0,s=0;o<u;s++)55296==(64512&(r=e.charCodeAt(s)))&&s+1<a&&56320==(64512&(i=e.charCodeAt(s+1)))&&(r=65536+(r-55296<<10)+(i-56320),s++),r<128?t[o++]=r:r<2048?(t[o++]=192|r>>>6,t[o++]=128|63&r):r<65536?(t[o++]=224|r>>>12,t[o++]=128|r>>>6&63,t[o++]=128|63&r):(t[o++]=240|r>>>18,t[o++]=128|r>>>12&63,t[o++]=128|r>>>6&63,t[o++]=128|63&r);return t},t.buf2binstring=function(e){return u(e,e.length)},t.binstring2buf=function(e){for(var t=new n.Buf8(e.length),r=0,i=t.length;r<i;r++)t[r]=e.charCodeAt(r);return t},t.buf2string=function(e,t){var r,n,i,s,a=t||e.length,h=new Array(2*a);for(n=0,r=0;r<a;)if((i=e[r++])<128)h[n++]=i;else if((s=o[i])>4)h[n++]=65533,r+=s-1;else{for(i&=2===s?31:3===s?15:7;s>1&&r<a;)i=i<<6|63&e[r++],s--;s>1?h[n++]=65533:i<65536?h[n++]=i:(i-=65536,h[n++]=55296|i>>10&1023,h[n++]=56320|1023&i)}return u(h,n)},t.utf8border=function(e,t){var r;for((t=t||e.length)>e.length&&(t=e.length),r=t-1;r>=0&&128==(192&e[r]);)r--;return r<0?t:0===r?t:r+o[e[r]]>t?r:t}},function(e,t,r){"use strict";const{WARCStreamTransform:n,AutoWARCParser:i,WARCGzParser:s,WARCParser:o}=r(67),{CRIExtraWARCGenerator:a,ElectronWARCWriter:u,PuppeteerCDPWARCGenerator:h,PuppeteerWARCGenerator:c,RemoteChromeWARCWriter:f,WARCWriterBase:l}=r(93),{CRIExtraCapturer:d,ElectronCapturer:p,PuppeteerCapturer:_,PuppeteerCDPCapturer:g,RemoteChromeCapturer:m,RequestHandler:w}=r(159);t.AutoWARCParser=i,t.CRIExtraCapturer=d,t.CRIExtraWARCGenerator=a,t.ElectronCapturer=p,t.ElectronWARCWriter=u,t.PuppeteerCDPCapturer=g,t.PuppeteerCDPWARCGenerator=h,t.PuppeteerCapturer=_,t.PuppeteerWARCGenerator=c,t.RemoteChromeCapturer=m,t.RemoteChromeWARCWriter=f,t.RequestHandler=w,t.WARCGzParser=s,t.WARCParser=o,t.WARCStreamTransform=n,t.WARCWriterBase=l,t.RequestLibWARCWriter=r(165),r(14)&&(t.recordIterator=r(15)),t.stream=r(25),t.zlib=r(19),t.pako=r(166)},function(e,t,r){t.AutoWARCParser=r(68),t.GzipDetector=r(50),t.WARCGzParser=r(91),t.WARCParser=r(92),t.WARCStreamTransform=r(13),r(14)&&(t.recordIterator=r(15))},function(e,t,r){const n=r(10).getStream,i=r(19),s=r(22),o=r(13),a=r(50),u=r(14);e.exports=class extends s{constructor(e){if(super(),this._wp=e,this._parsing=!1,this._onRecord=this._onRecord.bind(this),this._onEnd=this._onEnd.bind(this),this._onError=this._onError.bind(this),u){const e=r(15);this[Symbol.asyncIterator]=()=>e(this._getStream())}}start(){let e=!1;if(!this._parsing){if(null==this._wp)throw new Error("The supplied path to the WARC file is null/undefined");this._parsing=!0,this._getStream().pipe(new o).on("data",this._onRecord).on("error",this._onError).on("end",this._onEnd),e=!0}return e}parseWARC(e){return this._parsing||(this._wp=e||this._wp),this.start()}_onRecord(e){this.emit("record",e)}_onEnd(){this._parsing=!1,this.emit("done")}_onError(e){this.emit("error",e)}_getStream(){const e=a.isGzippedSync(this._wp),t=n(this._wp,!0);return e?t.pipe(i.createGunzip()):t}}},function(e,t,r){"use strict";t.byteLength=function(e){var t=h(e),r=t[0],n=t[1];return 3*(r+n)/4-n},t.toByteArray=function(e){for(var t,r=h(e),n=r[0],o=r[1],a=new s(function(e,t,r){return 3*(t+r)/4-r}(0,n,o)),u=0,c=o>0?n-4:n,f=0;f<c;f+=4)t=i[e.charCodeAt(f)]<<18|i[e.charCodeAt(f+1)]<<12|i[e.charCodeAt(f+2)]<<6|i[e.charCodeAt(f+3)],a[u++]=t>>16&255,a[u++]=t>>8&255,a[u++]=255&t;2===o&&(t=i[e.charCodeAt(f)]<<2|i[e.charCodeAt(f+1)]>>4,a[u++]=255&t);1===o&&(t=i[e.charCodeAt(f)]<<10|i[e.charCodeAt(f+1)]<<4|i[e.charCodeAt(f+2)]>>2,a[u++]=t>>8&255,a[u++]=255&t);return a},t.fromByteArray=function(e){for(var t,r=e.length,i=r%3,s=[],o=0,a=r-i;o<a;o+=16383)s.push(c(e,o,o+16383>a?a:o+16383));1===i?(t=e[r-1],s.push(n[t>>2]+n[t<<4&63]+"==")):2===i&&(t=(e[r-2]<<8)+e[r-1],s.push(n[t>>10]+n[t>>4&63]+n[t<<2&63]+"="));return s.join("")};for(var n=[],i=[],s="undefined"!=typeof Uint8Array?Uint8Array:Array,o="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",a=0,u=o.length;a<u;++a)n[a]=o[a],i[o.charCodeAt(a)]=a;function h(e){var t=e.length;if(t%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var r=e.indexOf("=");return-1===r&&(r=t),[r,r===t?0:4-r%4]}function c(e,t,r){for(var i,s,o=[],a=t;a<r;a+=3)i=(e[a]<<16&16711680)+(e[a+1]<<8&65280)+(255&e[a+2]),o.push(n[(s=i)>>18&63]+n[s>>12&63]+n[s>>6&63]+n[63&s]);return o.join("")}i["-".charCodeAt(0)]=62,i["_".charCodeAt(0)]=63},function(e,t){t.read=function(e,t,r,n,i){var s,o,a=8*i-n-1,u=(1<<a)-1,h=u>>1,c=-7,f=r?i-1:0,l=r?-1:1,d=e[t+f];for(f+=l,s=d&(1<<-c)-1,d>>=-c,c+=a;c>0;s=256*s+e[t+f],f+=l,c-=8);for(o=s&(1<<-c)-1,s>>=-c,c+=n;c>0;o=256*o+e[t+f],f+=l,c-=8);if(0===s)s=1-h;else{if(s===u)return o?NaN:1/0*(d?-1:1);o+=Math.pow(2,n),s-=h}return(d?-1:1)*o*Math.pow(2,s-n)},t.write=function(e,t,r,n,i,s){var o,a,u,h=8*s-i-1,c=(1<<h)-1,f=c>>1,l=23===i?Math.pow(2,-24)-Math.pow(2,-77):0,d=n?0:s-1,p=n?1:-1,_=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(a=isNaN(t)?1:0,o=c):(o=Math.floor(Math.log(t)/Math.LN2),t*(u=Math.pow(2,-o))<1&&(o--,u*=2),(t+=o+f>=1?l/u:l*Math.pow(2,1-f))*u>=2&&(o++,u/=2),o+f>=c?(a=0,o=c):o+f>=1?(a=(t*u-1)*Math.pow(2,i),o+=f):(a=t*Math.pow(2,f-1)*Math.pow(2,i),o=0));i>=8;e[r+d]=255&a,d+=p,a/=256,i-=8);for(o=o<<i|a,h+=i;h>0;e[r+d]=255&o,d+=p,o/=256,h-=8);e[r+d-p]|=128*_}},function(e,t){},function(e,t,r){"use strict";var n=r(21).Buffer,i=r(73);e.exports=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.head=null,this.tail=null,this.length=0}return e.prototype.push=function(e){var t={data:e,next:null};this.length>0?this.tail.next=t:this.head=t,this.tail=t,++this.length},e.prototype.unshift=function(e){var t={data:e,next:this.head};0===this.length&&(this.tail=t),this.head=t,++this.length},e.prototype.shift=function(){if(0!==this.length){var e=this.head.data;return 1===this.length?this.head=this.tail=null:this.head=this.head.next,--this.length,e}},e.prototype.clear=function(){this.head=this.tail=null,this.length=0},e.prototype.join=function(e){if(0===this.length)return"";for(var t=this.head,r=""+t.data;t=t.next;)r+=e+t.data;return r},e.prototype.concat=function(e){if(0===this.length)return n.alloc(0);if(1===this.length)return this.head.data;for(var t,r,i,s=n.allocUnsafe(e>>>0),o=this.head,a=0;o;)t=o.data,r=s,i=a,t.copy(r,i),a+=o.data.length,o=o.next;return s},e}(),i&&i.inspect&&i.inspect.custom&&(e.exports.prototype[i.inspect.custom]=function(){var e=i.inspect({length:this.length});return this.constructor.name+" "+e})},function(e,t){},function(e,t,r){(function(e){var n=void 0!==e&&e||"undefined"!=typeof self&&self||window,i=Function.prototype.apply;function s(e,t){this._id=e,this._clearFn=t}t.setTimeout=function(){return new s(i.call(setTimeout,n,arguments),clearTimeout)},t.setInterval=function(){return new s(i.call(setInterval,n,arguments),clearInterval)},t.clearTimeout=t.clearInterval=function(e){e&&e.close()},s.prototype.unref=s.prototype.ref=function(){},s.prototype.close=function(){this._clearFn.call(n,this._id)},t.enroll=function(e,t){clearTimeout(e._idleTimeoutId),e._idleTimeout=t},t.unenroll=function(e){clearTimeout(e._idleTimeoutId),e._idleTimeout=-1},t._unrefActive=t.active=function(e){clearTimeout(e._idleTimeoutId);var t=e._idleTimeout;t>=0&&(e._idleTimeoutId=setTimeout(function(){e._onTimeout&&e._onTimeout()},t))},r(75),t.setImmediate="undefined"!=typeof self&&self.setImmediate||void 0!==e&&e.setImmediate||this&&this.setImmediate,t.clearImmediate="undefined"!=typeof self&&self.clearImmediate||void 0!==e&&e.clearImmediate||this&&this.clearImmediate}).call(this,r(1))},function(e,t,r){(function(e,t){!function(e,r){"use strict";if(!e.setImmediate){var n,i,s,o,a,u=1,h={},c=!1,f=e.document,l=Object.getPrototypeOf&&Object.getPrototypeOf(e);l=l&&l.setTimeout?l:e,"[object process]"==={}.toString.call(e.process)?n=function(e){t.nextTick(function(){p(e)})}:!function(){if(e.postMessage&&!e.importScripts){var t=!0,r=e.onmessage;return e.onmessage=function(){t=!1},e.postMessage("","*"),e.onmessage=r,t}}()?e.MessageChannel?((s=new MessageChannel).port1.onmessage=function(e){p(e.data)},n=function(e){s.port2.postMessage(e)}):f&&"onreadystatechange"in f.createElement("script")?(i=f.documentElement,n=function(e){var t=f.createElement("script");t.onreadystatechange=function(){p(e),t.onreadystatechange=null,i.removeChild(t),t=null},i.appendChild(t)}):n=function(e){setTimeout(p,0,e)}:(o="setImmediate$"+Math.random()+"$",a=function(t){t.source===e&&"string"==typeof t.data&&0===t.data.indexOf(o)&&p(+t.data.slice(o.length))},e.addEventListener?e.addEventListener("message",a,!1):e.attachEvent("onmessage",a),n=function(t){e.postMessage(o+t,"*")}),l.setImmediate=function(e){"function"!=typeof e&&(e=new Function(""+e));for(var t=new Array(arguments.length-1),r=0;r<t.length;r++)t[r]=arguments[r+1];var i={callback:e,args:t};return h[u]=i,n(u),u++},l.clearImmediate=d}function d(e){delete h[e]}function p(e){if(c)setTimeout(p,0,e);else{var t=h[e];if(t){c=!0;try{!function(e){var t=e.callback,n=e.args;switch(n.length){case 0:t();break;case 1:t(n[0]);break;case 2:t(n[0],n[1]);break;case 3:t(n[0],n[1],n[2]);break;default:t.apply(r,n)}}(t)}finally{d(e),c=!1}}}}}("undefined"==typeof self?void 0===e?this:e:self)}).call(this,r(1),r(2))},function(e,t,r){(function(t){function r(e){try{if(!t.localStorage)return!1}catch(e){return!1}var r=t.localStorage[e];return null!=r&&"true"===String(r).toLowerCase()}e.exports=function(e,t){if(r("noDeprecation"))return e;var n=!1;return function(){if(!n){if(r("throwDeprecation"))throw new Error(t);r("traceDeprecation")?console.trace(t):console.warn(t),n=!0}return e.apply(this,arguments)}}}).call(this,r(1))},function(e,t,r){"use strict";e.exports=s;var n=r(43),i=r(12);function s(e){if(!(this instanceof s))return new s(e);n.call(this,e)}i.inherits=r(4),i.inherits(s,n),s.prototype._transform=function(e,t,r){r(null,e)}},function(e,t,r){e.exports=r(27)},function(e,t,r){e.exports=r(7)},function(e,t,r){e.exports=r(11).Transform},function(e,t,r){e.exports=r(11).PassThrough},function(e,t,r){"use strict";(function(e,n){var i=r(44),s=r(28),o=r(46),a=r(49),u=r(30);for(var h in u)t[h]=u[h];t.NONE=0,t.DEFLATE=1,t.INFLATE=2,t.GZIP=3,t.GUNZIP=4,t.DEFLATERAW=5,t.INFLATERAW=6,t.UNZIP=7;function c(e){if("number"!=typeof e||e<t.DEFLATE||e>t.UNZIP)throw new TypeError("Bad argument");this.dictionary=null,this.err=0,this.flush=0,this.init_done=!1,this.level=0,this.memLevel=0,this.mode=e,this.strategy=0,this.windowBits=0,this.write_in_progress=!1,this.pending_close=!1,this.gzip_id_bytes_read=0}c.prototype.close=function(){this.write_in_progress?this.pending_close=!0:(this.pending_close=!1,i(this.init_done,"close before init"),i(this.mode<=t.UNZIP),this.mode===t.DEFLATE||this.mode===t.GZIP||this.mode===t.DEFLATERAW?o.deflateEnd(this.strm):this.mode!==t.INFLATE&&this.mode!==t.GUNZIP&&this.mode!==t.INFLATERAW&&this.mode!==t.UNZIP||a.inflateEnd(this.strm),this.mode=t.NONE,this.dictionary=null)},c.prototype.write=function(e,t,r,n,i,s,o){return this._write(!0,e,t,r,n,i,s,o)},c.prototype.writeSync=function(e,t,r,n,i,s,o){return this._write(!1,e,t,r,n,i,s,o)},c.prototype._write=function(r,s,o,a,u,h,c,f){if(i.equal(arguments.length,8),i(this.init_done,"write before init"),i(this.mode!==t.NONE,"already finalized"),i.equal(!1,this.write_in_progress,"write already in progress"),i.equal(!1,this.pending_close,"close is pending"),this.write_in_progress=!0,i.equal(!1,void 0===s,"must provide flush value"),this.write_in_progress=!0,s!==t.Z_NO_FLUSH&&s!==t.Z_PARTIAL_FLUSH&&s!==t.Z_SYNC_FLUSH&&s!==t.Z_FULL_FLUSH&&s!==t.Z_FINISH&&s!==t.Z_BLOCK)throw new Error("Invalid flush value");if(null==o&&(o=e.alloc(0),u=0,a=0),this.strm.avail_in=u,this.strm.input=o,this.strm.next_in=a,this.strm.avail_out=f,this.strm.output=h,this.strm.next_out=c,this.flush=s,!r)return this._process(),this._checkError()?this._afterSync():void 0;var l=this;return n.nextTick(function(){l._process(),l._after()}),this},c.prototype._afterSync=function(){var e=this.strm.avail_out,t=this.strm.avail_in;return this.write_in_progress=!1,[t,e]},c.prototype._process=function(){var e=null;switch(this.mode){case t.DEFLATE:case t.GZIP:case t.DEFLATERAW:this.err=o.deflate(this.strm,this.flush);break;case t.UNZIP:switch(this.strm.avail_in>0&&(e=this.strm.next_in),this.gzip_id_bytes_read){case 0:if(null===e)break;if(31!==this.strm.input[e]){this.mode=t.INFLATE;break}if(this.gzip_id_bytes_read=1,e++,1===this.strm.avail_in)break;case 1:if(null===e)break;139===this.strm.input[e]?(this.gzip_id_bytes_read=2,this.mode=t.GUNZIP):this.mode=t.INFLATE;break;default:throw new Error("invalid number of gzip magic number bytes read")}case t.INFLATE:case t.GUNZIP:case t.INFLATERAW:for(this.err=a.inflate(this.strm,this.flush),this.err===t.Z_NEED_DICT&&this.dictionary&&(this.err=a.inflateSetDictionary(this.strm,this.dictionary),this.err===t.Z_OK?this.err=a.inflate(this.strm,this.flush):this.err===t.Z_DATA_ERROR&&(this.err=t.Z_NEED_DICT));this.strm.avail_in>0&&this.mode===t.GUNZIP&&this.err===t.Z_STREAM_END&&0!==this.strm.next_in[0];)this.reset(),this.err=a.inflate(this.strm,this.flush);break;default:throw new Error("Unknown mode "+this.mode)}},c.prototype._checkError=function(){switch(this.err){case t.Z_OK:case t.Z_BUF_ERROR:if(0!==this.strm.avail_out&&this.flush===t.Z_FINISH)return this._error("unexpected end of file"),!1;break;case t.Z_STREAM_END:break;case t.Z_NEED_DICT:return null==this.dictionary?this._error("Missing dictionary"):this._error("Bad dictionary"),!1;default:return this._error("Zlib error"),!1}return!0},c.prototype._after=function(){if(this._checkError()){var e=this.strm.avail_out,t=this.strm.avail_in;this.write_in_progress=!1,this.callback(t,e),this.pending_close&&this.close()}},c.prototype._error=function(e){this.strm.msg&&(e=this.strm.msg),this.onerror(e,this.err),this.write_in_progress=!1,this.pending_close&&this.close()},c.prototype.init=function(e,r,n,s,o){i(4===arguments.length||5===arguments.length,"init(windowBits, level, memLevel, strategy, [dictionary])"),i(e>=8&&e<=15,"invalid windowBits"),i(r>=-1&&r<=9,"invalid compression level"),i(n>=1&&n<=9,"invalid memlevel"),i(s===t.Z_FILTERED||s===t.Z_HUFFMAN_ONLY||s===t.Z_RLE||s===t.Z_FIXED||s===t.Z_DEFAULT_STRATEGY,"invalid strategy"),this._init(r,e,n,s,o),this._setDictionary()},c.prototype.params=function(){throw new Error("deflateParams Not supported")},c.prototype.reset=function(){this._reset(),this._setDictionary()},c.prototype._init=function(e,r,n,i,u){switch(this.level=e,this.windowBits=r,this.memLevel=n,this.strategy=i,this.flush=t.Z_NO_FLUSH,this.err=t.Z_OK,this.mode!==t.GZIP&&this.mode!==t.GUNZIP||(this.windowBits+=16),this.mode===t.UNZIP&&(this.windowBits+=32),this.mode!==t.DEFLATERAW&&this.mode!==t.INFLATERAW||(this.windowBits=-1*this.windowBits),this.strm=new s,this.mode){case t.DEFLATE:case t.GZIP:case t.DEFLATERAW:this.err=o.deflateInit2(this.strm,this.level,t.Z_DEFLATED,this.windowBits,this.memLevel,this.strategy);break;case t.INFLATE:case t.GUNZIP:case t.INFLATERAW:case t.UNZIP:this.err=a.inflateInit2(this.strm,this.windowBits);break;default:throw new Error("Unknown mode "+this.mode)}this.err!==t.Z_OK&&this._error("Init error"),this.dictionary=u,this.write_in_progress=!1,this.init_done=!0},c.prototype._setDictionary=function(){if(null!=this.dictionary){switch(this.err=t.Z_OK,this.mode){case t.DEFLATE:case t.DEFLATERAW:this.err=o.deflateSetDictionary(this.strm,this.dictionary)}this.err!==t.Z_OK&&this._error("Failed to set dictionary")}},c.prototype._reset=function(){switch(this.err=t.Z_OK,this.mode){case t.DEFLATE:case t.DEFLATERAW:case t.GZIP:this.err=o.deflateReset(this.strm);break;case t.INFLATE:case t.INFLATERAW:case t.GUNZIP:this.err=a.inflateReset(this.strm)}this.err!==t.Z_OK&&this._error("Failed to reset stream")},t.Zlib=c}).call(this,r(0).Buffer,r(2))},function(e,t,r){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var n=Object.getOwnPropertySymbols,i=Object.prototype.hasOwnProperty,s=Object.prototype.propertyIsEnumerable;e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},r=0;r<10;r++)t["_"+String.fromCharCode(r)]=r;if("0123456789"!==Object.getOwnPropertyNames(t).map(function(e){return t[e]}).join(""))return!1;var n={};return"abcdefghijklmnopqrst".split("").forEach(function(e){n[e]=e}),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},n)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var r,o,a=function(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}(e),u=1;u<arguments.length;u++){for(var h in r=Object(arguments[u]))i.call(r,h)&&(a[h]=r[h]);if(n){o=n(r);for(var c=0;c<o.length;c++)s.call(r,o[c])&&(a[o[c]]=r[o[c]])}}return a}},function(e,t){e.exports=function(e){return e&&"object"==typeof e&&"function"==typeof e.copy&&"function"==typeof e.fill&&"function"==typeof e.readUInt8}},function(e,t,r){"use strict";var n=r(5),i=4,s=0,o=1,a=2;function u(e){for(var t=e.length;--t>=0;)e[t]=0}var h=0,c=1,f=2,l=29,d=256,p=d+1+l,_=30,g=19,m=2*p+1,w=15,y=16,b=7,v=256,R=16,x=17,E=18,k=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0],S=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13],A=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7],T=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15],C=new Array(2*(p+2));u(C);var O=new Array(2*_);u(O);var I=new Array(512);u(I);var L=new Array(256);u(L);var q=new Array(l);u(q);var P,B,j,N=new Array(_);function D(e,t,r,n,i){this.static_tree=e,this.extra_bits=t,this.extra_base=r,this.elems=n,this.max_length=i,this.has_stree=e&&e.length}function U(e,t){this.dyn_tree=e,this.max_code=0,this.stat_desc=t}function z(e){return e<256?I[e]:I[256+(e>>>7)]}function M(e,t){e.pending_buf[e.pending++]=255&t,e.pending_buf[e.pending++]=t>>>8&255}function W(e,t,r){e.bi_valid>y-r?(e.bi_buf|=t<<e.bi_valid&65535,M(e,e.bi_buf),e.bi_buf=t>>y-e.bi_valid,e.bi_valid+=r-y):(e.bi_buf|=t<<e.bi_valid&65535,e.bi_valid+=r)}function F(e,t,r){W(e,r[2*t],r[2*t+1])}function H(e,t){var r=0;do{r|=1&e,e>>>=1,r<<=1}while(--t>0);return r>>>1}function Z(e,t,r){var n,i,s=new Array(w+1),o=0;for(n=1;n<=w;n++)s[n]=o=o+r[n-1]<<1;for(i=0;i<=t;i++){var a=e[2*i+1];0!==a&&(e[2*i]=H(s[a]++,a))}}function $(e){var t;for(t=0;t<p;t++)e.dyn_ltree[2*t]=0;for(t=0;t<_;t++)e.dyn_dtree[2*t]=0;for(t=0;t<g;t++)e.bl_tree[2*t]=0;e.dyn_ltree[2*v]=1,e.opt_len=e.static_len=0,e.last_lit=e.matches=0}function G(e){e.bi_valid>8?M(e,e.bi_buf):e.bi_valid>0&&(e.pending_buf[e.pending++]=e.bi_buf),e.bi_buf=0,e.bi_valid=0}function Y(e,t,r,n){var i=2*t,s=2*r;return e[i]<e[s]||e[i]===e[s]&&n[t]<=n[r]}function K(e,t,r){for(var n=e.heap[r],i=r<<1;i<=e.heap_len&&(i<e.heap_len&&Y(t,e.heap[i+1],e.heap[i],e.depth)&&i++,!Y(t,n,e.heap[i],e.depth));)e.heap[r]=e.heap[i],r=i,i<<=1;e.heap[r]=n}function V(e,t,r){var n,i,s,o,a=0;if(0!==e.last_lit)do{n=e.pending_buf[e.d_buf+2*a]<<8|e.pending_buf[e.d_buf+2*a+1],i=e.pending_buf[e.l_buf+a],a++,0===n?F(e,i,t):(F(e,(s=L[i])+d+1,t),0!==(o=k[s])&&W(e,i-=q[s],o),F(e,s=z(--n),r),0!==(o=S[s])&&W(e,n-=N[s],o))}while(a<e.last_lit);F(e,v,t)}function X(e,t){var r,n,i,s=t.dyn_tree,o=t.stat_desc.static_tree,a=t.stat_desc.has_stree,u=t.stat_desc.elems,h=-1;for(e.heap_len=0,e.heap_max=m,r=0;r<u;r++)0!==s[2*r]?(e.heap[++e.heap_len]=h=r,e.depth[r]=0):s[2*r+1]=0;for(;e.heap_len<2;)s[2*(i=e.heap[++e.heap_len]=h<2?++h:0)]=1,e.depth[i]=0,e.opt_len--,a&&(e.static_len-=o[2*i+1]);for(t.max_code=h,r=e.heap_len>>1;r>=1;r--)K(e,s,r);i=u;do{r=e.heap[1],e.heap[1]=e.heap[e.heap_len--],K(e,s,1),n=e.heap[1],e.heap[--e.heap_max]=r,e.heap[--e.heap_max]=n,s[2*i]=s[2*r]+s[2*n],e.depth[i]=(e.depth[r]>=e.depth[n]?e.depth[r]:e.depth[n])+1,s[2*r+1]=s[2*n+1]=i,e.heap[1]=i++,K(e,s,1)}while(e.heap_len>=2);e.heap[--e.heap_max]=e.heap[1],function(e,t){var r,n,i,s,o,a,u=t.dyn_tree,h=t.max_code,c=t.stat_desc.static_tree,f=t.stat_desc.has_stree,l=t.stat_desc.extra_bits,d=t.stat_desc.extra_base,p=t.stat_desc.max_length,_=0;for(s=0;s<=w;s++)e.bl_count[s]=0;for(u[2*e.heap[e.heap_max]+1]=0,r=e.heap_max+1;r<m;r++)(s=u[2*u[2*(n=e.heap[r])+1]+1]+1)>p&&(s=p,_++),u[2*n+1]=s,n>h||(e.bl_count[s]++,o=0,n>=d&&(o=l[n-d]),a=u[2*n],e.opt_len+=a*(s+o),f&&(e.static_len+=a*(c[2*n+1]+o)));if(0!==_){do{for(s=p-1;0===e.bl_count[s];)s--;e.bl_count[s]--,e.bl_count[s+1]+=2,e.bl_count[p]--,_-=2}while(_>0);for(s=p;0!==s;s--)for(n=e.bl_count[s];0!==n;)(i=e.heap[--r])>h||(u[2*i+1]!==s&&(e.opt_len+=(s-u[2*i+1])*u[2*i],u[2*i+1]=s),n--)}}(e,t),Z(s,h,e.bl_count)}function J(e,t,r){var n,i,s=-1,o=t[1],a=0,u=7,h=4;for(0===o&&(u=138,h=3),t[2*(r+1)+1]=65535,n=0;n<=r;n++)i=o,o=t[2*(n+1)+1],++a<u&&i===o||(a<h?e.bl_tree[2*i]+=a:0!==i?(i!==s&&e.bl_tree[2*i]++,e.bl_tree[2*R]++):a<=10?e.bl_tree[2*x]++:e.bl_tree[2*E]++,a=0,s=i,0===o?(u=138,h=3):i===o?(u=6,h=3):(u=7,h=4))}function Q(e,t,r){var n,i,s=-1,o=t[1],a=0,u=7,h=4;for(0===o&&(u=138,h=3),n=0;n<=r;n++)if(i=o,o=t[2*(n+1)+1],!(++a<u&&i===o)){if(a<h)do{F(e,i,e.bl_tree)}while(0!=--a);else 0!==i?(i!==s&&(F(e,i,e.bl_tree),a--),F(e,R,e.bl_tree),W(e,a-3,2)):a<=10?(F(e,x,e.bl_tree),W(e,a-3,3)):(F(e,E,e.bl_tree),W(e,a-11,7));a=0,s=i,0===o?(u=138,h=3):i===o?(u=6,h=3):(u=7,h=4)}}u(N);var ee=!1;function te(e,t,r,i){W(e,(h<<1)+(i?1:0),3),function(e,t,r,i){G(e),i&&(M(e,r),M(e,~r)),n.arraySet(e.pending_buf,e.window,t,r,e.pending),e.pending+=r}(e,t,r,!0)}t._tr_init=function(e){ee||(function(){var e,t,r,n,i,s=new Array(w+1);for(r=0,n=0;n<l-1;n++)for(q[n]=r,e=0;e<1<<k[n];e++)L[r++]=n;for(L[r-1]=n,i=0,n=0;n<16;n++)for(N[n]=i,e=0;e<1<<S[n];e++)I[i++]=n;for(i>>=7;n<_;n++)for(N[n]=i<<7,e=0;e<1<<S[n]-7;e++)I[256+i++]=n;for(t=0;t<=w;t++)s[t]=0;for(e=0;e<=143;)C[2*e+1]=8,e++,s[8]++;for(;e<=255;)C[2*e+1]=9,e++,s[9]++;for(;e<=279;)C[2*e+1]=7,e++,s[7]++;for(;e<=287;)C[2*e+1]=8,e++,s[8]++;for(Z(C,p+1,s),e=0;e<_;e++)O[2*e+1]=5,O[2*e]=H(e,5);P=new D(C,k,d+1,p,w),B=new D(O,S,0,_,w),j=new D(new Array(0),A,0,g,b)}(),ee=!0),e.l_desc=new U(e.dyn_ltree,P),e.d_desc=new U(e.dyn_dtree,B),e.bl_desc=new U(e.bl_tree,j),e.bi_buf=0,e.bi_valid=0,$(e)},t._tr_stored_block=te,t._tr_flush_block=function(e,t,r,n){var u,h,l=0;e.level>0?(e.strm.data_type===a&&(e.strm.data_type=function(e){var t,r=4093624447;for(t=0;t<=31;t++,r>>>=1)if(1&r&&0!==e.dyn_ltree[2*t])return s;if(0!==e.dyn_ltree[18]||0!==e.dyn_ltree[20]||0!==e.dyn_ltree[26])return o;for(t=32;t<d;t++)if(0!==e.dyn_ltree[2*t])return o;return s}(e)),X(e,e.l_desc),X(e,e.d_desc),l=function(e){var t;for(J(e,e.dyn_ltree,e.l_desc.max_code),J(e,e.dyn_dtree,e.d_desc.max_code),X(e,e.bl_desc),t=g-1;t>=3&&0===e.bl_tree[2*T[t]+1];t--);return e.opt_len+=3*(t+1)+5+5+4,t}(e),u=e.opt_len+3+7>>>3,(h=e.static_len+3+7>>>3)<=u&&(u=h)):u=h=r+5,r+4<=u&&-1!==t?te(e,t,r,n):e.strategy===i||h===u?(W(e,(c<<1)+(n?1:0),3),V(e,C,O)):(W(e,(f<<1)+(n?1:0),3),function(e,t,r,n){var i;for(W(e,t-257,5),W(e,r-1,5),W(e,n-4,4),i=0;i<n;i++)W(e,e.bl_tree[2*T[i]+1],3);Q(e,e.dyn_ltree,t-1),Q(e,e.dyn_dtree,r-1)}(e,e.l_desc.max_code+1,e.d_desc.max_code+1,l+1),V(e,e.dyn_ltree,e.dyn_dtree)),$(e),n&&G(e)},t._tr_tally=function(e,t,r){return e.pending_buf[e.d_buf+2*e.last_lit]=t>>>8&255,e.pending_buf[e.d_buf+2*e.last_lit+1]=255&t,e.pending_buf[e.l_buf+e.last_lit]=255&r,e.last_lit++,0===t?e.dyn_ltree[2*r]++:(e.matches++,t--,e.dyn_ltree[2*(L[r]+d+1)]++,e.dyn_dtree[2*z(t)]++),e.last_lit===e.lit_bufsize-1},t._tr_align=function(e){W(e,c<<1,3),F(e,v,C),function(e){16===e.bi_valid?(M(e,e.bi_buf),e.bi_buf=0,e.bi_valid=0):e.bi_valid>=8&&(e.pending_buf[e.pending++]=255&e.bi_buf,e.bi_buf>>=8,e.bi_valid-=8)}(e)}},function(e,t,r){"use strict";e.exports=function(e,t){var r,n,i,s,o,a,u,h,c,f,l,d,p,_,g,m,w,y,b,v,R,x,E,k,S;r=e.state,n=e.next_in,k=e.input,i=n+(e.avail_in-5),s=e.next_out,S=e.output,o=s-(t-e.avail_out),a=s+(e.avail_out-257),u=r.dmax,h=r.wsize,c=r.whave,f=r.wnext,l=r.window,d=r.hold,p=r.bits,_=r.lencode,g=r.distcode,m=(1<<r.lenbits)-1,w=(1<<r.distbits)-1;e:do{p<15&&(d+=k[n++]<<p,p+=8,d+=k[n++]<<p,p+=8),y=_[d&m];t:for(;;){if(d>>>=b=y>>>24,p-=b,0===(b=y>>>16&255))S[s++]=65535&y;else{if(!(16&b)){if(0==(64&b)){y=_[(65535&y)+(d&(1<<b)-1)];continue t}if(32&b){r.mode=12;break e}e.msg="invalid literal/length code",r.mode=30;break e}v=65535&y,(b&=15)&&(p<b&&(d+=k[n++]<<p,p+=8),v+=d&(1<<b)-1,d>>>=b,p-=b),p<15&&(d+=k[n++]<<p,p+=8,d+=k[n++]<<p,p+=8),y=g[d&w];r:for(;;){if(d>>>=b=y>>>24,p-=b,!(16&(b=y>>>16&255))){if(0==(64&b)){y=g[(65535&y)+(d&(1<<b)-1)];continue r}e.msg="invalid distance code",r.mode=30;break e}if(R=65535&y,p<(b&=15)&&(d+=k[n++]<<p,(p+=8)<b&&(d+=k[n++]<<p,p+=8)),(R+=d&(1<<b)-1)>u){e.msg="invalid distance too far back",r.mode=30;break e}if(d>>>=b,p-=b,R>(b=s-o)){if((b=R-b)>c&&r.sane){e.msg="invalid distance too far back",r.mode=30;break e}if(x=0,E=l,0===f){if(x+=h-b,b<v){v-=b;do{S[s++]=l[x++]}while(--b);x=s-R,E=S}}else if(f<b){if(x+=h+f-b,(b-=f)<v){v-=b;do{S[s++]=l[x++]}while(--b);if(x=0,f<v){v-=b=f;do{S[s++]=l[x++]}while(--b);x=s-R,E=S}}}else if(x+=f-b,b<v){v-=b;do{S[s++]=l[x++]}while(--b);x=s-R,E=S}for(;v>2;)S[s++]=E[x++],S[s++]=E[x++],S[s++]=E[x++],v-=3;v&&(S[s++]=E[x++],v>1&&(S[s++]=E[x++]))}else{x=s-R;do{S[s++]=S[x++],S[s++]=S[x++],S[s++]=S[x++],v-=3}while(v>2);v&&(S[s++]=S[x++],v>1&&(S[s++]=S[x++]))}break}}break}}while(n<i&&s<a);n-=v=p>>3,d&=(1<<(p-=v<<3))-1,e.next_in=n,e.next_out=s,e.avail_in=n<i?i-n+5:5-(n-i),e.avail_out=s<a?a-s+257:257-(s-a),r.hold=d,r.bits=p}},function(e,t,r){"use strict";var n=r(5),i=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0],s=[16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78],o=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0],a=[16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64];e.exports=function(e,t,r,u,h,c,f,l){var d,p,_,g,m,w,y,b,v,R=l.bits,x=0,E=0,k=0,S=0,A=0,T=0,C=0,O=0,I=0,L=0,q=null,P=0,B=new n.Buf16(16),j=new n.Buf16(16),N=null,D=0;for(x=0;x<=15;x++)B[x]=0;for(E=0;E<u;E++)B[t[r+E]]++;for(A=R,S=15;S>=1&&0===B[S];S--);if(A>S&&(A=S),0===S)return h[c++]=20971520,h[c++]=20971520,l.bits=1,0;for(k=1;k<S&&0===B[k];k++);for(A<k&&(A=k),O=1,x=1;x<=15;x++)if(O<<=1,(O-=B[x])<0)return-1;if(O>0&&(0===e||1!==S))return-1;for(j[1]=0,x=1;x<15;x++)j[x+1]=j[x]+B[x];for(E=0;E<u;E++)0!==t[r+E]&&(f[j[t[r+E]]++]=E);if(0===e?(q=N=f,w=19):1===e?(q=i,P-=257,N=s,D-=257,w=256):(q=o,N=a,w=-1),L=0,E=0,x=k,m=c,T=A,C=0,_=-1,g=(I=1<<A)-1,1===e&&I>852||2===e&&I>592)return 1;for(;;){y=x-C,f[E]<w?(b=0,v=f[E]):f[E]>w?(b=N[D+f[E]],v=q[P+f[E]]):(b=96,v=0),d=1<<x-C,k=p=1<<T;do{h[m+(L>>C)+(p-=d)]=y<<24|b<<16|v|0}while(0!==p);for(d=1<<x-1;L&d;)d>>=1;if(0!==d?(L&=d-1,L+=d):L=0,E++,0==--B[x]){if(x===S)break;x=t[r+f[E]]}if(x>A&&(L&g)!==_){for(0===C&&(C=A),m+=k,O=1<<(T=x-C);T+C<S&&!((O-=B[T+C])<=0);)T++,O<<=1;if(I+=1<<T,1===e&&I>852||2===e&&I>592)return 1;h[_=L&g]=A<<24|T<<16|m-c|0}}return 0!==L&&(h[m+L]=x-C<<24|64<<16|0),l.bits=A,0}},function(e,t,r){"use strict";const n=r(89),{crlf:i,begin:s}=r(32),o={header:Symbol("warc-parsing-header"),content1:Symbol("warc-parsing-content1"),content2:Symbol("warc-parsing-content2"),consumeCRLFHeader:Symbol("warc-parsing-comsume-crlf-header"),consumeCRLFContent1:Symbol("warc-parsing-comsume-crlf-c1"),consumeCRLFContent2:Symbol("warc-parsing-comsume-crlf-c2")},a=s.length;e.exports=class{constructor(){this._parts={header:[],c1:[],c2:[]},this._parsingState=o.header}buildRecord(){if(0===this._parts.header.length)return null;const e=new n(this._parts);return this._parts.header=[],this._parts.c1=[],this._parts.c2=[],e}consumeLine(e){let t=null;(function(e){if(e.length>11)return!1;let t=0;for(;t<a;){if(s[t]!==e[t])return!1;t+=1}return!0})(e)&&(this._parsingState=o.header,t=this.buildRecord());const r=function(e){return 2===e.length&&e[0]===i[0]&&e[1]===i[1]}(e);switch(this._parsingState){case o.header:r?this._parsingState=o.consumeCRLFHeader:this._parts.header.push(e);break;case o.consumeCRLFHeader:r||(this._parts.c1.push(e),this._parsingState=o.content1);break;case o.content1:r?this._parsingState=o.consumeCRLFContent1:this._parts.c1.push(e);break;case o.consumeCRLFContent1:r||(this._parts.c2.push(e),this._parsingState=o.content2);break;case o.content2:r?this._parsingState=o.consumeCRLFContent2:this._parts.c2.push(e);break;case o.consumeCRLFContent2:}return t}}},function(e,t,r){"use strict";(function(t){const n=r(90),{WARCTypes:i}=r(3);e.exports=class{constructor(e){this.warcHeader=n.parseWarcRecordHeader(e.header),this.httpInfo=null,this.content=null;const r=this.warcType;switch(r){case i.request:case i.response:this.httpInfo=n.parseHTTPPortion(e.c1,r===i.request),this.content=t.concat(e.c2||[]);break;case i.revisit:this.httpInfo=n.parseResHTTP(e.c1);break;default:this.content=t.concat(e.c1||[])}}hasWARCHeader(e){return e.startsWith("WARC")||(e=`WARC-${e}`),null!=this.warcHeader[e]}getWARCHeader(e){return e.startsWith("WARC")||(e=`WARC-${e}`),this.warcHeader[e]}get warcType(){return this.warcHeader["WARC-Type"]}get warcRecordID(){return this.warcHeader["WARC-Record-ID"]}get warcDate(){return this.warcHeader["WARC-Date"]}get warcContentLength(){return this.warcHeader["Content-Length"]}get warcContentType(){return this.warcHeader["Content-Type"]}get warcConcurrentTo(){return this.warcHeader["WARC-Concurrent-To"]}get warcBlockDigest(){return this.warcHeader["WARC-Block-Digest"]}get warcPayloadDigest(){return this.warcHeader["WARC-Payload-Digest"]}get warcIPAddress(){return this.warcHeader["WARC-IP-Address"]}get warcRefersTo(){return this.warcHeader["WARC-Refers-To"]}get warcRefersToTargetURI(){return this.warcHeader["WARC-Refers-To-Target-URI"]}get warcRefersToDate(){return this.warcHeader["WARC-Refers-To-Date"]}get warcTargetURI(){return this.warcHeader["WARC-Target-URI"]}get warcTruncated(){return this.warcHeader["WARC-Truncated"]}get warcWarcinfoID(){return this.warcHeader["WARC-Warcinfo-ID"]}get warcFilename(){return this.warcHeader["WARC-Filename"]}get warcProfile(){return this.warcHeader["WARC-Profile"]}get warcIdentifiedPayloadType(){return this.warcHeader["WARC-Identified-Payload-Type"]}get warcSegmentOriginID(){return this.warcHeader["WARC-Segment-Origin-ID"]}get warcSegmentNumber(){return this.warcHeader["WARC-Segment-Number"]}get warcSegmentTotalLength(){return this.warcHeader["WARC-Segment-Total-Length"]}}}).call(this,r(0).Buffer)},function(e,t,r){"use strict";(function(t){const{SPACE:n}=r(31),i=r(32),s=t.from("/"),o=t.from(": "),a=i.crlf;class u{static utf8BufferSlice(e,t,r){return e.slice(t,r).toString("utf8")}static bufEndPosNoCRLF(e,t){return e[t-2]===a[0]&&e[t-1]===a[1]?t-2:t}static parseHTTPPortion(e,t){return t?u.parseReqHTTP(e):u.parseResHTTP(e)}static parseWarcRecordHeader(e){let t,r,n,i,a,h={},c=e.length,f=0;for(;f<c;)r=(t=e[f]).length,-1!==(n=t.indexOf(o))?(i=u.utf8BufferSlice(t,0,n),a=u.utf8BufferSlice(t,n+2,u.bufEndPosNoCRLF(t,r)),h[i]=a):h.WARC=u.utf8BufferSlice(t,t.indexOf(s)+1,u.bufEndPosNoCRLF(t,r)),f++;return h}static parseWarcInfoMetaDataContent(e){let t,r,n,i,s,a={},h=e.length,c=0;for(;c<h;)s=(i=e[c]).length,-1!==(t=i.indexOf(o))?(r=u.utf8BufferSlice(i,0,t),n=u.utf8BufferSlice(i,t+2,u.bufEndPosNoCRLF(i,s)),"outlink"===r?(null==a.outlink&&(a.outlink=[]),a.outlink.push(n)):a[r]=n):(n=u.utf8BufferSlice(i,0,u.bufEndPosNoCRLF(i,s)),null==a.unkeyed&&(a.unkeyed=[]),a.unkeyed.push(n)),c++;return a}static parseReqHTTP(e){const t={requestLine:null,path:null,method:null,httpVersion:null,headers:null};if(0===e.length)return t;let r=e[0],i=r.length,s=u.utf8BufferSlice(r,0,u.bufEndPosNoCRLF(r,i));t.requestLine=s;let o=s.indexOf(n);t.method=s.substring(0,o);let a=o+1;return o=s.indexOf(n,a),t.path=s.substring(a,o),t.httpVersion=s.substring(o+1),t.headers=u._parseHeaders(e),t}static parseResHTTP(e){const t={statusLine:null,statusCode:null,statusReason:null,httpVersion:null,headers:null};if(0===e.length)return t;let r=e[0],i=r.length,s=u.utf8BufferSlice(r,0,u.bufEndPosNoCRLF(r,i));t.statusLine=s;let o=s.indexOf(n);t.httpVersion=s.substring(0,o);let a=o+1;return o=s.indexOf(n,a),t.statusCode=s.substring(a,o),t.statusReason=s.substring(o+1),t.headers=u._parseHeaders(e),t}static _parseHeaders(e){const t={};let r,n,i,s,a=e.length,h=1,c="";for(;h<a;)s=(i=e[h]).length,-1!==(n=i.indexOf(o))?(c=r=u.utf8BufferSlice(i,0,n),t[r]=u.utf8BufferSlice(i,n+2,u.bufEndPosNoCRLF(i,s))):t[c]=u.utf8BufferSlice(i,0,u.bufEndPosNoCRLF(i,s)),h++;return t}}e.exports=u}).call(this,r(0).Buffer)},function(e,t,r){const n=r(10).getStream,i=r(19),s=r(22),o=r(13),a=r(14);e.exports=class extends s{constructor(e){if(super(),this._wp=e,this._parsing=!1,this._onRecord=this._onRecord.bind(this),this._onError=this._onError.bind(this),this._onEnd=this._onEnd.bind(this),a){const e=r(15);this[Symbol.asyncIterator]=()=>e(n(this._wp).pipe(i.createGunzip()))}}start(){let e=!1;if(!this._parsing){if(null==this._wp)throw new Error("The path to the WARC file is null/undefined");this._parsing=!0,e=!0,n(this._wp,!0).pipe(i.createGunzip()).pipe(new o).on("data",this._onRecord).on("error",this._onError).on("end",this._onEnd)}return e}_onRecord(e){this.emit("record",e)}_onError(e){this.emit("error",e)}_onEnd(){this._parsing=!1,this.emit("done")}parseWARC(e){return this._parsing||(this._wp=e||this._wp),this.start()}}},function(e,t,r){const n=r(10).getStream,i=r(22),s=r(13),o=r(14);e.exports=class extends i{constructor(e){if(super(),this._wp=e,this._parsing=!1,this._onRecord=this._onRecord.bind(this),this._onError=this._onError.bind(this),this._onEnd=this._onEnd.bind(this),o){const e=r(15);this[Symbol.asyncIterator]=()=>e(n(this._wp))}}start(){let e=!1;if(!this._parsing){if(null==this._wp)throw new Error("The path to the WARC file is null/undefined");this._parsing=!0,e=!0,n(this._wp).pipe(new s).on("data",this._onRecord).on("error",this._onError).on("end",this._onEnd)}return e}_onRecord(e){this.emit("record",e)}_onError(e){this.emit("error",e)}_onEnd(){this._parsing=!1,this.emit("done")}parseWARC(e){return this._parsing||(this._wp=e||this._wp),this.start()}}},function(e,t,r){t.ElectronWARCWriter=r(94),t.RemoteChromeWARCWriter=r(126),t.PuppeteerCDPWARCGenerator=r(127),t.PuppeteerWARCGenerator=r(128),t.WARCWriterBase=r(8),t.CRIExtraWARCGenerator=r(158)},function(e,t,r){(function(t){const n=r(8),{CRLF:i}=r(3),{noGZ:s,replaceContentLen:o}=r(9),{getPostData:a,getResBody:u}=r(100);e.exports=class extends n{async generateWARC(e,t,r){const{warcOpts:n,winfo:i,metadata:s}=r;this.initWARC(n.warcPath,n),null!=i&&await this.writeWarcInfoRecord(i),r.pages&&await this.writeWebrecorderBookmarksInfoRecord(r.pages),null!=s&&await this.writeWarcMetadata(s.targetURI,s.content);for(let r of e.iterateRequests())try{await this.generateWarcEntry(r,t)}catch(e){console.error(e)}return new Promise(e=>{this.once("finished",e),this.end()})}async generateWarcEntry(e,r){if(0===e.url.indexOf("data:"))return;let n;if(e.postData)n=e.postData;else if(e.hasPostData)try{let i=await a(e.requestId,r);n=t.from(i.postData,"utf8")}catch(e){}if(e.canSerializeResponse()){let a,h=e.serializeResponseHeaders();if(e.getBody){let n=!1;try{let i=await u(e.requestId,r);a=i.base64Encoded?t.from(i.body,"base64"):t.from(i.body,"utf8")}catch(e){n=!0}h=n?h.replace(o,`Content-Length: 0${i}`):(h=h.replace(s,"")).replace(o,`Content-Length: ${t.byteLength(a,"utf8")}${i}`)}return this.writeRequestResponseRecords(e.url,{headers:e.serializeRequestHeaders(),data:n},{headers:h,data:a})}return this.writeRequestRecord(e.url,e.serializeRequestHeaders(),n)}}}).call(this,r(0).Buffer)},function(e,t,r){(function(e){function r(e,t){for(var r=0,n=e.length-1;n>=0;n--){var i=e[n];"."===i?e.splice(n,1):".."===i?(e.splice(n,1),r++):r&&(e.splice(n,1),r--)}if(t)for(;r--;r)e.unshift("..");return e}var n=/^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/,i=function(e){return n.exec(e).slice(1)};function s(e,t){if(e.filter)return e.filter(t);for(var r=[],n=0;n<e.length;n++)t(e[n],n,e)&&r.push(e[n]);return r}t.resolve=function(){for(var t="",n=!1,i=arguments.length-1;i>=-1&&!n;i--){var o=i>=0?arguments[i]:e.cwd();if("string"!=typeof o)throw new TypeError("Arguments to path.resolve must be strings");o&&(t=o+"/"+t,n="/"===o.charAt(0))}return(n?"/":"")+(t=r(s(t.split("/"),function(e){return!!e}),!n).join("/"))||"."},t.normalize=function(e){var n=t.isAbsolute(e),i="/"===o(e,-1);return(e=r(s(e.split("/"),function(e){return!!e}),!n).join("/"))||n||(e="."),e&&i&&(e+="/"),(n?"/":"")+e},t.isAbsolute=function(e){return"/"===e.charAt(0)},t.join=function(){var e=Array.prototype.slice.call(arguments,0);return t.normalize(s(e,function(e,t){if("string"!=typeof e)throw new TypeError("Arguments to path.join must be strings");return e}).join("/"))},t.relative=function(e,r){function n(e){for(var t=0;t<e.length&&""===e[t];t++);for(var r=e.length-1;r>=0&&""===e[r];r--);return t>r?[]:e.slice(t,r-t+1)}e=t.resolve(e).substr(1),r=t.resolve(r).substr(1);for(var i=n(e.split("/")),s=n(r.split("/")),o=Math.min(i.length,s.length),a=o,u=0;u<o;u++)if(i[u]!==s[u]){a=u;break}var h=[];for(u=a;u<i.length;u++)h.push("..");return(h=h.concat(s.slice(a))).join("/")},t.sep="/",t.delimiter=":",t.dirname=function(e){var t=i(e),r=t[0],n=t[1];return r||n?(n&&(n=n.substr(0,n.length-1)),r+n):"."},t.basename=function(e,t){var r=i(e)[2];return t&&r.substr(-1*t.length)===t&&(r=r.substr(0,r.length-t.length)),r},t.extname=function(e){return i(e)[3]};var o="b"==="ab".substr(-1)?function(e,t,r){return e.substr(t,r)}:function(e,t,r){return t<0&&(t=e.length+t),e.substr(t,r)}}).call(this,r(2))},function(e,t){var r="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof window.msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto);if(r){var n=new Uint8Array(16);e.exports=function(){return r(n),n}}else{var i=new Array(16);e.exports=function(){for(var e,t=0;t<16;t++)0==(3&t)&&(e=4294967296*Math.random()),i[t]=e>>>((3&t)<<3)&255;return i}}},function(e,t){for(var r=[],n=0;n<256;++n)r[n]=(n+256).toString(16).substr(1);e.exports=function(e,t){var n=t||0,i=r;return[i[e[n++]],i[e[n++]],i[e[n++]],i[e[n++]],"-",i[e[n++]],i[e[n++]],"-",i[e[n++]],i[e[n++]],"-",i[e[n++]],i[e[n++]],"-",i[e[n++]],i[e[n++]],i[e[n++]],i[e[n++]],i[e[n++]],i[e[n++]]].join("")}},function(e,t){const r=/.*([.]warc)([.]gz)?/;e.exports=function(e,t=!1){if(null==e){throw new Error(`The supplied WARC filename was "${void 0===e?"undefined":"null"}", expecting a string`)}if("string"!=typeof e)throw new Error(`The supplied WARC filename was not a string it was "${typeof e}"`);const n=r.exec(e);if(!n)return`${e}.warc${t?".gz":""}`;if(!t&&null!=n[1]&&null==n[2])return e;if(t&&null!=n[1]&&null!=n[2])return e;const i=null!=n[1],s=null!=n[2];if(t){if(!i)return`${e}.warc.gz`;if(!s)return`${e}.gz`}else if(!i)return`${e}.warc`;return e}},function(e){e.exports={name:"node-warc",version:"3.3.1",description:"Parse And Write Web Archive Records (WARC) Files",main:"index.js",author:{name:"John Berlin",email:"n0tan3rd@gmail.com"},license:"MIT",repository:{type:"git",url:"https://github.com/N0taN3rd/node-warc.git"},bugs:{url:"https://github.com/N0taN3rd/node-warc/issues"},keywords:["warc","warc parsing","warc creation","web archiving","Electron","Chrome","puppeteer","request"],engines:{node:">=8.0.0"},scripts:{build:"webpack --mode production",lint:"standard | snazzy","fix-lint":"standard --fix",pretty:"prettier-standard lib/**/*.js",doc:"esdoc",test:"ava --verbose","test-report":"nyc ava --verbose","report-html":"nyc report --reporter=html","publish-docs":"gh-pages -d docs"},eslintConfig:{env:{node:!0}},dependencies:{eventemitter3:"^3.1.0","fs-extra":"^7.0.1",lodash:"^4.17.11",untildify:"^3.0.3",uuid:"^3.3.2",webpack:"^4.32.2"},devDependencies:{"@types/fs-extra":"^5.0.5","@types/node":"^11.9.5","@types/puppeteer":"^1.12.1",ava:"^1.2.1",chalk:"^2.4.2",esdoc:"^1.1.0","esdoc-ecmascript-proposal-plugin":"^1.0.0","esdoc-external-ecmascript-plugin":"^1.0.0","esdoc-inject-style-plugin":"^1.0.0","esdoc-node":"^1.0.4","esdoc-standard-plugin":"^1.0.0","gh-pages":"^2.0.1",microtime:"^3.0.0",nyc:"^13.3.0",perfy:"^1.1.5","prettier-standard":"^9.1.1","pretty-time":"^1.1.0",puppeteer:"^1.12.2",rxjs:"^6.4.0",snazzy:"^8.0.0",standard:"^12.0.1","webpack-cli":"^3.3.2"},ava:{files:["test/*.js"],sources:["lib/**/*"]},standard:{ignore:["test/**"]},resolutions:{"**/graceful-fs":"4.1.15","**/universalify":"0.1.2"}}},function(e,t,r){const n=r(101);e.exports={getResBody:function(e,t){return new Promise(r=>{t.sendCommand("Network.getResponseBody",{requestId:e},(e,t)=>{r(n(e)?t:null)})})},getPostData:function(e,t){return new Promise(r=>{t.sendCommand("Network.getRequestPostData",{requestId:e},(e,t)=>{r(n(e)?t:null)})})}}},function(e,t,r){var n=r(102),i=r(105),s=r(117),o=r(57),a=r(119),u=r(120),h=r(52),c=r(122),f="[object Map]",l="[object Set]",d=Object.prototype.hasOwnProperty;e.exports=function(e){if(null==e)return!0;if(a(e)&&(o(e)||"string"==typeof e||"function"==typeof e.splice||u(e)||c(e)||s(e)))return!e.length;var t=i(e);if(t==f||t==l)return!e.size;if(h(e))return!n(e).length;for(var r in e)if(d.call(e,r))return!1;return!0}},function(e,t,r){var n=r(52),i=r(103),s=Object.prototype.hasOwnProperty;e.exports=function(e){if(!n(e))return i(e);var t=[];for(var r in Object(e))s.call(e,r)&&"constructor"!=r&&t.push(r);return t}},function(e,t,r){var n=r(104)(Object.keys,Object);e.exports=n},function(e,t){e.exports=function(e,t){return function(r){return e(t(r))}}},function(e,t,r){var n=r(106),i=r(113),s=r(114),o=r(115),a=r(116),u=r(17),h=r(56),c=h(n),f=h(i),l=h(s),d=h(o),p=h(a),_=u;(n&&"[object DataView]"!=_(new n(new ArrayBuffer(1)))||i&&"[object Map]"!=_(new i)||s&&"[object Promise]"!=_(s.resolve())||o&&"[object Set]"!=_(new o)||a&&"[object WeakMap]"!=_(new a))&&(_=function(e){var t=u(e),r="[object Object]"==t?e.constructor:void 0,n=r?h(r):"";if(n)switch(n){case c:return"[object DataView]";case f:return"[object Map]";case l:return"[object Promise]";case d:return"[object Set]";case p:return"[object WeakMap]"}return t}),e.exports=_},function(e,t,r){var n=r(16)(r(6),"DataView");e.exports=n},function(e,t,r){var n=r(53),i=r(110),s=r(55),o=r(56),a=/^\[object .+?Constructor\]$/,u=Function.prototype,h=Object.prototype,c=u.toString,f=h.hasOwnProperty,l=RegExp("^"+c.call(f).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");e.exports=function(e){return!(!s(e)||i(e))&&(n(e)?l:a).test(o(e))}},function(e,t,r){var n=r(33),i=Object.prototype,s=i.hasOwnProperty,o=i.toString,a=n?n.toStringTag:void 0;e.exports=function(e){var t=s.call(e,a),r=e[a];try{e[a]=void 0;var n=!0}catch(e){}var i=o.call(e);return n&&(t?e[a]=r:delete e[a]),i}},function(e,t){var r=Object.prototype.toString;e.exports=function(e){return r.call(e)}},function(e,t,r){var n,i=r(111),s=(n=/[^.]+$/.exec(i&&i.keys&&i.keys.IE_PROTO||""))?"Symbol(src)_1."+n:"";e.exports=function(e){return!!s&&s in e}},function(e,t,r){var n=r(6)["__core-js_shared__"];e.exports=n},function(e,t){e.exports=function(e,t){return null==e?void 0:e[t]}},function(e,t,r){var n=r(16)(r(6),"Map");e.exports=n},function(e,t,r){var n=r(16)(r(6),"Promise");e.exports=n},function(e,t,r){var n=r(16)(r(6),"Set");e.exports=n},function(e,t,r){var n=r(16)(r(6),"WeakMap");e.exports=n},function(e,t,r){var n=r(118),i=r(23),s=Object.prototype,o=s.hasOwnProperty,a=s.propertyIsEnumerable,u=n(function(){return arguments}())?n:function(e){return i(e)&&o.call(e,"callee")&&!a.call(e,"callee")};e.exports=u},function(e,t,r){var n=r(17),i=r(23),s="[object Arguments]";e.exports=function(e){return i(e)&&n(e)==s}},function(e,t,r){var n=r(53),i=r(58);e.exports=function(e){return null!=e&&i(e.length)&&!n(e)}},function(e,t,r){(function(e){var n=r(6),i=r(121),s=t&&!t.nodeType&&t,o=s&&"object"==typeof e&&e&&!e.nodeType&&e,a=o&&o.exports===s?n.Buffer:void 0,u=(a?a.isBuffer:void 0)||i;e.exports=u}).call(this,r(34)(e))},function(e,t){e.exports=function(){return!1}},function(e,t,r){var n=r(123),i=r(124),s=r(125),o=s&&s.isTypedArray,a=o?i(o):n;e.exports=a},function(e,t,r){var n=r(17),i=r(58),s=r(23),o={};o["[object Float32Array]"]=o["[object Float64Array]"]=o["[object Int8Array]"]=o["[object Int16Array]"]=o["[object Int32Array]"]=o["[object Uint8Array]"]=o["[object Uint8ClampedArray]"]=o["[object Uint16Array]"]=o["[object Uint32Array]"]=!0,o["[object Arguments]"]=o["[object Array]"]=o["[object ArrayBuffer]"]=o["[object Boolean]"]=o["[object DataView]"]=o["[object Date]"]=o["[object Error]"]=o["[object Function]"]=o["[object Map]"]=o["[object Number]"]=o["[object Object]"]=o["[object RegExp]"]=o["[object Set]"]=o["[object String]"]=o["[object WeakMap]"]=!1,e.exports=function(e){return s(e)&&i(e.length)&&!!o[n(e)]}},function(e,t){e.exports=function(e){return function(t){return e(t)}}},function(e,t,r){(function(e){var n=r(54),i=t&&!t.nodeType&&t,s=i&&"object"==typeof e&&e&&!e.nodeType&&e,o=s&&s.exports===i&&n.process,a=function(){try{var e=s&&s.require&&s.require("util").types;return e||o&&o.binding&&o.binding("util")}catch(e){}}();e.exports=a}).call(this,r(34)(e))},function(e,t,r){(function(t){const n=r(8),{CRLF:i}=r(3),{noGZ:s,replaceContentLen:o}=r(9);e.exports=class extends n{async generateWARC(e,t,r){const{warcOpts:n,winfo:i,metadata:s}=r;this.initWARC(n.warcPath,n),null!=i&&await this.writeWarcInfoRecord(i),r.pages&&await this.writeWebrecorderBookmarksInfoRecord(r.pages),null!=s&&await this.writeWarcMetadata(s.targetURI,s.content);for(let r of e.iterateRequests())try{await this.generateWarcEntry(r,t)}catch(e){console.error(e)}return new Promise(e=>{this.once("finished",e),this.end()})}async generateWarcEntry(e,r){if(0===e.url.indexOf("data:"))return;let n;if(e.postData)n=e.postData;else if(e.hasPostData)try{let i=await r.getRequestPostData({requestId:e.requestId});n=t.from(i.postData,"utf8")}catch(e){}if(e.canSerializeResponse()){let a,u=e.serializeResponseHeaders();if(e.getBody){let n=!1;try{let i=await r.getResponseBody({requestId:e.requestId});a=i.base64Encoded?t.from(i.body,"base64"):t.from(i.body,"utf8")}catch(e){n=!0}u=n?u.replace(o,`Content-Length: 0${i}`):(u=u.replace(s,"")).replace(o,`Content-Length: ${t.byteLength(a,"utf8")}${i}`)}return this.writeRequestResponseRecords(e.url,{headers:e.serializeRequestHeaders(),data:n},{headers:u,data:a})}return this.writeRequestRecord(e.url,e.serializeRequestHeaders(),n)}}}).call(this,r(0).Buffer)},function(e,t,r){(function(t){const n=r(8),{CRLF:i}=r(3),{noGZ:s,replaceContentLen:o}=r(9);e.exports=class extends n{async generateWARC(e,t,r){const{winfo:n,metadata:i,warcOpts:s}=r;this.initWARC(s.warcPath,s),null!=n&&await this.writeWarcInfoRecord(n),r.pages&&await this.writeWebrecorderBookmarksInfoRecord(r.pages),null!=i&&await this.writeWarcMetadata(i.targetURI,i.content);for(let r of e.iterateRequests())try{await this.generateWarcEntry(r,t)}catch(e){console.error(e)}return new Promise(e=>{this.once("finished",e),this.end()})}async generateWarcEntry(e,r){if(0===e.url.indexOf("data:"))return;let n;if(e.postData)n=e.postData;else if(e.hasPostData)try{let i=await r.send("Network.getRequestPostData",{requestId:e.requestId});n=t.from(i.postData,"utf8")}catch(e){}if(e.canSerializeResponse()){let a,u=e.serializeResponseHeaders();if(e.getBody){let n=!1;try{let i=await r.send("Network.getResponseBody",{requestId:e.requestId});a=i.base64Encoded?t.from(i.body,"base64"):t.from(i.body,"utf8")}catch(e){n=!0}u=n?u.replace(o,`Content-Length: 0${i}`):(u=u.replace(s,"")).replace(o,`Content-Length: ${t.byteLength(a,"utf8")}${i}`)}return this.writeRequestResponseRecords(e.url,{headers:e.serializeRequestHeaders(),data:n},{headers:u,data:a})}return this.writeRequestRecord(e.url,e.serializeRequestHeaders(),n)}}}).call(this,r(0).Buffer)},function(e,t,r){(function(t){const{URL:n}=r(18),{STATUS_CODES:i}=r(35),{CRLF:s}=r(3),o=r(8),{stringifyHeaders:a,stringifyRequestHeaders:u}=r(36),{httpRequestPath:h}=r(62),{noGZ:c,replaceContentLen:f}=r(9);e.exports=class extends o{constructor(e){super(e),this._UP=new n("about:blank")}async generateWARC(e,t){const{warcOpts:r,winfo:n,metadata:i}=t;this.initWARC(r.warcPath,r),null!=n&&await this.writeWarcInfoRecord(n),t.pages&&await this.writeWebrecorderBookmarksInfoRecord(t.pages),null!=i&&await this.writeWarcMetadata(i.targetURI,i.content);for(let t of e.iterateRequests())try{await this.generateWarcEntry(t)}catch(e){console.error(e)}return new Promise(e=>{this.once("finished",e),this.end()})}async generateWarcEntry(e){if(0===e.url().indexOf("data:"))return;const r=e.response();this._UP.href=e.url();let n=`${e.method()} ${h(this._UP)} HTTP/1.1${s}${u(e.headers(),this._UP.host)}`;if(r){let o,u=`HTTP/1.1 ${r.status()} ${i[r.status()]} ${s}${a(r.headers())}`,h=!1;try{o=await r.buffer()}catch(e){h=!0}return u=h?u.replace(f,`Content-Length: 0${s}`):(u=u.replace(c,"")).replace(f,`Content-Length: ${t.byteLength(o,"utf8")}${s}`),this.writeRequestResponseRecords(this._UP.href,{headers:n,data:e.postData()},{headers:u,data:o})}return this.writeRequestRecord(this._UP.href,n,e.postData())}}}).call(this,r(0).Buffer)},function(e,t,r){(function(e,n){var i;/*! https://mths.be/punycode v1.4.1 by @mathias */!function(s){t&&t.nodeType,e&&e.nodeType;var o="object"==typeof n&&n;o.global!==o&&o.window!==o&&o.self;var a,u=2147483647,h=36,c=1,f=26,l=38,d=700,p=72,_=128,g="-",m=/^xn--/,w=/[^\x20-\x7E]/,y=/[\x2E\u3002\uFF0E\uFF61]/g,b={overflow:"Overflow: input needs wider integers to process","not-basic":"Illegal input >= 0x80 (not a basic code point)","invalid-input":"Invalid input"},v=h-c,R=Math.floor,x=String.fromCharCode;function E(e){throw new RangeError(b[e])}function k(e,t){for(var r=e.length,n=[];r--;)n[r]=t(e[r]);return n}function S(e,t){var r=e.split("@"),n="";return r.length>1&&(n=r[0]+"@",e=r[1]),n+k((e=e.replace(y,".")).split("."),t).join(".")}function A(e){for(var t,r,n=[],i=0,s=e.length;i<s;)(t=e.charCodeAt(i++))>=55296&&t<=56319&&i<s?56320==(64512&(r=e.charCodeAt(i++)))?n.push(((1023&t)<<10)+(1023&r)+65536):(n.push(t),i--):n.push(t);return n}function T(e){return k(e,function(e){var t="";return e>65535&&(t+=x((e-=65536)>>>10&1023|55296),e=56320|1023&e),t+=x(e)}).join("")}function C(e,t){return e+22+75*(e<26)-((0!=t)<<5)}function O(e,t,r){var n=0;for(e=r?R(e/d):e>>1,e+=R(e/t);e>v*f>>1;n+=h)e=R(e/v);return R(n+(v+1)*e/(e+l))}function I(e){var t,r,n,i,s,o,a,l,d,m,w,y=[],b=e.length,v=0,x=_,k=p;for((r=e.lastIndexOf(g))<0&&(r=0),n=0;n<r;++n)e.charCodeAt(n)>=128&&E("not-basic"),y.push(e.charCodeAt(n));for(i=r>0?r+1:0;i<b;){for(s=v,o=1,a=h;i>=b&&E("invalid-input"),((l=(w=e.charCodeAt(i++))-48<10?w-22:w-65<26?w-65:w-97<26?w-97:h)>=h||l>R((u-v)/o))&&E("overflow"),v+=l*o,!(l<(d=a<=k?c:a>=k+f?f:a-k));a+=h)o>R(u/(m=h-d))&&E("overflow"),o*=m;k=O(v-s,t=y.length+1,0==s),R(v/t)>u-x&&E("overflow"),x+=R(v/t),v%=t,y.splice(v++,0,x)}return T(y)}function L(e){var t,r,n,i,s,o,a,l,d,m,w,y,b,v,k,S=[];for(y=(e=A(e)).length,t=_,r=0,s=p,o=0;o<y;++o)(w=e[o])<128&&S.push(x(w));for(n=i=S.length,i&&S.push(g);n<y;){for(a=u,o=0;o<y;++o)(w=e[o])>=t&&w<a&&(a=w);for(a-t>R((u-r)/(b=n+1))&&E("overflow"),r+=(a-t)*b,t=a,o=0;o<y;++o)if((w=e[o])<t&&++r>u&&E("overflow"),w==t){for(l=r,d=h;!(l<(m=d<=s?c:d>=s+f?f:d-s));d+=h)k=l-m,v=h-m,S.push(x(C(m+k%v,0))),l=R(k/v);S.push(x(C(l,0))),s=O(r,b,n==i),r=0,++n}++r,++t}return S.join("")}a={version:"1.4.1",ucs2:{decode:A,encode:T},decode:I,encode:L,toASCII:function(e){return S(e,function(e){return w.test(e)?"xn--"+L(e):e})},toUnicode:function(e){return S(e,function(e){return m.test(e)?I(e.slice(4).toLowerCase()):e})}},void 0===(i=function(){return a}.call(t,r,t,e))||(e.exports=i)}()}).call(this,r(34)(e),r(1))},function(e,t,r){"use strict";e.exports={isString:function(e){return"string"==typeof e},isObject:function(e){return"object"==typeof e&&null!==e},isNull:function(e){return null===e},isNullOrUndefined:function(e){return null==e}}},function(e,t,r){"use strict";t.decode=t.parse=r(132),t.encode=t.stringify=r(133)},function(e,t,r){"use strict";function n(e,t){return Object.prototype.hasOwnProperty.call(e,t)}e.exports=function(e,t,r,s){t=t||"&",r=r||"=";var o={};if("string"!=typeof e||0===e.length)return o;var a=/\+/g;e=e.split(t);var u=1e3;s&&"number"==typeof s.maxKeys&&(u=s.maxKeys);var h=e.length;u>0&&h>u&&(h=u);for(var c=0;c<h;++c){var f,l,d,p,_=e[c].replace(a,"%20"),g=_.indexOf(r);g>=0?(f=_.substr(0,g),l=_.substr(g+1)):(f=_,l=""),d=decodeURIComponent(f),p=decodeURIComponent(l),n(o,d)?i(o[d])?o[d].push(p):o[d]=[o[d],p]:o[d]=p}return o};var i=Array.isArray||function(e){return"[object Array]"===Object.prototype.toString.call(e)}},function(e,t,r){"use strict";var n=function(e){switch(typeof e){case"string":return e;case"boolean":return e?"true":"false";case"number":return isFinite(e)?e:"";default:return""}};e.exports=function(e,t,r,a){return t=t||"&",r=r||"=",null===e&&(e=void 0),"object"==typeof e?s(o(e),function(o){var a=encodeURIComponent(n(o))+r;return i(e[o])?s(e[o],function(e){return a+encodeURIComponent(n(e))}).join(t):a+encodeURIComponent(n(e[o]))}).join(t):a?encodeURIComponent(n(a))+r+encodeURIComponent(n(e)):""};var i=Array.isArray||function(e){return"[object Array]"===Object.prototype.toString.call(e)};function s(e,t){if(e.map)return e.map(t);for(var r=[],n=0;n<e.length;n++)r.push(t(e[n],n));return r}var o=Object.keys||function(e){var t=[];for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.push(r);return t}},function(e,t,r){(function(t,n,i){var s=r(59),o=r(4),a=r(60),u=r(11),h=r(135),c=a.IncomingMessage,f=a.readyStates;var l=e.exports=function(e){var r,n=this;u.Writable.call(n),n._opts=e,n._body=[],n._headers={},e.auth&&n.setHeader("Authorization","Basic "+new t(e.auth).toString("base64")),Object.keys(e.headers).forEach(function(t){n.setHeader(t,e.headers[t])});var i=!0;if("disable-fetch"===e.mode||"requestTimeout"in e&&!s.abortController)i=!1,r=!0;else if("prefer-streaming"===e.mode)r=!1;else if("allow-wrong-content-type"===e.mode)r=!s.overrideMimeType;else{if(e.mode&&"default"!==e.mode&&"prefer-fast"!==e.mode)throw new Error("Invalid value for opts.mode");r=!0}n._mode=function(e,t){return s.fetch&&t?"fetch":s.mozchunkedarraybuffer?"moz-chunked-arraybuffer":s.msstream?"ms-stream":s.arraybuffer&&e?"arraybuffer":s.vbArray&&e?"text:vbarray":"text"}(r,i),n._fetchTimer=null,n.on("finish",function(){n._onFinish()})};o(l,u.Writable),l.prototype.setHeader=function(e,t){var r=e.toLowerCase();-1===d.indexOf(r)&&(this._headers[r]={name:e,value:t})},l.prototype.getHeader=function(e){var t=this._headers[e.toLowerCase()];return t?t.value:null},l.prototype.removeHeader=function(e){delete this._headers[e.toLowerCase()]},l.prototype._onFinish=function(){var e=this;if(!e._destroyed){var r=e._opts,o=e._headers,a=null;"GET"!==r.method&&"HEAD"!==r.method&&(a=s.arraybuffer?h(t.concat(e._body)):s.blobConstructor?new n.Blob(e._body.map(function(e){return h(e)}),{type:(o["content-type"]||{}).value||""}):t.concat(e._body).toString());var u=[];if(Object.keys(o).forEach(function(e){var t=o[e].name,r=o[e].value;Array.isArray(r)?r.forEach(function(e){u.push([t,e])}):u.push([t,r])}),"fetch"===e._mode){var c=null;if(s.abortController){var l=new AbortController;c=l.signal,e._fetchAbortController=l,"requestTimeout"in r&&0!==r.requestTimeout&&(e._fetchTimer=n.setTimeout(function(){e.emit("requestTimeout"),e._fetchAbortController&&e._fetchAbortController.abort()},r.requestTimeout))}n.fetch(e._opts.url,{method:e._opts.method,headers:u,body:a||void 0,mode:"cors",credentials:r.withCredentials?"include":"same-origin",signal:c}).then(function(t){e._fetchResponse=t,e._connect()},function(t){n.clearTimeout(e._fetchTimer),e._destroyed||e.emit("error",t)})}else{var d=e._xhr=new n.XMLHttpRequest;try{d.open(e._opts.method,e._opts.url,!0)}catch(t){return void i.nextTick(function(){e.emit("error",t)})}"responseType"in d&&(d.responseType=e._mode.split(":")[0]),"withCredentials"in d&&(d.withCredentials=!!r.withCredentials),"text"===e._mode&&"overrideMimeType"in d&&d.overrideMimeType("text/plain; charset=x-user-defined"),"requestTimeout"in r&&(d.timeout=r.requestTimeout,d.ontimeout=function(){e.emit("requestTimeout")}),u.forEach(function(e){d.setRequestHeader(e[0],e[1])}),e._response=null,d.onreadystatechange=function(){switch(d.readyState){case f.LOADING:case f.DONE:e._onXHRProgress()}},"moz-chunked-arraybuffer"===e._mode&&(d.onprogress=function(){e._onXHRProgress()}),d.onerror=function(){e._destroyed||e.emit("error",new Error("XHR error"))};try{d.send(a)}catch(t){return void i.nextTick(function(){e.emit("error",t)})}}}},l.prototype._onXHRProgress=function(){(function(e){try{var t=e.status;return null!==t&&0!==t}catch(e){return!1}})(this._xhr)&&!this._destroyed&&(this._response||this._connect(),this._response._onXHRProgress())},l.prototype._connect=function(){var e=this;e._destroyed||(e._response=new c(e._xhr,e._fetchResponse,e._mode,e._fetchTimer),e._response.on("error",function(t){e.emit("error",t)}),e.emit("response",e._response))},l.prototype._write=function(e,t,r){this._body.push(e),r()},l.prototype.abort=l.prototype.destroy=function(){this._destroyed=!0,n.clearTimeout(this._fetchTimer),this._response&&(this._response._destroyed=!0),this._xhr?this._xhr.abort():this._fetchAbortController&&this._fetchAbortController.abort()},l.prototype.end=function(e,t,r){"function"==typeof e&&(r=e,e=void 0),u.Writable.prototype.end.call(this,e,t,r)},l.prototype.flushHeaders=function(){},l.prototype.setTimeout=function(){},l.prototype.setNoDelay=function(){},l.prototype.setSocketKeepAlive=function(){};var d=["accept-charset","accept-encoding","access-control-request-headers","access-control-request-method","connection","content-length","cookie","cookie2","date","dnt","expect","host","keep-alive","origin","referer","te","trailer","transfer-encoding","upgrade","via"]}).call(this,r(0).Buffer,r(1),r(2))},function(e,t,r){var n=r(0).Buffer;e.exports=function(e){if(e instanceof Uint8Array){if(0===e.byteOffset&&e.byteLength===e.buffer.byteLength)return e.buffer;if("function"==typeof e.buffer.slice)return e.buffer.slice(e.byteOffset,e.byteOffset+e.byteLength)}if(n.isBuffer(e)){for(var t=new Uint8Array(e.length),r=e.length,i=0;i<r;i++)t[i]=e[i];return t.buffer}throw new Error("Argument must be a Buffer")}},function(e,t){e.exports=function(){for(var e={},t=0;t<arguments.length;t++){var n=arguments[t];for(var i in n)r.call(n,i)&&(e[i]=n[i])}return e};var r=Object.prototype.hasOwnProperty},function(e,t){e.exports={100:"Continue",101:"Switching Protocols",102:"Processing",200:"OK",201:"Created",202:"Accepted",203:"Non-Authoritative Information",204:"No Content",205:"Reset Content",206:"Partial Content",207:"Multi-Status",208:"Already Reported",226:"IM Used",300:"Multiple Choices",301:"Moved Permanently",302:"Found",303:"See Other",304:"Not Modified",305:"Use Proxy",307:"Temporary Redirect",308:"Permanent Redirect",400:"Bad Request",401:"Unauthorized",402:"Payment Required",403:"Forbidden",404:"Not Found",405:"Method Not Allowed",406:"Not Acceptable",407:"Proxy Authentication Required",408:"Request Timeout",409:"Conflict",410:"Gone",411:"Length Required",412:"Precondition Failed",413:"Payload Too Large",414:"URI Too Long",415:"Unsupported Media Type",416:"Range Not Satisfiable",417:"Expectation Failed",418:"I'm a teapot",421:"Misdirected Request",422:"Unprocessable Entity",423:"Locked",424:"Failed Dependency",425:"Unordered Collection",426:"Upgrade Required",428:"Precondition Required",429:"Too Many Requests",431:"Request Header Fields Too Large",451:"Unavailable For Legal Reasons",500:"Internal Server Error",501:"Not Implemented",502:"Bad Gateway",503:"Service Unavailable",504:"Gateway Timeout",505:"HTTP Version Not Supported",506:"Variant Also Negotiates",507:"Insufficient Storage",508:"Loop Detected",509:"Bandwidth Limit Exceeded",510:"Not Extended",511:"Network Authentication Required"}},function(e,t,r){var n=r(139),i=r(151),s=n(function(e,t,r){return e+(r?" ":"")+i(t)});e.exports=s},function(e,t,r){var n=r(140),i=r(141),s=r(147),o=RegExp("['’]","g");e.exports=function(e){return function(t){return n(s(i(t).replace(o,"")),e,"")}}},function(e,t){e.exports=function(e,t,r,n){var i=-1,s=null==e?0:e.length;for(n&&s&&(r=e[++i]);++i<s;)r=t(r,e[i],i,e);return r}},function(e,t,r){var n=r(142),i=r(37),s=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,o=RegExp("[\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff]","g");e.exports=function(e){return(e=i(e))&&e.replace(s,n).replace(o,"")}},function(e,t,r){var n=r(143)({"À":"A","Á":"A","Â":"A","Ã":"A","Ä":"A","Å":"A","à":"a","á":"a","â":"a","ã":"a","ä":"a","å":"a","Ç":"C","ç":"c","Ð":"D","ð":"d","È":"E","É":"E","Ê":"E","Ë":"E","è":"e","é":"e","ê":"e","ë":"e","Ì":"I","Í":"I","Î":"I","Ï":"I","ì":"i","í":"i","î":"i","ï":"i","Ñ":"N","ñ":"n","Ò":"O","Ó":"O","Ô":"O","Õ":"O","Ö":"O","Ø":"O","ò":"o","ó":"o","ô":"o","õ":"o","ö":"o","ø":"o","Ù":"U","Ú":"U","Û":"U","Ü":"U","ù":"u","ú":"u","û":"u","ü":"u","Ý":"Y","ý":"y","ÿ":"y","Æ":"Ae","æ":"ae","Þ":"Th","þ":"th","ß":"ss","Ā":"A","Ă":"A","Ą":"A","ā":"a","ă":"a","ą":"a","Ć":"C","Ĉ":"C","Ċ":"C","Č":"C","ć":"c","ĉ":"c","ċ":"c","č":"c","Ď":"D","Đ":"D","ď":"d","đ":"d","Ē":"E","Ĕ":"E","Ė":"E","Ę":"E","Ě":"E","ē":"e","ĕ":"e","ė":"e","ę":"e","ě":"e","Ĝ":"G","Ğ":"G","Ġ":"G","Ģ":"G","ĝ":"g","ğ":"g","ġ":"g","ģ":"g","Ĥ":"H","Ħ":"H","ĥ":"h","ħ":"h","Ĩ":"I","Ī":"I","Ĭ":"I","Į":"I","İ":"I","ĩ":"i","ī":"i","ĭ":"i","į":"i","ı":"i","Ĵ":"J","ĵ":"j","Ķ":"K","ķ":"k","ĸ":"k","Ĺ":"L","Ļ":"L","Ľ":"L","Ŀ":"L","Ł":"L","ĺ":"l","ļ":"l","ľ":"l","ŀ":"l","ł":"l","Ń":"N","Ņ":"N","Ň":"N","Ŋ":"N","ń":"n","ņ":"n","ň":"n","ŋ":"n","Ō":"O","Ŏ":"O","Ő":"O","ō":"o","ŏ":"o","ő":"o","Ŕ":"R","Ŗ":"R","Ř":"R","ŕ":"r","ŗ":"r","ř":"r","Ś":"S","Ŝ":"S","Ş":"S","Š":"S","ś":"s","ŝ":"s","ş":"s","š":"s","Ţ":"T","Ť":"T","Ŧ":"T","ţ":"t","ť":"t","ŧ":"t","Ũ":"U","Ū":"U","Ŭ":"U","Ů":"U","Ű":"U","Ų":"U","ũ":"u","ū":"u","ŭ":"u","ů":"u","ű":"u","ų":"u","Ŵ":"W","ŵ":"w","Ŷ":"Y","ŷ":"y","Ÿ":"Y","Ź":"Z","Ż":"Z","Ž":"Z","ź":"z","ż":"z","ž":"z","Ĳ":"IJ","ĳ":"ij","Œ":"Oe","œ":"oe","ŉ":"'n","ſ":"s"});e.exports=n},function(e,t){e.exports=function(e){return function(t){return null==e?void 0:e[t]}}},function(e,t,r){var n=r(33),i=r(145),s=r(57),o=r(146),a=1/0,u=n?n.prototype:void 0,h=u?u.toString:void 0;e.exports=function e(t){if("string"==typeof t)return t;if(s(t))return i(t,e)+"";if(o(t))return h?h.call(t):"";var r=t+"";return"0"==r&&1/t==-a?"-0":r}},function(e,t){e.exports=function(e,t){for(var r=-1,n=null==e?0:e.length,i=Array(n);++r<n;)i[r]=t(e[r],r,e);return i}},function(e,t,r){var n=r(17),i=r(23),s="[object Symbol]";e.exports=function(e){return"symbol"==typeof e||i(e)&&n(e)==s}},function(e,t,r){var n=r(148),i=r(149),s=r(37),o=r(150);e.exports=function(e,t,r){return e=s(e),void 0===(t=r?void 0:t)?i(e)?o(e):n(e):e.match(t)||[]}},function(e,t){var r=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;e.exports=function(e){return e.match(r)||[]}},function(e,t){var r=/[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;e.exports=function(e){return r.test(e)}},function(e,t){var r="\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",n="["+r+"]",i="\\d+",s="[\\u2700-\\u27bf]",o="[a-z\\xdf-\\xf6\\xf8-\\xff]",a="[^\\ud800-\\udfff"+r+i+"\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde]",u="(?:\\ud83c[\\udde6-\\uddff]){2}",h="[\\ud800-\\udbff][\\udc00-\\udfff]",c="[A-Z\\xc0-\\xd6\\xd8-\\xde]",f="(?:"+o+"|"+a+")",l="(?:"+c+"|"+a+")",d="(?:[\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff]|\\ud83c[\\udffb-\\udfff])?",p="[\\ufe0e\\ufe0f]?"+d+("(?:\\u200d(?:"+["[^\\ud800-\\udfff]",u,h].join("|")+")[\\ufe0e\\ufe0f]?"+d+")*"),_="(?:"+[s,u,h].join("|")+")"+p,g=RegExp([c+"?"+o+"+(?:['’](?:d|ll|m|re|s|t|ve))?(?="+[n,c,"$"].join("|")+")",l+"+(?:['’](?:D|LL|M|RE|S|T|VE))?(?="+[n,c+f,"$"].join("|")+")",c+"?"+f+"+(?:['’](?:d|ll|m|re|s|t|ve))?",c+"+(?:['’](?:D|LL|M|RE|S|T|VE))?","\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])","\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])",i,_].join("|"),"g");e.exports=function(e){return e.match(g)||[]}},function(e,t,r){var n=r(152)("toUpperCase");e.exports=n},function(e,t,r){var n=r(153),i=r(61),s=r(155),o=r(37);e.exports=function(e){return function(t){t=o(t);var r=i(t)?s(t):void 0,a=r?r[0]:t.charAt(0),u=r?n(r,1).join(""):t.slice(1);return a[e]()+u}}},function(e,t,r){var n=r(154);e.exports=function(e,t,r){var i=e.length;return r=void 0===r?i:r,!t&&r>=i?e:n(e,t,r)}},function(e,t){e.exports=function(e,t,r){var n=-1,i=e.length;t<0&&(t=-t>i?0:i+t),(r=r>i?i:r)<0&&(r+=i),i=t>r?0:r-t>>>0,t>>>=0;for(var s=Array(i);++n<i;)s[n]=e[n+t];return s}},function(e,t,r){var n=r(156),i=r(61),s=r(157);e.exports=function(e){return i(e)?s(e):n(e)}},function(e,t){e.exports=function(e){return e.split("")}},function(e,t){var r="[\\ud800-\\udfff]",n="[\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff]",i="\\ud83c[\\udffb-\\udfff]",s="[^\\ud800-\\udfff]",o="(?:\\ud83c[\\udde6-\\uddff]){2}",a="[\\ud800-\\udbff][\\udc00-\\udfff]",u="(?:"+n+"|"+i+")"+"?",h="[\\ufe0e\\ufe0f]?"+u+("(?:\\u200d(?:"+[s,o,a].join("|")+")[\\ufe0e\\ufe0f]?"+u+")*"),c="(?:"+[s+n+"?",n,o,a,r].join("|")+")",f=RegExp(i+"(?="+i+")|"+c+h,"g");e.exports=function(e){return e.match(f)||[]}},function(e,t,r){(function(t){const{CRLF:n}=r(3),i=r(8),{noGZ:s,replaceContentLen:o}=r(9);e.exports=class extends i{async generateWARC(e,t){const{warcOpts:r,winfo:n,metadata:i}=t;this.initWARC(r.warcPath,r),null!=n&&await this.writeWarcInfoRecord(n),t.pages&&await this.writeWebrecorderBookmarksInfoRecord(t.pages),null!=i&&await this.writeWarcMetadata(i.targetURI,i.content);for(let t of e.iterateRequests())try{await this.generateWarcEntry(t)}catch(e){console.error(e)}return new Promise(e=>{this.once("finished",e),this.end()})}async generateWarcEntry(e){const r=e.url();if(r.startsWith("data:"))return;const i=e.response();let a;if(e.postData())a=e.postData();else if(e.hasPostData())try{a=await e.getPostData()}catch(e){}const u=e.requestLineAndHeaders(!0);if(i){let e,h=i.statusLineAndHeaders(!0),c=!1;try{e=await i.buffer()}catch(e){c=!0}return h=c?h.replace(o,`Content-Length: 0${n}`):h.replace(s,"").replace(o,`Content-Length: ${t.byteLength(e,"utf8")}${n}`),this.writeRequestResponseRecords(r,{headers:u,data:a},{headers:h,data:e})}return this.writeRequestRecord(r,u,a)}}}).call(this,r(0).Buffer)},function(e,t,r){t.CDPRequestInfo=r(63),t.CRIExtraCapturer=r(160),t.CapturedRequest=r(64),t.ElectronCapturer=r(161),t.PuppeteerCDPCapturer=r(162),t.PuppeteerCapturer=r(163),t.RemoteChromeCapturer=r(164),t.RequestHandler=r(24)},function(e,t){e.exports=class{constructor(e,t="request"){this._capture=!0,this._requests=new Map,this._requestC=0,this.requestWillBeSent=this.requestWillBeSent.bind(this),e&&this.attach(e,t)}attach(e,t="request"){e.removeListener(t,this.requestWillBeSent),e.on(t,this.requestWillBeSent)}detach(e,t="request"){e.removeListener(t,this.requestWillBeSent)}startCapturing(){this._requestC=0,this._requests.clear(),this._capture=!0}stopCapturing(){this._capture=!1}[Symbol.iterator](){return this._requests.values()}clear(){this._requestC=0,this._requests.clear()}requests(){return Array.from(this._requests.values())}iterateRequests(){return this._requests.values()}requestWillBeSent(e){this._capture&&this._requests.set(this._requestC++,e)}}},function(e,t,r){const n=r(24);e.exports=class extends n{constructor(){super(),this.maybeNetworkMessage=this.maybeNetworkMessage.bind(this),this.attach=this.attach.bind(this),this.requestWillBeSent=this.requestWillBeSent.bind(this),this.responseReceived=this.responseReceived.bind(this)}attach(e){e.on("message",(e,t,r)=>{"Network.requestWillBeSent"===t?this.requestWillBeSent(r):"Network.responseReceived"===t&&this.responseReceived(r)})}maybeNetworkMessage(e,t){"Network.requestWillBeSent"===e?this.requestWillBeSent(t):"Network.responseReceived"===e&&this.responseReceived(t)}}},function(e,t,r){const n=r(24);e.exports=class extends n{constructor(e){super(),this.requestWillBeSent=this.requestWillBeSent.bind(this),this.responseReceived=this.responseReceived.bind(this),this.attach(e)}attach(e){e&&(e.on("Network.requestWillBeSent",this.requestWillBeSent),e.on("Network.responseReceived",this.responseReceived))}detach(e){e&&(e.removeListener("Network.requestWillBeSent",this.requestWillBeSent),e.removeListener("Network.responseReceived",this.responseReceived))}}},function(e,t){e.exports=class{constructor(e,t="request"){this._capture=!0,this._requests=new Map,this._requestC=0,this.requestWillBeSent=this.requestWillBeSent.bind(this),e&&this.attach(e,t)}attach(e,t="request"){e.removeListener(t,this.requestWillBeSent),e.on(t,this.requestWillBeSent)}detach(e,t="request"){e.removeListener(t,this.requestWillBeSent)}startCapturing(){this._requestC=0,this._requests.clear(),this._capture=!0}stopCapturing(){this._capture=!1}[Symbol.iterator](){return this._requests.values()}clear(){this._requestC=0,this._requests.clear()}requests(){return Array.from(this._requests.values())}iterateRequests(){return this._requests.values()}requestWillBeSent(e){this._capture&&this._requests.set(this._requestC++,e)}}},function(e,t,r){const n=r(24);e.exports=class extends n{constructor(e){super(),this.requestWillBeSent=this.requestWillBeSent.bind(this),this.responseReceived=this.responseReceived.bind(this),this.attach(e)}attach(e){e&&(e.requestWillBeSent(this.requestWillBeSent),e.responseReceived(this.responseReceived))}detach(e){e&&(e.removeListener("Network.requestWillBeSent",this.requestWillBeSent),e.removeListener("Network.responseReceived",this.responseReceived))}}},function(e,t,r){(function(t){const n=r(8),{STATUS_CODES:i}=r(35),{URL:s}=r(18),{CRLF:o}=r(3),{stringifyHeaders:a,stringifyRequestHeaders:u}=r(36),{noGZ:h,replaceContentLen:c}=r(9);e.exports=class extends n{constructor(e){super(e),this._UP=new s("about:blank")}async generateWarcEntry(e){let r="";this._UP.href=e.request.href,""!==this._UP.search?r+=`${e.request.method} ${this._UP.pathname}${this._UP.search[0]}${this._UP.searchParams} HTTP/1.1${o}`:r+=`${e.request.method} ${this._UP.pathname} HTTP/1.1${o}`,r+=u(e.request.headers,this._UP.host);const n="POST"===e.request.method?e.request.body:null;await this.writeRequestRecord(this._UP.href,r,n);let s=`HTTP/1.1 ${e.statusCode} ${i[e.statusCode]} ${o}${a(e.headers)}`,f=e.body;s=f?(s=s.replace(h,"")).replace(c,`Content-Length: ${t.byteLength(f,"utf8")}${o}`):s.replace(c,`Content-Length: 0${o}`),await this.writeResponseRecord(this._UP.href,s,f)}}}).call(this,r(0).Buffer)},function(e,t,r){"use strict";var n={};(0,r(5).assign)(n,r(167),r(168),r(30)),e.exports=n},function(e,t,r){"use strict";var n=r(46),i=r(5),s=r(65),o=r(29),a=r(28),u=Object.prototype.toString,h=0,c=-1,f=0,l=8;function d(e){if(!(this instanceof d))return new d(e);this.options=i.assign({level:c,method:l,chunkSize:16384,windowBits:15,memLevel:8,strategy:f,to:""},e||{});var t=this.options;t.raw&&t.windowBits>0?t.windowBits=-t.windowBits:t.gzip&&t.windowBits>0&&t.windowBits<16&&(t.windowBits+=16),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new a,this.strm.avail_out=0;var r=n.deflateInit2(this.strm,t.level,t.method,t.windowBits,t.memLevel,t.strategy);if(r!==h)throw new Error(o[r]);if(t.header&&n.deflateSetHeader(this.strm,t.header),t.dictionary){var p;if(p="string"==typeof t.dictionary?s.string2buf(t.dictionary):"[object ArrayBuffer]"===u.call(t.dictionary)?new Uint8Array(t.dictionary):t.dictionary,(r=n.deflateSetDictionary(this.strm,p))!==h)throw new Error(o[r]);this._dict_set=!0}}function p(e,t){var r=new d(t);if(r.push(e,!0),r.err)throw r.msg||o[r.err];return r.result}d.prototype.push=function(e,t){var r,o,a=this.strm,c=this.options.chunkSize;if(this.ended)return!1;o=t===~~t?t:!0===t?4:0,"string"==typeof e?a.input=s.string2buf(e):"[object ArrayBuffer]"===u.call(e)?a.input=new Uint8Array(e):a.input=e,a.next_in=0,a.avail_in=a.input.length;do{if(0===a.avail_out&&(a.output=new i.Buf8(c),a.next_out=0,a.avail_out=c),1!==(r=n.deflate(a,o))&&r!==h)return this.onEnd(r),this.ended=!0,!1;0!==a.avail_out&&(0!==a.avail_in||4!==o&&2!==o)||("string"===this.options.to?this.onData(s.buf2binstring(i.shrinkBuf(a.output,a.next_out))):this.onData(i.shrinkBuf(a.output,a.next_out)))}while((a.avail_in>0||0===a.avail_out)&&1!==r);return 4===o?(r=n.deflateEnd(this.strm),this.onEnd(r),this.ended=!0,r===h):2!==o||(this.onEnd(h),a.avail_out=0,!0)},d.prototype.onData=function(e){this.chunks.push(e)},d.prototype.onEnd=function(e){e===h&&("string"===this.options.to?this.result=this.chunks.join(""):this.result=i.flattenChunks(this.chunks)),this.chunks=[],this.err=e,this.msg=this.strm.msg},t.Deflate=d,t.deflate=p,t.deflateRaw=function(e,t){return(t=t||{}).raw=!0,p(e,t)},t.gzip=function(e,t){return(t=t||{}).gzip=!0,p(e,t)}},function(e,t,r){"use strict";var n=r(49),i=r(5),s=r(65),o=r(30),a=r(29),u=r(28),h=r(169),c=Object.prototype.toString;function f(e){if(!(this instanceof f))return new f(e);this.options=i.assign({chunkSize:16384,windowBits:0,to:""},e||{});var t=this.options;t.raw&&t.windowBits>=0&&t.windowBits<16&&(t.windowBits=-t.windowBits,0===t.windowBits&&(t.windowBits=-15)),!(t.windowBits>=0&&t.windowBits<16)||e&&e.windowBits||(t.windowBits+=32),t.windowBits>15&&t.windowBits<48&&0==(15&t.windowBits)&&(t.windowBits|=15),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new u,this.strm.avail_out=0;var r=n.inflateInit2(this.strm,t.windowBits);if(r!==o.Z_OK)throw new Error(a[r]);if(this.header=new h,n.inflateGetHeader(this.strm,this.header),t.dictionary&&("string"==typeof t.dictionary?t.dictionary=s.string2buf(t.dictionary):"[object ArrayBuffer]"===c.call(t.dictionary)&&(t.dictionary=new Uint8Array(t.dictionary)),t.raw&&(r=n.inflateSetDictionary(this.strm,t.dictionary))!==o.Z_OK))throw new Error(a[r])}function l(e,t){var r=new f(t);if(r.push(e,!0),r.err)throw r.msg||a[r.err];return r.result}f.prototype.push=function(e,t){var r,a,u,h,f,l=this.strm,d=this.options.chunkSize,p=this.options.dictionary,_=!1;if(this.ended)return!1;a=t===~~t?t:!0===t?o.Z_FINISH:o.Z_NO_FLUSH,"string"==typeof e?l.input=s.binstring2buf(e):"[object ArrayBuffer]"===c.call(e)?l.input=new Uint8Array(e):l.input=e,l.next_in=0,l.avail_in=l.input.length;do{if(0===l.avail_out&&(l.output=new i.Buf8(d),l.next_out=0,l.avail_out=d),(r=n.inflate(l,o.Z_NO_FLUSH))===o.Z_NEED_DICT&&p&&(r=n.inflateSetDictionary(this.strm,p)),r===o.Z_BUF_ERROR&&!0===_&&(r=o.Z_OK,_=!1),r!==o.Z_STREAM_END&&r!==o.Z_OK)return this.onEnd(r),this.ended=!0,!1;l.next_out&&(0!==l.avail_out&&r!==o.Z_STREAM_END&&(0!==l.avail_in||a!==o.Z_FINISH&&a!==o.Z_SYNC_FLUSH)||("string"===this.options.to?(u=s.utf8border(l.output,l.next_out),h=l.next_out-u,f=s.buf2string(l.output,u),l.next_out=h,l.avail_out=d-h,h&&i.arraySet(l.output,l.output,u,h,0),this.onData(f)):this.onData(i.shrinkBuf(l.output,l.next_out)))),0===l.avail_in&&0===l.avail_out&&(_=!0)}while((l.avail_in>0||0===l.avail_out)&&r!==o.Z_STREAM_END);return r===o.Z_STREAM_END&&(a=o.Z_FINISH),a===o.Z_FINISH?(r=n.inflateEnd(this.strm),this.onEnd(r),this.ended=!0,r===o.Z_OK):a!==o.Z_SYNC_FLUSH||(this.onEnd(o.Z_OK),l.avail_out=0,!0)},f.prototype.onData=function(e){this.chunks.push(e)},f.prototype.onEnd=function(e){e===o.Z_OK&&("string"===this.options.to?this.result=this.chunks.join(""):this.result=i.flattenChunks(this.chunks)),this.chunks=[],this.err=e,this.msg=this.strm.msg},t.Inflate=f,t.inflate=l,t.inflateRaw=function(e,t){return(t=t||{}).raw=!0,l(e,t)},t.ungzip=l},function(e,t,r){"use strict";e.exports=function(){this.text=0,this.time=0,this.xflags=0,this.os=0,this.extra=null,this.extra_len=0,this.name="",this.comment="",this.hcrc=0,this.done=!1}}]));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,